.. @jsii-pacmak:meta@ {"fingerprint":"MfUX7F6b5FkMBRLTy6AK0r4N+ilCFmT24Mhytz6axFQ="}

@aws-cdk/aws-lambda
===================

.. mdinclude:: ./__aws-cdk_aws-lambda.README.md

Reference
---------

.. tabs::

   .. group-tab:: C#

      View in `Nuget <https://www.nuget.org/packages/Amazon.CDK.AWS.Lambda/0.15.0>`_

      **csproj**:

      .. code-block:: xml

         <PackageReference Include="Amazon.CDK.AWS.Lambda" Version="0.15.0" />

      **dotnet**:

      .. code-block:: console

         dotnet add package Amazon.CDK.AWS.Lambda --version 0.15.0

      **packages.config**:

      .. code-block:: xml

         <package id="Amazon.CDK.AWS.Lambda" version="0.15.0" />


   .. group-tab:: Java

      View in `Maven Central <https://repo1.maven.org/maven2/software/amazon/awscdk/lambda/0.15.0/>`_

      **Apache Buildr**:

      .. code-block:: none

         'software.amazon.awscdk:lambda:jar:0.15.0'

      **Apache Ivy**:

      .. code-block:: xml

         <dependency groupId="software.amazon.awscdk" name="lambda" rev="0.15.0"/>

      **Apache Maven**:

      .. code-block:: xml

         <dependency>
           <groupId>software.amazon.awscdk</groupId>
           <artifactId>lambda</artifactId>
           <version>0.15.0</version>
         </dependency>

      **Gradle / Grails**:

      .. code-block:: none

         compile 'software.amazon.awscdk:lambda:0.15.0'

      **Groovy Grape**:

      .. code-block:: none

         @Grapes(
         @Grab(group='software.amazon.awscdk', module='lambda', version='0.15.0')
         )


   .. group-tab:: JavaScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-lambda/v/0.15.0>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-lambda@0.15.0

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-lambda": "^0.15.0"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-lambda@0.15.0


   .. group-tab:: TypeScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-lambda/v/0.15.0>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-lambda@0.15.0

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-lambda": "^0.15.0"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-lambda@0.15.0



.. py:module:: @aws-cdk/aws-lambda

Alias
^^^^^

.. py:class:: Alias(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.Alias;

      .. code-tab:: javascript

         const { Alias } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { Alias } from '@aws-cdk/aws-lambda';



   A new alias to a particular version of a Lambda function.


   :extends: :py:class:`~@aws-cdk/aws-lambda.FunctionRef`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-lambda.AliasProps`\ 

   .. py:method:: addPermission(name, permission)

      *Overrides* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.addPermission`

      Adds a permission to the Lambda resource policy.


      :param name: 
      :type name: string
      :param permission: 
      :type permission: :py:class:`~@aws-cdk/aws-lambda.Permission`\ 


   .. py:attribute:: canCreatePermissions

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.canCreatePermissions`

      Whether the addPermission() call adds any permissions  True for new Lambdas, false for imported Lambdas (they might live in different accounts).


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: functionArn

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.functionArn`

      ARN of this alias  Used to be able to use Alias in place of a regular Lambda. Lambda accepts ARNs everywhere it accepts function names.


      :type: string *(readonly)*


   .. py:attribute:: functionName

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.functionName`

      ARN of this alias  Used to be able to use Alias in place of a regular Lambda. Lambda accepts ARNs everywhere it accepts function names.


      :type: string *(readonly)*


   .. py:attribute:: role

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.role`

      Role associated with this alias


      :type: :py:class:`@aws-cdk/aws-iam.Role`\  or ``undefined`` *(readonly)*


   .. py:method:: addEventSource(source)

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.addEventSource>`

      Adds an event source to this function.  Any type that implements the IEventSource interface can be used here. For example, you can call this with an SQS queue: `lambda.addEventSource(queue)`.


      :param source: The event source
      :type source: :py:class:`~@aws-cdk/aws-lambda.IEventSource`\ 


   .. py:method:: addToPipeline(stage, name, [props]) -> @aws-cdk/aws-lambda.PipelineInvokeAction

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.addToPipeline>`

      Convenience method for creating a new {@link PipelineInvokeAction}, and adding it to the given Stage.


      :param stage: the Pipeline Stage to add the new Action to
      :type stage: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\ 
      :param name: the name of the newly created Action
      :type name: string
      :param props: the properties of the new Action
      :type props: :py:class:`~@aws-cdk/aws-lambda.CommonPipelineInvokeActionProps`\  or ``undefined``
      :return: the newly created {@link PipelineInvokeAction}
      :rtype: :py:class:`~@aws-cdk/aws-lambda.PipelineInvokeAction`\ 


   .. py:method:: addToRolePolicy(statement)

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.addToRolePolicy>`

      :param statement: 
      :type statement: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: asBucketNotificationDestination(bucketArn, bucketId) -> @aws-cdk/aws-s3-notifications.BucketNotificationDestinationProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.asBucketNotificationDestination>`

      Allows this Lambda to be used as a destination for bucket notifications. Use `bucket.onEvent(lambda)` to subscribe.


      :param bucketArn: 
      :type bucketArn: string
      :param bucketId: 
      :type bucketId: string
      :rtype: :py:class:`@aws-cdk/aws-s3-notifications.BucketNotificationDestinationProps`\ 


   .. py:method:: asEventRuleTarget(ruleArn, ruleId) -> @aws-cdk/aws-events.EventRuleTargetProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.asEventRuleTarget>`

      Returns a RuleTarget that can be used to trigger this Lambda as a result from a CloudWatch event.


      :param ruleArn: 
      :type ruleArn: string
      :param ruleId: 
      :type ruleId: string
      :rtype: :py:class:`@aws-cdk/aws-events.EventRuleTargetProps`\ 


   .. py:method:: asStepFunctionsTaskResource(_callingTask) -> @aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.asStepFunctionsTaskResource>`

      Return the properties required for using this object as a Task resource


      :param _callingTask: 
      :type _callingTask: :py:class:`@aws-cdk/aws-stepfunctions.Task`\ 
      :rtype: :py:class:`@aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps`\ 


   .. py:method:: export() -> @aws-cdk/aws-lambda.FunctionRefProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.export>`

      Export this Function (without the role)


      :rtype: :py:class:`~@aws-cdk/aws-lambda.FunctionRefProps`\ 


   .. py:method:: grantInvoke([identity])

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.grantInvoke>`

      Grant the given identity permissions to invoke this Lambda


      :param identity: 
      :type identity: :py:class:`@aws-cdk/aws-iam.IPrincipal`\  or ``undefined``


   .. py:method:: logSubscriptionDestination(sourceLogGroup) -> @aws-cdk/aws-logs.LogSubscriptionDestination

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.logSubscriptionDestination>`

      Return the properties required to send subscription events to this destination.  If necessary, the destination can use the properties of the SubscriptionFilter object itself to configure its permissions to allow the subscription to write to it.  The destination may reconfigure its own permissions in response to this function call.


      :param sourceLogGroup: 
      :type sourceLogGroup: :py:class:`@aws-cdk/aws-logs.LogGroupRef`\ 
      :rtype: :py:class:`@aws-cdk/aws-logs.LogSubscriptionDestination`\ 


   .. py:method:: metric(metricName, [props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metric>`

      Return the given named metric for this Lambda


      :param metricName: 
      :type metricName: string
      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricDuration([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricDuration>`

      Metric for the Duration of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricErrors([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricErrors>`

      Metric for the Errors executing this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricInvocations([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricInvocations>`

      Metric for the number of invocations of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricThrottles([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricThrottles>`

      Metric for the number of throttled invocations of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:attribute:: connections

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.connections>`

      Access the Connections object  Will fail if not a VPC-enabled Lambda Function


      :type: :py:class:`@aws-cdk/aws-ec2.Connections`\  *(readonly)*


   .. py:attribute:: isBoundToVpc

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.isBoundToVpc>`

      Whether or not this Lambda function was bound to a VPC  If this is is `false`, trying to access the `connections` object will fail.


      :type: boolean *(readonly)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


AliasProps (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AliasProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.AliasProps;

      .. code-tab:: javascript

         // AliasProps is an interface

      .. code-tab:: typescript

         import { AliasProps } from '@aws-cdk/aws-lambda';



   Properties for a new Lambda alias




   .. py:attribute:: aliasName

      Name of this alias


      :type: string *(abstract)*


   .. py:attribute:: version

      Function version this alias refers to  Use lambda.addVersion() to obtain a new lambda version to refer to.


      :type: :py:class:`~@aws-cdk/aws-lambda.FunctionVersion`\  *(abstract)*


   .. py:attribute:: additionalVersions

      Additional versions with individual weights this alias points to  Individual additional version weights specified here should add up to (less than) one. All remaining weight is routed to the default version.  For example, the config is      version: "1"     additionalVersions: [{ version: "2", weight: 0.05 }]  Then 5% of traffic will be routed to function version 2, while the remaining 95% of traffic will be routed to function version 1.


      :type: :py:class:`~@aws-cdk/aws-lambda.VersionWeight`\ [] or ``undefined`` *(abstract)*


   .. py:attribute:: description

      Description for the alias


      :type: string or ``undefined`` *(abstract)*


AssetCode
^^^^^^^^^

.. py:class:: AssetCode(path, [packaging])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.AssetCode;

      .. code-tab:: javascript

         const { AssetCode } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { AssetCode } from '@aws-cdk/aws-lambda';



   Lambda code from a local directory.


   :extends: :py:class:`~@aws-cdk/aws-lambda.Code`\ 
   :param path: The path to the asset file or directory.
   :type path: string
   :param packaging: The asset packaging format (optional, determined automatically)
   :type packaging: :py:class:`@aws-cdk/assets.AssetPackaging`\  or ``undefined``

   .. py:method:: bind(lambda)

      *Overrides* :py:meth:`@aws-cdk/aws-lambda.Code.bind`

      Called when the lambda is initialized to allow this object to bind to the stack, add resources and have fun.


      :param lambda: 
      :type lambda: :py:class:`~@aws-cdk/aws-lambda.Function`\ 


   .. py:method:: toJSON() -> @aws-cdk/aws-lambda.cloudformation.FunctionResource.CodeProperty

      *Implements* :py:meth:`@aws-cdk/aws-lambda.Code.toJSON`

      Called during stack synthesis to render the CodePropery for the Lambda function.


      :rtype: :py:class:`~@aws-cdk/aws-lambda.cloudformation.FunctionResource.CodeProperty`\ 


   .. py:attribute:: packaging

      The asset packaging.


      :type: :py:class:`@aws-cdk/assets.AssetPackaging`\  *(readonly)*


   .. py:attribute:: path

      The path to the asset file or directory.


      :type: string *(readonly)*


Code
^^^^

.. py:class:: Code()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.Code;

      .. code-tab:: javascript

         const { Code } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { Code } from '@aws-cdk/aws-lambda';



   :abstract: Yes

   .. py:staticmethod:: asset(path) -> @aws-cdk/aws-lambda.AssetCode

      Loads the function code from a local disk asset.


      :param path: Either a directory with the Lambda code bundle or a .zip file
      :type path: string
      :rtype: :py:class:`~@aws-cdk/aws-lambda.AssetCode`\ 


   .. py:staticmethod:: bucket(bucket, key, [objectVersion]) -> @aws-cdk/aws-lambda.S3Code

      :param bucket: The S3 bucket
      :type bucket: :py:class:`@aws-cdk/aws-s3.BucketRef`\ 
      :param key: The object key
      :type key: string
      :param objectVersion: Optional S3 object version
      :type objectVersion: string or ``undefined``
      :return: `LambdaS3Code` associated with the specified S3 object.
      :rtype: :py:class:`~@aws-cdk/aws-lambda.S3Code`\ 


   .. py:staticmethod:: directory(directoryToZip) -> @aws-cdk/aws-lambda.AssetCode

      :param directoryToZip: The directory to zip
      :type directoryToZip: string
      :return: Zip archives the contents of a directory on disk and uses this
         as the lambda handler's code.
      :rtype: :py:class:`~@aws-cdk/aws-lambda.AssetCode`\ 


   .. py:staticmethod:: file(filePath) -> @aws-cdk/aws-lambda.AssetCode

      :param filePath: The file path
      :type filePath: string
      :return: Uses a file on disk as a lambda handler's code.
      :rtype: :py:class:`~@aws-cdk/aws-lambda.AssetCode`\ 


   .. py:staticmethod:: inline(code) -> @aws-cdk/aws-lambda.InlineCode

      :param code: The actual handler code (limited to 4KiB)
      :type code: string
      :return: `LambdaInlineCode` with inline code.
      :rtype: :py:class:`~@aws-cdk/aws-lambda.InlineCode`\ 


   .. py:method:: bind(_lambda)

      Called when the lambda is initialized to allow this object to bind to the stack, add resources and have fun.


      :param _lambda: 
      :type _lambda: :py:class:`~@aws-cdk/aws-lambda.Function`\ 


   .. py:method:: toJSON() -> @aws-cdk/aws-lambda.cloudformation.FunctionResource.CodeProperty

      Called during stack synthesis to render the CodePropery for the Lambda function.


      :rtype: :py:class:`~@aws-cdk/aws-lambda.cloudformation.FunctionResource.CodeProperty`\ 
      :abstract: Yes


CommonPipelineInvokeActionProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CommonPipelineInvokeActionProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.CommonPipelineInvokeActionProps;

      .. code-tab:: javascript

         // CommonPipelineInvokeActionProps is an interface

      .. code-tab:: typescript

         import { CommonPipelineInvokeActionProps } from '@aws-cdk/aws-lambda';



   Common properties for creating a {@link PipelineInvokeAction} - either directly, through its constructor, or through {@link FunctionRef#addToPipeline}.


   :extends: :py:class:`@aws-cdk/aws-codepipeline-api.CommonActionProps`\ 


   .. py:attribute:: addPutJobResultPolicy

      Adds the "codepipeline:PutJobSuccessResult" and "codepipeline:PutJobFailureResult" for '*' resource to the Lambda execution role policy.  NOTE: the reason we can't add the specific pipeline ARN as a resource is to avoid a cyclic dependency between the pipeline and the Lambda function (the pipeline references) the Lambda and the Lambda needs permissions on the pipeline.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: userParameters

      String to be used in the event data parameter passed to the Lambda function  See an example JSON event in the CodePipeline documentation.  https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-invoke-lambda-function.html#actions-invoke-lambda-function-json-event-example


      :type: any or ``undefined`` *(abstract)*


   .. py:attribute:: runOrder

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.CommonActionProps <@aws-cdk/aws-codepipeline-api.CommonActionProps.runOrder>`

      The runOrder property for this Action. RunOrder determines the relative order in which multiple Actions in the same Stage execute.


      :type: number or ``undefined`` *(abstract)*


EventSourceMapping
^^^^^^^^^^^^^^^^^^

.. py:class:: EventSourceMapping(parent, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.EventSourceMapping;

      .. code-tab:: javascript

         const { EventSourceMapping } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { EventSourceMapping } from '@aws-cdk/aws-lambda';



   Defines a Lambda EventSourceMapping resource.  Usually, you won't need to define the mapping yourself. This will usually be done by event sources. For example, to add an SQS event source to a function:      import { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';     lambda.addEventSource(new SqsEventSource(sqs));  The `SqsEventSource` class will automatically create the mapping, and will also modify the Lambda's execution role so it can consume messages from the queue.


   :extends: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-lambda.EventSourceMappingProps`\ 

   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


EventSourceMappingProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: EventSourceMappingProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.EventSourceMappingProps;

      .. code-tab:: javascript

         // EventSourceMappingProps is an interface

      .. code-tab:: typescript

         import { EventSourceMappingProps } from '@aws-cdk/aws-lambda';





   .. py:attribute:: eventSourceArn

      The Amazon Resource Name (ARN) of the event source. Any record added to this stream can invoke the Lambda function.


      :type: string *(abstract)*


   .. py:attribute:: target

      The target AWS Lambda function.


      :type: :py:class:`~@aws-cdk/aws-lambda.FunctionRef`\  *(abstract)*


   .. py:attribute:: batchSize

      The largest number of records that AWS Lambda will retrieve from your event source at the time of invoking your function. Your function receives an event with all the retrieved records.  Valid Range: Minimum value of 1. Maximum value of 10000.


      :type: number or ``undefined`` *(abstract)*


   .. py:attribute:: enabled

      Set to false to disable the event source upon creation.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: startingPosition

      The position in the DynamoDB or Kinesis stream where AWS Lambda should start reading.


      :type: :py:class:`~@aws-cdk/aws-lambda.StartingPosition`\  or ``undefined`` *(abstract)*


Function
^^^^^^^^

.. py:class:: Function(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.Function;

      .. code-tab:: javascript

         const { Function } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { Function } from '@aws-cdk/aws-lambda';



   Deploys a file from from inside the construct library as a function.  The supplied file is subject to the 4096 bytes limit of being embedded in a CloudFormation template.  The construct includes an associated role with the lambda.  This construct does not yet reproduce all features from the underlying resource library.


   :extends: :py:class:`~@aws-cdk/aws-lambda.FunctionRef`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-lambda.FunctionProps`\ 

   .. py:method:: addEnvironment(key, [value])

      Adds an environment variable to this Lambda function. If this is a ref to a Lambda function, this operation results in a no-op.


      :param key: The environment variable key.
      :type key: string
      :param value: The environment variable's value.
      :type value: any or ``undefined``


   .. py:method:: addVersion(name, [codeSha256, [description]]) -> @aws-cdk/aws-lambda.FunctionVersion

      Add a new version for this Lambda  If you want to deploy through CloudFormation and use aliases, you need to add a new version (with a new name) to your Lambda every time you want to deploy an update. An alias can then refer to the newly created Version.  All versions should have distinct names, and you should not delete versions as long as your Alias needs to refer to them.


      :param name: A unique name for this version
      :type name: string
      :param codeSha256: The SHA-256 hash of the most recently deployed Lambda source code, or omit to skip validation.
      :type codeSha256: string or ``undefined``
      :param description: A description for this version.
      :type description: string or ``undefined``
      :return: A new Version object.
      :rtype: :py:class:`~@aws-cdk/aws-lambda.FunctionVersion`\ 


   .. py:attribute:: canCreatePermissions

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.canCreatePermissions`

      Whether the addPermission() call adds any permissions  True for new Lambdas, false for imported Lambdas (they might live in different accounts).


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: functionArn

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.functionArn`

      ARN of this function


      :type: string *(readonly)*


   .. py:attribute:: functionName

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.functionName`

      Name of this function


      :type: string *(readonly)*


   .. py:attribute:: handler

      The name of the handler configured for this lambda.


      :type: string *(readonly)*


   .. py:attribute:: runtime

      The runtime configured for this lambda.


      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)*


   .. py:attribute:: role

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.role`

      Execution role associated with this function


      :type: :py:class:`@aws-cdk/aws-iam.Role`\  or ``undefined`` *(readonly)*


   .. py:method:: addEventSource(source)

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.addEventSource>`

      Adds an event source to this function.  Any type that implements the IEventSource interface can be used here. For example, you can call this with an SQS queue: `lambda.addEventSource(queue)`.


      :param source: The event source
      :type source: :py:class:`~@aws-cdk/aws-lambda.IEventSource`\ 


   .. py:method:: addPermission(id, permission)

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.addPermission>`

      Adds a permission to the Lambda resource policy.


      :param id: The id ƒor the permission construct
      :type id: string
      :param permission: 
      :type permission: :py:class:`~@aws-cdk/aws-lambda.Permission`\ 


   .. py:method:: addToPipeline(stage, name, [props]) -> @aws-cdk/aws-lambda.PipelineInvokeAction

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.addToPipeline>`

      Convenience method for creating a new {@link PipelineInvokeAction}, and adding it to the given Stage.


      :param stage: the Pipeline Stage to add the new Action to
      :type stage: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\ 
      :param name: the name of the newly created Action
      :type name: string
      :param props: the properties of the new Action
      :type props: :py:class:`~@aws-cdk/aws-lambda.CommonPipelineInvokeActionProps`\  or ``undefined``
      :return: the newly created {@link PipelineInvokeAction}
      :rtype: :py:class:`~@aws-cdk/aws-lambda.PipelineInvokeAction`\ 


   .. py:method:: addToRolePolicy(statement)

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.addToRolePolicy>`

      :param statement: 
      :type statement: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: asBucketNotificationDestination(bucketArn, bucketId) -> @aws-cdk/aws-s3-notifications.BucketNotificationDestinationProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.asBucketNotificationDestination>`

      Allows this Lambda to be used as a destination for bucket notifications. Use `bucket.onEvent(lambda)` to subscribe.


      :param bucketArn: 
      :type bucketArn: string
      :param bucketId: 
      :type bucketId: string
      :rtype: :py:class:`@aws-cdk/aws-s3-notifications.BucketNotificationDestinationProps`\ 


   .. py:method:: asEventRuleTarget(ruleArn, ruleId) -> @aws-cdk/aws-events.EventRuleTargetProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.asEventRuleTarget>`

      Returns a RuleTarget that can be used to trigger this Lambda as a result from a CloudWatch event.


      :param ruleArn: 
      :type ruleArn: string
      :param ruleId: 
      :type ruleId: string
      :rtype: :py:class:`@aws-cdk/aws-events.EventRuleTargetProps`\ 


   .. py:method:: asStepFunctionsTaskResource(_callingTask) -> @aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.asStepFunctionsTaskResource>`

      Return the properties required for using this object as a Task resource


      :param _callingTask: 
      :type _callingTask: :py:class:`@aws-cdk/aws-stepfunctions.Task`\ 
      :rtype: :py:class:`@aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps`\ 


   .. py:method:: export() -> @aws-cdk/aws-lambda.FunctionRefProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.export>`

      Export this Function (without the role)


      :rtype: :py:class:`~@aws-cdk/aws-lambda.FunctionRefProps`\ 


   .. py:method:: grantInvoke([identity])

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.grantInvoke>`

      Grant the given identity permissions to invoke this Lambda


      :param identity: 
      :type identity: :py:class:`@aws-cdk/aws-iam.IPrincipal`\  or ``undefined``


   .. py:method:: logSubscriptionDestination(sourceLogGroup) -> @aws-cdk/aws-logs.LogSubscriptionDestination

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.logSubscriptionDestination>`

      Return the properties required to send subscription events to this destination.  If necessary, the destination can use the properties of the SubscriptionFilter object itself to configure its permissions to allow the subscription to write to it.  The destination may reconfigure its own permissions in response to this function call.


      :param sourceLogGroup: 
      :type sourceLogGroup: :py:class:`@aws-cdk/aws-logs.LogGroupRef`\ 
      :rtype: :py:class:`@aws-cdk/aws-logs.LogSubscriptionDestination`\ 


   .. py:method:: metric(metricName, [props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metric>`

      Return the given named metric for this Lambda


      :param metricName: 
      :type metricName: string
      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricDuration([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricDuration>`

      Metric for the Duration of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricErrors([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricErrors>`

      Metric for the Errors executing this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricInvocations([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricInvocations>`

      Metric for the number of invocations of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricThrottles([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricThrottles>`

      Metric for the number of throttled invocations of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:attribute:: connections

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.connections>`

      Access the Connections object  Will fail if not a VPC-enabled Lambda Function


      :type: :py:class:`@aws-cdk/aws-ec2.Connections`\  *(readonly)*


   .. py:attribute:: isBoundToVpc

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.isBoundToVpc>`

      Whether or not this Lambda function was bound to a VPC  If this is is `false`, trying to access the `connections` object will fail.


      :type: boolean *(readonly)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


FunctionProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: FunctionProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.FunctionProps;

      .. code-tab:: javascript

         // FunctionProps is an interface

      .. code-tab:: typescript

         import { FunctionProps } from '@aws-cdk/aws-lambda';





   .. py:attribute:: code

      The source code of your Lambda function. You can point to a file in an Amazon Simple Storage Service (Amazon S3) bucket or specify your source code as inline text.


      :type: :py:class:`~@aws-cdk/aws-lambda.Code`\  *(abstract)*


   .. py:attribute:: handler

      The name of the function (within your source code) that Lambda calls to start running your code. For more information, see the Handler property in the AWS Lambda Developer Guide.  NOTE: If you specify your source code as inline text by specifying the ZipFile property within the Code property, specify index.function_name as the handler.


      :type: string *(abstract)*


   .. py:attribute:: runtime

      The runtime environment for the Lambda function that you are uploading. For valid values, see the Runtime property in the AWS Lambda Developer Guide.


      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(abstract)*


   .. py:attribute:: allowAllOutbound

      Whether to allow the Lambda to send all network traffic  If set to false, you must individually add traffic rules to allow the Lambda to connect to network targets.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: deadLetterQueue

      The SQS queue to use if DLQ is enabled.


      :type: :py:class:`@aws-cdk/aws-sqs.QueueRef`\  or ``undefined`` *(abstract)*


   .. py:attribute:: deadLetterQueueEnabled

      Enabled DLQ. If `deadLetterQueue` is undefined, an SQS queue with default options will be defined for your Function.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: description

      A description of the function.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: environment

      Key-value pairs that Lambda caches and makes available for your Lambda functions. Use environment variables to apply configuration changes, such as test and production environment configurations, without changing your Lambda function source code.


      :type: string => (any or ``undefined``) or ``undefined`` *(abstract)*


   .. py:attribute:: functionName

      A name for the function. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the function's name. For more information, see Name Type.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: initialPolicy

      Initial policy statements to add to the created Lambda Role.  You can call `addToRolePolicy` to the created lambda to add statements post creation.


      :type: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ [] or ``undefined`` *(abstract)*


   .. py:attribute:: memorySize

      The amount of memory, in MB, that is allocated to your Lambda function. Lambda uses this value to proportionally allocate the amount of CPU power. For more information, see Resource Model in the AWS Lambda Developer Guide.


      :type: number or ``undefined`` *(abstract)*


   .. py:attribute:: role

      Lambda execution role.  This is the role that will be assumed by the function upon execution. It controls the permissions that the function will have. The Role must be assumable by the 'lambda.amazonaws.com' service principal.


      :type: :py:class:`@aws-cdk/aws-iam.Role`\  or ``undefined`` *(abstract)*


   .. py:attribute:: securityGroup

      What security group to associate with the Lambda's network interfaces.  Only used if 'vpc' is supplied.


      :type: :py:class:`@aws-cdk/aws-ec2.SecurityGroupRef`\  or ``undefined`` *(abstract)*


   .. py:attribute:: timeout

      The function execution time (in seconds) after which Lambda terminates the function. Because the execution time affects cost, set this value based on the function's expected execution time.


      :type: number or ``undefined`` *(abstract)*


   .. py:attribute:: tracing

      Enable AWS X-Ray Tracing for Lambda Function.


      :type: :py:class:`~@aws-cdk/aws-lambda.Tracing`\  or ``undefined`` *(abstract)*


   .. py:attribute:: vpc

      VPC network to place Lambda network interfaces  Specify this if the Lambda function needs to access resources in a VPC.


      :type: :py:class:`@aws-cdk/aws-ec2.VpcNetworkRef`\  or ``undefined`` *(abstract)*


   .. py:attribute:: vpcPlacement

      Where to place the network interfaces within the VPC.  Only used if 'vpc' is supplied. Note: internet access for Lambdas requires a NAT gateway, so picking Public subnets is not allowed.


      :type: :py:class:`@aws-cdk/aws-ec2.VpcPlacementStrategy`\  or ``undefined`` *(abstract)*


FunctionRef
^^^^^^^^^^^

.. py:class:: FunctionRef(parent, id)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.FunctionRef;

      .. code-tab:: javascript

         const { FunctionRef } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { FunctionRef } from '@aws-cdk/aws-lambda';



   :extends: :py:class:`@aws-cdk/cdk.Construct`\ 
   :implements: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\ 
   :implements: :py:class:`@aws-cdk/aws-logs.ILogSubscriptionDestination`\ 
   :implements: :py:class:`@aws-cdk/aws-s3-notifications.IBucketNotificationDestination`\ 
   :implements: :py:class:`@aws-cdk/aws-ec2.IConnectable`\ 
   :implements: :py:class:`@aws-cdk/aws-stepfunctions.IStepFunctionsTaskResource`\ 
   :abstract: Yes
   :param parent: The parent construct
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string

   .. py:staticmethod:: import(parent, name, ref) -> @aws-cdk/aws-lambda.FunctionRef

      Creates a Lambda function object which represents a function not defined within this stack.      Lambda.import(this, 'MyImportedFunction', { lambdaArn: new LambdaArn('arn:aws:...') });


      :param parent: The parent construct
      :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param name: The name of the lambda construct
      :type name: string
      :param ref: A reference to a Lambda function. Can be created manually (see example above) or obtained through a call to `lambda.export()`.
      :type ref: :py:class:`~@aws-cdk/aws-lambda.FunctionRefProps`\ 
      :rtype: :py:class:`~@aws-cdk/aws-lambda.FunctionRef`\ 


   .. py:staticmethod:: metricAll(metricName, [props]) -> @aws-cdk/aws-cloudwatch.Metric

      Return the given named metric for this Lambda


      :param metricName: 
      :type metricName: string
      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:staticmethod:: metricAllConcurrentExecutions([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of concurrent executions across all Lambdas


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:staticmethod:: metricAllDuration([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the Duration executing all Lambdas


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:staticmethod:: metricAllErrors([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of Errors executing all Lambdas


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:staticmethod:: metricAllInvocations([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of invocations of all Lambdas


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:staticmethod:: metricAllThrottles([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of throttled invocations of all Lambdas


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:staticmethod:: metricAllUnreservedConcurrentExecutions([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of unreserved concurrent executions across all Lambdas


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: addEventSource(source)

      Adds an event source to this function.  Any type that implements the IEventSource interface can be used here. For example, you can call this with an SQS queue: `lambda.addEventSource(queue)`.


      :param source: The event source
      :type source: :py:class:`~@aws-cdk/aws-lambda.IEventSource`\ 


   .. py:method:: addPermission(id, permission)

      Adds a permission to the Lambda resource policy.


      :param id: The id ƒor the permission construct
      :type id: string
      :param permission: 
      :type permission: :py:class:`~@aws-cdk/aws-lambda.Permission`\ 


   .. py:method:: addToPipeline(stage, name, [props]) -> @aws-cdk/aws-lambda.PipelineInvokeAction

      Convenience method for creating a new {@link PipelineInvokeAction}, and adding it to the given Stage.


      :param stage: the Pipeline Stage to add the new Action to
      :type stage: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\ 
      :param name: the name of the newly created Action
      :type name: string
      :param props: the properties of the new Action
      :type props: :py:class:`~@aws-cdk/aws-lambda.CommonPipelineInvokeActionProps`\  or ``undefined``
      :return: the newly created {@link PipelineInvokeAction}
      :rtype: :py:class:`~@aws-cdk/aws-lambda.PipelineInvokeAction`\ 


   .. py:method:: addToRolePolicy(statement)

      :param statement: 
      :type statement: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: asBucketNotificationDestination(bucketArn, bucketId) -> @aws-cdk/aws-s3-notifications.BucketNotificationDestinationProps

      *Implements* :py:meth:`@aws-cdk/aws-s3-notifications.IBucketNotificationDestination.asBucketNotificationDestination`

      Allows this Lambda to be used as a destination for bucket notifications. Use `bucket.onEvent(lambda)` to subscribe.


      :param bucketArn: 
      :type bucketArn: string
      :param bucketId: 
      :type bucketId: string
      :rtype: :py:class:`@aws-cdk/aws-s3-notifications.BucketNotificationDestinationProps`\ 


   .. py:method:: asEventRuleTarget(ruleArn, ruleId) -> @aws-cdk/aws-events.EventRuleTargetProps

      *Implements* :py:meth:`@aws-cdk/aws-events.IEventRuleTarget.asEventRuleTarget`

      Returns a RuleTarget that can be used to trigger this Lambda as a result from a CloudWatch event.


      :param ruleArn: 
      :type ruleArn: string
      :param ruleId: 
      :type ruleId: string
      :rtype: :py:class:`@aws-cdk/aws-events.EventRuleTargetProps`\ 


   .. py:method:: asStepFunctionsTaskResource(_callingTask) -> @aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IStepFunctionsTaskResource.asStepFunctionsTaskResource`

      Return the properties required for using this object as a Task resource


      :param _callingTask: 
      :type _callingTask: :py:class:`@aws-cdk/aws-stepfunctions.Task`\ 
      :rtype: :py:class:`@aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps`\ 


   .. py:method:: export() -> @aws-cdk/aws-lambda.FunctionRefProps

      Export this Function (without the role)


      :rtype: :py:class:`~@aws-cdk/aws-lambda.FunctionRefProps`\ 


   .. py:method:: grantInvoke([identity])

      Grant the given identity permissions to invoke this Lambda


      :param identity: 
      :type identity: :py:class:`@aws-cdk/aws-iam.IPrincipal`\  or ``undefined``


   .. py:method:: logSubscriptionDestination(sourceLogGroup) -> @aws-cdk/aws-logs.LogSubscriptionDestination

      *Implements* :py:meth:`@aws-cdk/aws-logs.ILogSubscriptionDestination.logSubscriptionDestination`

      Return the properties required to send subscription events to this destination.  If necessary, the destination can use the properties of the SubscriptionFilter object itself to configure its permissions to allow the subscription to write to it.  The destination may reconfigure its own permissions in response to this function call.


      :param sourceLogGroup: 
      :type sourceLogGroup: :py:class:`@aws-cdk/aws-logs.LogGroupRef`\ 
      :rtype: :py:class:`@aws-cdk/aws-logs.LogSubscriptionDestination`\ 


   .. py:method:: metric(metricName, [props]) -> @aws-cdk/aws-cloudwatch.Metric

      Return the given named metric for this Lambda


      :param metricName: 
      :type metricName: string
      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricDuration([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the Duration of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricErrors([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the Errors executing this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricInvocations([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of invocations of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricThrottles([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of throttled invocations of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:attribute:: canCreatePermissions

      Whether the addPermission() call adds any permissions  True for new Lambdas, false for imported Lambdas (they might live in different accounts).


      *Protected property*

      :type: boolean *(readonly)* *(abstract)*


   .. py:attribute:: connections

      *Implements* :py:meth:`@aws-cdk/aws-ec2.IConnectable.connections`

      Access the Connections object  Will fail if not a VPC-enabled Lambda Function


      :type: :py:class:`@aws-cdk/aws-ec2.Connections`\  *(readonly)*


   .. py:attribute:: functionArn

      The ARN fo the function.


      :type: string *(readonly)* *(abstract)*


   .. py:attribute:: functionName

      The name of the function.


      :type: string *(readonly)* *(abstract)*


   .. py:attribute:: isBoundToVpc

      Whether or not this Lambda function was bound to a VPC  If this is is `false`, trying to access the `connections` object will fail.


      :type: boolean *(readonly)*


   .. py:attribute:: role

      The IAM role associated with this function.


      :type: :py:class:`@aws-cdk/aws-iam.Role`\  or ``undefined`` *(readonly)* *(abstract)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


FunctionRefProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: FunctionRefProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.FunctionRefProps;

      .. code-tab:: javascript

         // FunctionRefProps is an interface

      .. code-tab:: typescript

         import { FunctionRefProps } from '@aws-cdk/aws-lambda';



   Represents a Lambda function defined outside of this stack.




   .. py:attribute:: functionArn

      The ARN of the Lambda function.  Format: arn:<partition>:lambda:<region>:<account-id>:function:<function-name>


      :type: string *(abstract)*


   .. py:attribute:: role

      The IAM execution role associated with this function.  If the role is not specified, any role-related operations will no-op.


      :type: :py:class:`@aws-cdk/aws-iam.Role`\  or ``undefined`` *(abstract)*


   .. py:attribute:: securityGroupId

      Id of the securityGroup for this Lambda, if in a VPC.  This needs to be given in order to support allowing connections to this Lambda.


      :type: string or ``undefined`` *(abstract)*


FunctionVersion
^^^^^^^^^^^^^^^

.. py:class:: FunctionVersion(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.FunctionVersion;

      .. code-tab:: javascript

         const { FunctionVersion } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { FunctionVersion } from '@aws-cdk/aws-lambda';



   A single newly-deployed version of a Lambda function.  This object exists to--at deploy time--query the "then-current" version of the Lambda function that it refers to. This Version object can then be used in `Alias` to refer to a particular deployment of a Lambda.  This means that for every new update you deploy to your Lambda (using the CDK and Aliases), you must always create a new Version object. In particular, it must have a different name, so that a new resource is created.  If you want to ensure that you're associating the right version with the right deployment, specify the `codeSha256` property while creating the `Version.  *


   :extends: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-lambda.FunctionVersionProps`\ 

   .. py:attribute:: functionVersion

      The most recently deployed version of this function.


      :type: string *(readonly)*


   .. py:attribute:: lambda

      Lambda object this version is associated with


      :type: :py:class:`~@aws-cdk/aws-lambda.FunctionRef`\  *(readonly)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


FunctionVersionProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: FunctionVersionProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.FunctionVersionProps;

      .. code-tab:: javascript

         // FunctionVersionProps is an interface

      .. code-tab:: typescript

         import { FunctionVersionProps } from '@aws-cdk/aws-lambda';



   Properties for a new Lambda version




   .. py:attribute:: lambda

      Function to get the value of


      :type: :py:class:`~@aws-cdk/aws-lambda.FunctionRef`\  *(abstract)*


   .. py:attribute:: codeSha256

      SHA256 of the version of the Lambda source code  Specify to validate that you're deploying the right version.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: description

      Description of the version


      :type: string or ``undefined`` *(abstract)*


IEventSource (interface)
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IEventSource

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.IEventSource;

      .. code-tab:: javascript

         // IEventSource is an interface

      .. code-tab:: typescript

         import { IEventSource } from '@aws-cdk/aws-lambda';



   An abstract class which represents an AWS Lambda event source.




   .. py:method:: bind(target)

      Called by `lambda.addEventSource` to allow the event source to bind to this function.


      :param target: That lambda function to bind to.
      :type target: :py:class:`~@aws-cdk/aws-lambda.FunctionRef`\ 
      :abstract: Yes


InlineCode
^^^^^^^^^^

.. py:class:: InlineCode(code)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.InlineCode;

      .. code-tab:: javascript

         const { InlineCode } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { InlineCode } from '@aws-cdk/aws-lambda';



   Lambda code from an inline string (limited to 4KiB).


   :extends: :py:class:`~@aws-cdk/aws-lambda.Code`\ 
   :param code: 
   :type code: string

   .. py:method:: bind(lambda)

      *Overrides* :py:meth:`@aws-cdk/aws-lambda.Code.bind`

      Called when the lambda is initialized to allow this object to bind to the stack, add resources and have fun.


      :param lambda: 
      :type lambda: :py:class:`~@aws-cdk/aws-lambda.Function`\ 


   .. py:method:: toJSON() -> @aws-cdk/aws-lambda.cloudformation.FunctionResource.CodeProperty

      *Implements* :py:meth:`@aws-cdk/aws-lambda.Code.toJSON`

      Called during stack synthesis to render the CodePropery for the Lambda function.


      :rtype: :py:class:`~@aws-cdk/aws-lambda.cloudformation.FunctionResource.CodeProperty`\ 


   .. py:attribute:: code

      :type: string


LambdaRuntimeProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: LambdaRuntimeProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.LambdaRuntimeProps;

      .. code-tab:: javascript

         // LambdaRuntimeProps is an interface

      .. code-tab:: typescript

         import { LambdaRuntimeProps } from '@aws-cdk/aws-lambda';





   .. py:attribute:: supportsInlineCode

      Whether the ``ZipFile`` (aka inline code) property can be used with this runtime.


      :type: boolean or ``undefined`` *(abstract)*


Permission (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: Permission

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.Permission;

      .. code-tab:: javascript

         // Permission is an interface

      .. code-tab:: typescript

         import { Permission } from '@aws-cdk/aws-lambda';



   Represents a permission statement that can be added to a Lambda's resource policy via the `addToResourcePolicy` method.




   .. py:attribute:: principal

      The entity for which you are granting permission to invoke the Lambda function. This entity can be any valid AWS service principal, such as s3.amazonaws.com or sns.amazonaws.com, or, if you are granting cross-account permission, an AWS account ID. For example, you might want to allow a custom application in another AWS account to push events to Lambda by invoking your function.  The principal can be either an AccountPrincipal or a ServicePrincipal.


      :type: :py:class:`@aws-cdk/aws-iam.PolicyPrincipal`\  *(abstract)*


   .. py:attribute:: action

      The Lambda actions that you want to allow in this statement. For example, you can specify lambda:CreateFunction to specify a certain action, or use a wildcard (``lambda:*``) to grant permission to all Lambda actions. For a list of actions, see Actions and Condition Context Keys for AWS Lambda in the IAM User Guide.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: eventSourceToken

      A unique token that must be supplied by the principal invoking the function.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: sourceAccount

      The AWS account ID (without hyphens) of the source owner. For example, if you specify an S3 bucket in the SourceArn property, this value is the bucket owner's account ID. You can use this property to ensure that all source principals are owned by a specific account.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: sourceArn

      The ARN of a resource that is invoking your function. When granting Amazon Simple Storage Service (Amazon S3) permission to invoke your function, specify this property with the bucket ARN as its value. This ensures that events generated only from the specified bucket, not just any bucket from any AWS account that creates a mapping to your function, can invoke the function.


      :type: string or ``undefined`` *(abstract)*


PipelineInvokeAction
^^^^^^^^^^^^^^^^^^^^

.. py:class:: PipelineInvokeAction(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.PipelineInvokeAction;

      .. code-tab:: javascript

         const { PipelineInvokeAction } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { PipelineInvokeAction } from '@aws-cdk/aws-lambda';



   CodePipeline invoke Action that is provided by an AWS Lambda function.


   :extends: :py:class:`@aws-cdk/aws-codepipeline-api.Action`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-lambda.PipelineInvokeActionProps`\ 

   .. py:method:: addInputArtifact([artifact]) -> @aws-cdk/aws-codepipeline-api.Action

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addInputArtifact>`

      *Protected method*

      :param artifact: 
      :type artifact: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Action`\ 


   .. py:method:: addOutputArtifact([name]) -> @aws-cdk/aws-codepipeline-api.Artifact

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addOutputArtifact>`

      *Protected method*

      :param name: 
      :type name: string or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 


   .. py:method:: onStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.onStateChange>`

      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :rtype: string[]


   .. py:attribute:: category

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.category>`

      The category of the action. The category defines which action type the owner (the entity that performs the action) performs.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ActionCategory`\  *(readonly)*


   .. py:attribute:: owner

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.owner>`

      :type: string *(readonly)*


   .. py:attribute:: provider

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.provider>`

      The service provider that the action calls.


      :type: string *(readonly)*


   .. py:attribute:: runOrder

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.runOrder>`

      The order in which AWS CodePipeline runs this action. For more information, see the AWS CodePipeline User Guide.  https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: number *(readonly)*


   .. py:attribute:: version

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.version>`

      :type: string *(readonly)*


   .. py:attribute:: configuration

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.configuration>`

      The action's configuration. These are key-value pairs that specify input values for an action. For more information, see the AWS CodePipeline User Guide.  http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: any or ``undefined`` *(readonly)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


PipelineInvokeActionProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: PipelineInvokeActionProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.PipelineInvokeActionProps;

      .. code-tab:: javascript

         // PipelineInvokeActionProps is an interface

      .. code-tab:: typescript

         import { PipelineInvokeActionProps } from '@aws-cdk/aws-lambda';



   Construction properties of the {@link PipelineInvokeAction Lambda invoke CodePipeline Action}.


   :extends: :py:class:`~@aws-cdk/aws-lambda.CommonPipelineInvokeActionProps`\ 
   :extends: :py:class:`@aws-cdk/aws-codepipeline-api.CommonActionConstructProps`\ 


   .. py:attribute:: lambda

      The lambda function to invoke.


      :type: :py:class:`~@aws-cdk/aws-lambda.FunctionRef`\  *(abstract)*


   .. py:attribute:: stage

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.CommonActionConstructProps <@aws-cdk/aws-codepipeline-api.CommonActionConstructProps.stage>`

      The Pipeline Stage to add this Action to.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\  *(abstract)*


   .. py:attribute:: runOrder

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.CommonActionProps <@aws-cdk/aws-codepipeline-api.CommonActionProps.runOrder>`

      The runOrder property for this Action. RunOrder determines the relative order in which multiple Actions in the same Stage execute.


      :type: number or ``undefined`` *(abstract)*


   .. py:attribute:: addPutJobResultPolicy

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.CommonPipelineInvokeActionProps <@aws-cdk/aws-lambda.CommonPipelineInvokeActionProps.addPutJobResultPolicy>`

      Adds the "codepipeline:PutJobSuccessResult" and "codepipeline:PutJobFailureResult" for '*' resource to the Lambda execution role policy.  NOTE: the reason we can't add the specific pipeline ARN as a resource is to avoid a cyclic dependency between the pipeline and the Lambda function (the pipeline references) the Lambda and the Lambda needs permissions on the pipeline.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: userParameters

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.CommonPipelineInvokeActionProps <@aws-cdk/aws-lambda.CommonPipelineInvokeActionProps.userParameters>`

      String to be used in the event data parameter passed to the Lambda function  See an example JSON event in the CodePipeline documentation.  https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-invoke-lambda-function.html#actions-invoke-lambda-function-json-event-example


      :type: any or ``undefined`` *(abstract)*


Runtime
^^^^^^^

.. py:class:: Runtime(name, [family, [props]])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.Runtime;

      .. code-tab:: javascript

         const { Runtime } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { Runtime } from '@aws-cdk/aws-lambda';



   Lambda function runtime environment.  If you need to use a runtime name that doesn't exist as a static member, you can instantiate a `Runtime` object, e.g: `new Runtime('nodejs99.99')`.


   :param name: 
   :type name: string
   :param family: 
   :type family: :py:class:`~@aws-cdk/aws-lambda.RuntimeFamily`\  or ``undefined``
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-lambda.LambdaRuntimeProps`\  or ``undefined``

   .. py:method:: toString() -> string

      :rtype: string


   .. py:attribute:: DotNetCore1

      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)* *(static)*


   .. py:attribute:: DotNetCore2

      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)* *(static)*


   .. py:attribute:: DotNetCore21

      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)* *(static)*


   .. py:attribute:: Go1x

      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)* *(static)*


   .. py:attribute:: Java8

      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)* *(static)*


   .. py:attribute:: NodeJS

      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)* *(static)*


   .. py:attribute:: NodeJS43

      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)* *(static)*


   .. py:attribute:: NodeJS610

      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)* *(static)*


   .. py:attribute:: NodeJS810

      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)* *(static)*


   .. py:attribute:: Python27

      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)* *(static)*


   .. py:attribute:: Python36

      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(readonly)* *(static)*


   .. py:attribute:: name

      The name of this runtime, as expected by the Lambda resource.


      :type: string *(readonly)*


   .. py:attribute:: supportsInlineCode

      Whether the ``ZipFile`` (aka inline code) property can be used with this runtime.


      :type: boolean *(readonly)*


   .. py:attribute:: family

      The runtime family.


      :type: :py:class:`~@aws-cdk/aws-lambda.RuntimeFamily`\  or ``undefined`` *(readonly)*


RuntimeFamily (enum)
^^^^^^^^^^^^^^^^^^^^

.. py:class:: RuntimeFamily

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.RuntimeFamily;

      .. code-tab:: javascript

         const { RuntimeFamily } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { RuntimeFamily } from '@aws-cdk/aws-lambda';



   .. py:data:: NodeJS

   .. py:data:: Java

   .. py:data:: Python

   .. py:data:: DotNetCore

   .. py:data:: Go


S3Code
^^^^^^

.. py:class:: S3Code(bucket, key, [objectVersion])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.S3Code;

      .. code-tab:: javascript

         const { S3Code } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { S3Code } from '@aws-cdk/aws-lambda';



   Lambda code from an S3 archive.


   :extends: :py:class:`~@aws-cdk/aws-lambda.Code`\ 
   :param bucket: 
   :type bucket: :py:class:`@aws-cdk/aws-s3.BucketRef`\ 
   :param key: 
   :type key: string
   :param objectVersion: 
   :type objectVersion: string or ``undefined``

   .. py:method:: toJSON() -> @aws-cdk/aws-lambda.cloudformation.FunctionResource.CodeProperty

      *Implements* :py:meth:`@aws-cdk/aws-lambda.Code.toJSON`

      Called during stack synthesis to render the CodePropery for the Lambda function.


      :rtype: :py:class:`~@aws-cdk/aws-lambda.cloudformation.FunctionResource.CodeProperty`\ 


   .. py:attribute:: key

      :type: string


   .. py:attribute:: objectVersion

      :type: string or ``undefined``


   .. py:method:: bind(_lambda)

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.Code <@aws-cdk/aws-lambda.Code.bind>`

      Called when the lambda is initialized to allow this object to bind to the stack, add resources and have fun.


      :param _lambda: 
      :type _lambda: :py:class:`~@aws-cdk/aws-lambda.Function`\ 


SingletonFunction
^^^^^^^^^^^^^^^^^

.. py:class:: SingletonFunction(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.SingletonFunction;

      .. code-tab:: javascript

         const { SingletonFunction } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { SingletonFunction } from '@aws-cdk/aws-lambda';



   A Lambda that will only ever be added to a stack once.  The lambda is identified using the value of 'uuid'. Run 'uuidgen' for every SingletonLambda you create.


   :extends: :py:class:`~@aws-cdk/aws-lambda.FunctionRef`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-lambda.SingletonFunctionProps`\ 

   .. py:method:: addPermission(name, permission)

      *Overrides* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.addPermission`

      Adds a permission to the Lambda resource policy.


      :param name: 
      :type name: string
      :param permission: 
      :type permission: :py:class:`~@aws-cdk/aws-lambda.Permission`\ 


   .. py:attribute:: canCreatePermissions

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.canCreatePermissions`

      Whether the addPermission() call adds any permissions  True for new Lambdas, false for imported Lambdas (they might live in different accounts).


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: functionArn

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.functionArn`

      The ARN fo the function.


      :type: string *(readonly)*


   .. py:attribute:: functionName

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.functionName`

      The name of the function.


      :type: string *(readonly)*


   .. py:attribute:: role

      *Implements* :py:meth:`@aws-cdk/aws-lambda.FunctionRef.role`

      The IAM role associated with this function.


      :type: :py:class:`@aws-cdk/aws-iam.Role`\  or ``undefined`` *(readonly)*


   .. py:method:: addEventSource(source)

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.addEventSource>`

      Adds an event source to this function.  Any type that implements the IEventSource interface can be used here. For example, you can call this with an SQS queue: `lambda.addEventSource(queue)`.


      :param source: The event source
      :type source: :py:class:`~@aws-cdk/aws-lambda.IEventSource`\ 


   .. py:method:: addToPipeline(stage, name, [props]) -> @aws-cdk/aws-lambda.PipelineInvokeAction

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.addToPipeline>`

      Convenience method for creating a new {@link PipelineInvokeAction}, and adding it to the given Stage.


      :param stage: the Pipeline Stage to add the new Action to
      :type stage: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\ 
      :param name: the name of the newly created Action
      :type name: string
      :param props: the properties of the new Action
      :type props: :py:class:`~@aws-cdk/aws-lambda.CommonPipelineInvokeActionProps`\  or ``undefined``
      :return: the newly created {@link PipelineInvokeAction}
      :rtype: :py:class:`~@aws-cdk/aws-lambda.PipelineInvokeAction`\ 


   .. py:method:: addToRolePolicy(statement)

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.addToRolePolicy>`

      :param statement: 
      :type statement: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: asBucketNotificationDestination(bucketArn, bucketId) -> @aws-cdk/aws-s3-notifications.BucketNotificationDestinationProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.asBucketNotificationDestination>`

      Allows this Lambda to be used as a destination for bucket notifications. Use `bucket.onEvent(lambda)` to subscribe.


      :param bucketArn: 
      :type bucketArn: string
      :param bucketId: 
      :type bucketId: string
      :rtype: :py:class:`@aws-cdk/aws-s3-notifications.BucketNotificationDestinationProps`\ 


   .. py:method:: asEventRuleTarget(ruleArn, ruleId) -> @aws-cdk/aws-events.EventRuleTargetProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.asEventRuleTarget>`

      Returns a RuleTarget that can be used to trigger this Lambda as a result from a CloudWatch event.


      :param ruleArn: 
      :type ruleArn: string
      :param ruleId: 
      :type ruleId: string
      :rtype: :py:class:`@aws-cdk/aws-events.EventRuleTargetProps`\ 


   .. py:method:: asStepFunctionsTaskResource(_callingTask) -> @aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.asStepFunctionsTaskResource>`

      Return the properties required for using this object as a Task resource


      :param _callingTask: 
      :type _callingTask: :py:class:`@aws-cdk/aws-stepfunctions.Task`\ 
      :rtype: :py:class:`@aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps`\ 


   .. py:method:: export() -> @aws-cdk/aws-lambda.FunctionRefProps

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.export>`

      Export this Function (without the role)


      :rtype: :py:class:`~@aws-cdk/aws-lambda.FunctionRefProps`\ 


   .. py:method:: grantInvoke([identity])

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.grantInvoke>`

      Grant the given identity permissions to invoke this Lambda


      :param identity: 
      :type identity: :py:class:`@aws-cdk/aws-iam.IPrincipal`\  or ``undefined``


   .. py:method:: logSubscriptionDestination(sourceLogGroup) -> @aws-cdk/aws-logs.LogSubscriptionDestination

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.logSubscriptionDestination>`

      Return the properties required to send subscription events to this destination.  If necessary, the destination can use the properties of the SubscriptionFilter object itself to configure its permissions to allow the subscription to write to it.  The destination may reconfigure its own permissions in response to this function call.


      :param sourceLogGroup: 
      :type sourceLogGroup: :py:class:`@aws-cdk/aws-logs.LogGroupRef`\ 
      :rtype: :py:class:`@aws-cdk/aws-logs.LogSubscriptionDestination`\ 


   .. py:method:: metric(metricName, [props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metric>`

      Return the given named metric for this Lambda


      :param metricName: 
      :type metricName: string
      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricDuration([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricDuration>`

      Metric for the Duration of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricErrors([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricErrors>`

      Metric for the Errors executing this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricInvocations([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricInvocations>`

      Metric for the number of invocations of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricThrottles([props]) -> @aws-cdk/aws-cloudwatch.Metric

      *Inherited from* :py:meth:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.metricThrottles>`

      Metric for the number of throttled invocations of this Lambda


      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:attribute:: connections

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.connections>`

      Access the Connections object  Will fail if not a VPC-enabled Lambda Function


      :type: :py:class:`@aws-cdk/aws-ec2.Connections`\  *(readonly)*


   .. py:attribute:: isBoundToVpc

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionRef <@aws-cdk/aws-lambda.FunctionRef.isBoundToVpc>`

      Whether or not this Lambda function was bound to a VPC  If this is is `false`, trying to access the `connections` object will fail.


      :type: boolean *(readonly)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


SingletonFunctionProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: SingletonFunctionProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.SingletonFunctionProps;

      .. code-tab:: javascript

         // SingletonFunctionProps is an interface

      .. code-tab:: typescript

         import { SingletonFunctionProps } from '@aws-cdk/aws-lambda';



   Properties for a newly created singleton Lambda


   :extends: :py:class:`~@aws-cdk/aws-lambda.FunctionProps`\ 


   .. py:attribute:: uuid

      A unique identifier to identify this lambda  The identifier should be unique across all custom resource providers. We recommend generating a UUID per provider.


      :type: string *(abstract)*


   .. py:attribute:: lambdaPurpose

      A descriptive name for the purpose of this Lambda.  If the Lambda does not have a physical name, this string will be reflected its generated name. The combination of lambdaPurpose and uuid must be unique.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: code

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.code>`

      The source code of your Lambda function. You can point to a file in an Amazon Simple Storage Service (Amazon S3) bucket or specify your source code as inline text.


      :type: :py:class:`~@aws-cdk/aws-lambda.Code`\  *(abstract)*


   .. py:attribute:: handler

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.handler>`

      The name of the function (within your source code) that Lambda calls to start running your code. For more information, see the Handler property in the AWS Lambda Developer Guide.  NOTE: If you specify your source code as inline text by specifying the ZipFile property within the Code property, specify index.function_name as the handler.


      :type: string *(abstract)*


   .. py:attribute:: runtime

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.runtime>`

      The runtime environment for the Lambda function that you are uploading. For valid values, see the Runtime property in the AWS Lambda Developer Guide.


      :type: :py:class:`~@aws-cdk/aws-lambda.Runtime`\  *(abstract)*


   .. py:attribute:: allowAllOutbound

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.allowAllOutbound>`

      Whether to allow the Lambda to send all network traffic  If set to false, you must individually add traffic rules to allow the Lambda to connect to network targets.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: deadLetterQueue

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.deadLetterQueue>`

      The SQS queue to use if DLQ is enabled.


      :type: :py:class:`@aws-cdk/aws-sqs.QueueRef`\  or ``undefined`` *(abstract)*


   .. py:attribute:: deadLetterQueueEnabled

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.deadLetterQueueEnabled>`

      Enabled DLQ. If `deadLetterQueue` is undefined, an SQS queue with default options will be defined for your Function.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: description

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.description>`

      A description of the function.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: environment

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.environment>`

      Key-value pairs that Lambda caches and makes available for your Lambda functions. Use environment variables to apply configuration changes, such as test and production environment configurations, without changing your Lambda function source code.


      :type: string => (any or ``undefined``) or ``undefined`` *(abstract)*


   .. py:attribute:: functionName

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.functionName>`

      A name for the function. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the function's name. For more information, see Name Type.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: initialPolicy

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.initialPolicy>`

      Initial policy statements to add to the created Lambda Role.  You can call `addToRolePolicy` to the created lambda to add statements post creation.


      :type: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ [] or ``undefined`` *(abstract)*


   .. py:attribute:: memorySize

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.memorySize>`

      The amount of memory, in MB, that is allocated to your Lambda function. Lambda uses this value to proportionally allocate the amount of CPU power. For more information, see Resource Model in the AWS Lambda Developer Guide.


      :type: number or ``undefined`` *(abstract)*


   .. py:attribute:: role

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.role>`

      Lambda execution role.  This is the role that will be assumed by the function upon execution. It controls the permissions that the function will have. The Role must be assumable by the 'lambda.amazonaws.com' service principal.


      :type: :py:class:`@aws-cdk/aws-iam.Role`\  or ``undefined`` *(abstract)*


   .. py:attribute:: securityGroup

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.securityGroup>`

      What security group to associate with the Lambda's network interfaces.  Only used if 'vpc' is supplied.


      :type: :py:class:`@aws-cdk/aws-ec2.SecurityGroupRef`\  or ``undefined`` *(abstract)*


   .. py:attribute:: timeout

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.timeout>`

      The function execution time (in seconds) after which Lambda terminates the function. Because the execution time affects cost, set this value based on the function's expected execution time.


      :type: number or ``undefined`` *(abstract)*


   .. py:attribute:: tracing

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.tracing>`

      Enable AWS X-Ray Tracing for Lambda Function.


      :type: :py:class:`~@aws-cdk/aws-lambda.Tracing`\  or ``undefined`` *(abstract)*


   .. py:attribute:: vpc

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.vpc>`

      VPC network to place Lambda network interfaces  Specify this if the Lambda function needs to access resources in a VPC.


      :type: :py:class:`@aws-cdk/aws-ec2.VpcNetworkRef`\  or ``undefined`` *(abstract)*


   .. py:attribute:: vpcPlacement

      *Inherited from* :py:attr:`@aws-cdk/aws-lambda.FunctionProps <@aws-cdk/aws-lambda.FunctionProps.vpcPlacement>`

      Where to place the network interfaces within the VPC.  Only used if 'vpc' is supplied. Note: internet access for Lambdas requires a NAT gateway, so picking Public subnets is not allowed.


      :type: :py:class:`@aws-cdk/aws-ec2.VpcPlacementStrategy`\  or ``undefined`` *(abstract)*


StartingPosition (enum)
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: StartingPosition

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.StartingPosition;

      .. code-tab:: javascript

         const { StartingPosition } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { StartingPosition } from '@aws-cdk/aws-lambda';



   The position in the DynamoDB or Kinesis stream where AWS Lambda should start reading.


   .. py:data:: TrimHorizon

   Start reading at the last untrimmed record in the shard in the system, which is the oldest data record in the shard.


   .. py:data:: Latest

   Start reading just after the most recent record in the shard, so that you always read the most recent data in the shard



Tracing (enum)
^^^^^^^^^^^^^^

.. py:class:: Tracing

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.Tracing;

      .. code-tab:: javascript

         const { Tracing } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { Tracing } from '@aws-cdk/aws-lambda';



   X-Ray Tracing Modes (https://docs.aws.amazon.com/lambda/latest/dg/API_TracingConfig.html)


   .. py:data:: Active

   Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.


   .. py:data:: PassThrough

   Lambda will only trace the request from an upstream service if it contains a tracing header with "sampled=1"


   .. py:data:: Disabled

   Lambda will not trace any request.



VersionWeight (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: VersionWeight

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.VersionWeight;

      .. code-tab:: javascript

         // VersionWeight is an interface

      .. code-tab:: typescript

         import { VersionWeight } from '@aws-cdk/aws-lambda';



   A version/weight pair for routing traffic to Lambda functions




   .. py:attribute:: version

      The version to route traffic to


      :type: :py:class:`~@aws-cdk/aws-lambda.FunctionVersion`\  *(readonly)* *(abstract)*


   .. py:attribute:: weight

      How much weight to assign to this version (0..1)


      :type: number *(readonly)* *(abstract)*



cloudformation
^^^^^^^^^^^^^^
.. py:module:: @aws-cdk/aws-lambda.cloudformation

AliasResource
~~~~~~~~~~~~~

.. py:class:: AliasResource(parent, name, properties)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.cloudformation.AliasResource;

      .. code-tab:: javascript

         const { cloudformation.AliasResource } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { cloudformation.AliasResource } from '@aws-cdk/aws-lambda';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param parent: the ``cdk.Construct`` this ``AliasResource`` is a part of
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: the name of the resource in the ``cdk.Construct`` tree
   :type name: string
   :param properties: the properties of this ``AliasResource``
   :type properties: :py:class:`~@aws-cdk/aws-lambda.cloudformation.AliasResourceProps`\ 

   .. py:method:: renderProperties([properties]) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.Resource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any or ``undefined``
      :rtype: string => (any or ``undefined``)


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.


      :type: string *(readonly)* *(static)*


   .. py:attribute:: aliasArn

      :type: string *(readonly)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-lambda.cloudformation.AliasResourceProps`\  *(readonly)*

   .. py:class:: AliasRoutingConfigurationProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.Lambda;

         .. code-tab:: java

            import software.amazon.awscdk.services.lambda.cloudformation.AliasResource.AliasRoutingConfigurationProperty;

         .. code-tab:: javascript

            // cloudformation.AliasResource.AliasRoutingConfigurationProperty is an interface

         .. code-tab:: typescript

            import { cloudformation.AliasResource.AliasRoutingConfigurationProperty } from '@aws-cdk/aws-lambda';





      .. py:attribute:: additionalVersionWeights

         ``AliasResource.AliasRoutingConfigurationProperty.AdditionalVersionWeights``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-alias-aliasroutingconfiguration.html#cfn-lambda-alias-aliasroutingconfiguration-additionalversionweights


         :type: :py:class:`@aws-cdk/cdk.Token`\  or (:py:class:`@aws-cdk/cdk.Token`\  or :py:class:`~@aws-cdk/aws-lambda.cloudformation.AliasResource.VersionWeightProperty`\ )[] *(abstract)*


   .. py:class:: VersionWeightProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.Lambda;

         .. code-tab:: java

            import software.amazon.awscdk.services.lambda.cloudformation.AliasResource.VersionWeightProperty;

         .. code-tab:: javascript

            // cloudformation.AliasResource.VersionWeightProperty is an interface

         .. code-tab:: typescript

            import { cloudformation.AliasResource.VersionWeightProperty } from '@aws-cdk/aws-lambda';





      .. py:attribute:: functionVersion

         ``AliasResource.VersionWeightProperty.FunctionVersion``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-alias-versionweight.html#cfn-lambda-alias-versionweight-functionversion


         :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


      .. py:attribute:: functionWeight

         ``AliasResource.VersionWeightProperty.FunctionWeight``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-alias-versionweight.html#cfn-lambda-alias-versionweight-functionweight


         :type: number or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*



   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: string *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.


      :param path: The path of the value to delete
      :type path: string


   .. py:method:: addDependency(*other)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependency>`

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`@aws-cdk/cdk.IDependable`\ 


   .. py:method:: addOverride(path, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addOverride>`

      Adds an override to the synthesized CloudFormation resource. To add a property override, either use `addPropertyOverride` or prefix `path` with "Properties." (i.e. `Properties.TopicName`).


      :param path: The path of the property, you can use dot notation to override values in complex types. Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value. Could be primitive or complex.
      :type value: any or ``undefined``


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.


      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyOverride>`

      Adds an override to a resource property.  Syntactic sugar for `addOverride("Properties.<...>", value)`.


      :param propertyPath: The path of the property
      :type propertyPath: string
      :param value: The value
      :type value: any or ``undefined``


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CloudFormationToken

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties.  This object is rendered via a call to "renderProperties(this.properties)".


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.untypedPropertyOverrides>`

      AWS resource property overrides.  During synthesis, the method "renderProperties(this.overrides)" is called with this object, and merged on top of the output of "renderProperties(this.properties)".  Derived classes should expose a strongly-typed version of this object as a public property called `propertyOverrides`.


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: dependencyElements

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.dependencyElements>`

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`@aws-cdk/cdk.IDependable`\ [] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of


      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Stack`\ 


AliasResourceProps (interface)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:class:: AliasResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.cloudformation.AliasResourceProps;

      .. code-tab:: javascript

         // cloudformation.AliasResourceProps is an interface

      .. code-tab:: typescript

         import { cloudformation.AliasResourceProps } from '@aws-cdk/aws-lambda';





   .. py:attribute:: functionName

      ``AWS::Lambda::Alias.FunctionName``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-alias.html#cfn-lambda-alias-functionname


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: functionVersion

      ``AWS::Lambda::Alias.FunctionVersion``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-alias.html#cfn-lambda-alias-functionversion


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: name

      ``AWS::Lambda::Alias.Name``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-alias.html#cfn-lambda-alias-name


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: description

      ``AWS::Lambda::Alias.Description``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-alias.html#cfn-lambda-alias-description


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: routingConfig

      ``AWS::Lambda::Alias.RoutingConfig``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-alias.html#cfn-lambda-alias-routingconfig


      :type: :py:class:`@aws-cdk/cdk.Token`\  or :py:class:`~@aws-cdk/aws-lambda.cloudformation.AliasResource.AliasRoutingConfigurationProperty`\  or ``undefined`` *(abstract)*


EventSourceMappingResource
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:class:: EventSourceMappingResource(parent, name, properties)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.cloudformation.EventSourceMappingResource;

      .. code-tab:: javascript

         const { cloudformation.EventSourceMappingResource } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { cloudformation.EventSourceMappingResource } from '@aws-cdk/aws-lambda';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param parent: the ``cdk.Construct`` this ``EventSourceMappingResource`` is a part of
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: the name of the resource in the ``cdk.Construct`` tree
   :type name: string
   :param properties: the properties of this ``EventSourceMappingResource``
   :type properties: :py:class:`~@aws-cdk/aws-lambda.cloudformation.EventSourceMappingResourceProps`\ 

   .. py:method:: renderProperties([properties]) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.Resource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any or ``undefined``
      :rtype: string => (any or ``undefined``)


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.


      :type: string *(readonly)* *(static)*


   .. py:attribute:: eventSourceMappingName

      :type: string *(readonly)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-lambda.cloudformation.EventSourceMappingResourceProps`\  *(readonly)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: string *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.


      :param path: The path of the value to delete
      :type path: string


   .. py:method:: addDependency(*other)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependency>`

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`@aws-cdk/cdk.IDependable`\ 


   .. py:method:: addOverride(path, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addOverride>`

      Adds an override to the synthesized CloudFormation resource. To add a property override, either use `addPropertyOverride` or prefix `path` with "Properties." (i.e. `Properties.TopicName`).


      :param path: The path of the property, you can use dot notation to override values in complex types. Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value. Could be primitive or complex.
      :type value: any or ``undefined``


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.


      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyOverride>`

      Adds an override to a resource property.  Syntactic sugar for `addOverride("Properties.<...>", value)`.


      :param propertyPath: The path of the property
      :type propertyPath: string
      :param value: The value
      :type value: any or ``undefined``


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CloudFormationToken

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties.  This object is rendered via a call to "renderProperties(this.properties)".


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.untypedPropertyOverrides>`

      AWS resource property overrides.  During synthesis, the method "renderProperties(this.overrides)" is called with this object, and merged on top of the output of "renderProperties(this.properties)".  Derived classes should expose a strongly-typed version of this object as a public property called `propertyOverrides`.


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: dependencyElements

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.dependencyElements>`

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`@aws-cdk/cdk.IDependable`\ [] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of


      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Stack`\ 


EventSourceMappingResourceProps (interface)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:class:: EventSourceMappingResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.cloudformation.EventSourceMappingResourceProps;

      .. code-tab:: javascript

         // cloudformation.EventSourceMappingResourceProps is an interface

      .. code-tab:: typescript

         import { cloudformation.EventSourceMappingResourceProps } from '@aws-cdk/aws-lambda';





   .. py:attribute:: eventSourceArn

      ``AWS::Lambda::EventSourceMapping.EventSourceArn``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventsourcemapping.html#cfn-lambda-eventsourcemapping-eventsourcearn


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: functionName

      ``AWS::Lambda::EventSourceMapping.FunctionName``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventsourcemapping.html#cfn-lambda-eventsourcemapping-functionname


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: batchSize

      ``AWS::Lambda::EventSourceMapping.BatchSize``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventsourcemapping.html#cfn-lambda-eventsourcemapping-batchsize


      :type: number or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: enabled

      ``AWS::Lambda::EventSourceMapping.Enabled``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventsourcemapping.html#cfn-lambda-eventsourcemapping-enabled


      :type: boolean or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: startingPosition

      ``AWS::Lambda::EventSourceMapping.StartingPosition``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventsourcemapping.html#cfn-lambda-eventsourcemapping-startingposition


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


FunctionResource
~~~~~~~~~~~~~~~~

.. py:class:: FunctionResource(parent, name, properties)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.cloudformation.FunctionResource;

      .. code-tab:: javascript

         const { cloudformation.FunctionResource } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { cloudformation.FunctionResource } from '@aws-cdk/aws-lambda';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param parent: the ``cdk.Construct`` this ``FunctionResource`` is a part of
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: the name of the resource in the ``cdk.Construct`` tree
   :type name: string
   :param properties: the properties of this ``FunctionResource``
   :type properties: :py:class:`~@aws-cdk/aws-lambda.cloudformation.FunctionResourceProps`\ 

   .. py:method:: renderProperties([properties]) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.Resource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any or ``undefined``
      :rtype: string => (any or ``undefined``)


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.


      :type: string *(readonly)* *(static)*


   .. py:attribute:: functionArn

      :type: string *(readonly)*


   .. py:attribute:: functionName

      :type: string *(readonly)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-lambda.cloudformation.FunctionResourceProps`\  *(readonly)*

   .. py:class:: CodeProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.Lambda;

         .. code-tab:: java

            import software.amazon.awscdk.services.lambda.cloudformation.FunctionResource.CodeProperty;

         .. code-tab:: javascript

            // cloudformation.FunctionResource.CodeProperty is an interface

         .. code-tab:: typescript

            import { cloudformation.FunctionResource.CodeProperty } from '@aws-cdk/aws-lambda';





      .. py:attribute:: s3Bucket

         ``FunctionResource.CodeProperty.S3Bucket``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-s3bucket


         :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


      .. py:attribute:: s3Key

         ``FunctionResource.CodeProperty.S3Key``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-s3key


         :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


      .. py:attribute:: s3ObjectVersion

         ``FunctionResource.CodeProperty.S3ObjectVersion``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-s3objectversion


         :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


      .. py:attribute:: zipFile

         ``FunctionResource.CodeProperty.ZipFile``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-zipfile


         :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:class:: DeadLetterConfigProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.Lambda;

         .. code-tab:: java

            import software.amazon.awscdk.services.lambda.cloudformation.FunctionResource.DeadLetterConfigProperty;

         .. code-tab:: javascript

            // cloudformation.FunctionResource.DeadLetterConfigProperty is an interface

         .. code-tab:: typescript

            import { cloudformation.FunctionResource.DeadLetterConfigProperty } from '@aws-cdk/aws-lambda';





      .. py:attribute:: targetArn

         ``FunctionResource.DeadLetterConfigProperty.TargetArn``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-deadletterconfig.html#cfn-lambda-function-deadletterconfig-targetarn


         :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:class:: EnvironmentProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.Lambda;

         .. code-tab:: java

            import software.amazon.awscdk.services.lambda.cloudformation.FunctionResource.EnvironmentProperty;

         .. code-tab:: javascript

            // cloudformation.FunctionResource.EnvironmentProperty is an interface

         .. code-tab:: typescript

            import { cloudformation.FunctionResource.EnvironmentProperty } from '@aws-cdk/aws-lambda';





      .. py:attribute:: variables

         ``FunctionResource.EnvironmentProperty.Variables``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-environment.html#cfn-lambda-function-environment-variables


         :type: :py:class:`@aws-cdk/cdk.Token`\  or string => (string or :py:class:`@aws-cdk/cdk.Token`\ ) or ``undefined`` *(abstract)*


   .. py:class:: TracingConfigProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.Lambda;

         .. code-tab:: java

            import software.amazon.awscdk.services.lambda.cloudformation.FunctionResource.TracingConfigProperty;

         .. code-tab:: javascript

            // cloudformation.FunctionResource.TracingConfigProperty is an interface

         .. code-tab:: typescript

            import { cloudformation.FunctionResource.TracingConfigProperty } from '@aws-cdk/aws-lambda';





      .. py:attribute:: mode

         ``FunctionResource.TracingConfigProperty.Mode``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-tracingconfig.html#cfn-lambda-function-tracingconfig-mode


         :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:class:: VpcConfigProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.Lambda;

         .. code-tab:: java

            import software.amazon.awscdk.services.lambda.cloudformation.FunctionResource.VpcConfigProperty;

         .. code-tab:: javascript

            // cloudformation.FunctionResource.VpcConfigProperty is an interface

         .. code-tab:: typescript

            import { cloudformation.FunctionResource.VpcConfigProperty } from '@aws-cdk/aws-lambda';





      .. py:attribute:: securityGroupIds

         ``FunctionResource.VpcConfigProperty.SecurityGroupIds``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-vpcconfig.html#cfn-lambda-function-vpcconfig-securitygroupids


         :type: :py:class:`@aws-cdk/cdk.Token`\  or (string or :py:class:`@aws-cdk/cdk.Token`\ )[] *(abstract)*


      .. py:attribute:: subnetIds

         ``FunctionResource.VpcConfigProperty.SubnetIds``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-vpcconfig.html#cfn-lambda-function-vpcconfig-subnetids


         :type: :py:class:`@aws-cdk/cdk.Token`\  or (string or :py:class:`@aws-cdk/cdk.Token`\ )[] *(abstract)*



   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: string *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.


      :param path: The path of the value to delete
      :type path: string


   .. py:method:: addDependency(*other)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependency>`

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`@aws-cdk/cdk.IDependable`\ 


   .. py:method:: addOverride(path, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addOverride>`

      Adds an override to the synthesized CloudFormation resource. To add a property override, either use `addPropertyOverride` or prefix `path` with "Properties." (i.e. `Properties.TopicName`).


      :param path: The path of the property, you can use dot notation to override values in complex types. Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value. Could be primitive or complex.
      :type value: any or ``undefined``


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.


      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyOverride>`

      Adds an override to a resource property.  Syntactic sugar for `addOverride("Properties.<...>", value)`.


      :param propertyPath: The path of the property
      :type propertyPath: string
      :param value: The value
      :type value: any or ``undefined``


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CloudFormationToken

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties.  This object is rendered via a call to "renderProperties(this.properties)".


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.untypedPropertyOverrides>`

      AWS resource property overrides.  During synthesis, the method "renderProperties(this.overrides)" is called with this object, and merged on top of the output of "renderProperties(this.properties)".  Derived classes should expose a strongly-typed version of this object as a public property called `propertyOverrides`.


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: dependencyElements

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.dependencyElements>`

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`@aws-cdk/cdk.IDependable`\ [] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of


      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Stack`\ 


FunctionResourceProps (interface)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:class:: FunctionResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.cloudformation.FunctionResourceProps;

      .. code-tab:: javascript

         // cloudformation.FunctionResourceProps is an interface

      .. code-tab:: typescript

         import { cloudformation.FunctionResourceProps } from '@aws-cdk/aws-lambda';





   .. py:attribute:: code

      ``AWS::Lambda::Function.Code``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-code


      :type: :py:class:`~@aws-cdk/aws-lambda.cloudformation.FunctionResource.CodeProperty`\  or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: handler

      ``AWS::Lambda::Function.Handler``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-handler


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: role

      ``AWS::Lambda::Function.Role``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-role


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: runtime

      ``AWS::Lambda::Function.Runtime``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-runtime


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: deadLetterConfig

      ``AWS::Lambda::Function.DeadLetterConfig``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-deadletterconfig


      :type: :py:class:`@aws-cdk/cdk.Token`\  or :py:class:`~@aws-cdk/aws-lambda.cloudformation.FunctionResource.DeadLetterConfigProperty`\  or ``undefined`` *(abstract)*


   .. py:attribute:: description

      ``AWS::Lambda::Function.Description``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-description


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: environment

      ``AWS::Lambda::Function.Environment``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-environment


      :type: :py:class:`@aws-cdk/cdk.Token`\  or :py:class:`~@aws-cdk/aws-lambda.cloudformation.FunctionResource.EnvironmentProperty`\  or ``undefined`` *(abstract)*


   .. py:attribute:: functionName

      ``AWS::Lambda::Function.FunctionName``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-functionname


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: kmsKeyArn

      ``AWS::Lambda::Function.KmsKeyArn``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-kmskeyarn


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: memorySize

      ``AWS::Lambda::Function.MemorySize``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-memorysize


      :type: number or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: reservedConcurrentExecutions

      ``AWS::Lambda::Function.ReservedConcurrentExecutions``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-reservedconcurrentexecutions


      :type: number or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: tags

      ``AWS::Lambda::Function.Tags``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-tags


      :type: :py:class:`@aws-cdk/cdk.Token`\  or (:py:class:`@aws-cdk/cdk.Token`\  or :py:class:`@aws-cdk/cdk.Tag`\ )[] or ``undefined`` *(abstract)*


   .. py:attribute:: timeout

      ``AWS::Lambda::Function.Timeout``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-timeout


      :type: number or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: tracingConfig

      ``AWS::Lambda::Function.TracingConfig``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-tracingconfig


      :type: :py:class:`@aws-cdk/cdk.Token`\  or :py:class:`~@aws-cdk/aws-lambda.cloudformation.FunctionResource.TracingConfigProperty`\  or ``undefined`` *(abstract)*


   .. py:attribute:: vpcConfig

      ``AWS::Lambda::Function.VpcConfig``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-vpcconfig


      :type: :py:class:`@aws-cdk/cdk.Token`\  or :py:class:`~@aws-cdk/aws-lambda.cloudformation.FunctionResource.VpcConfigProperty`\  or ``undefined`` *(abstract)*


PermissionResource
~~~~~~~~~~~~~~~~~~

.. py:class:: PermissionResource(parent, name, properties)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.cloudformation.PermissionResource;

      .. code-tab:: javascript

         const { cloudformation.PermissionResource } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { cloudformation.PermissionResource } from '@aws-cdk/aws-lambda';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param parent: the ``cdk.Construct`` this ``PermissionResource`` is a part of
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: the name of the resource in the ``cdk.Construct`` tree
   :type name: string
   :param properties: the properties of this ``PermissionResource``
   :type properties: :py:class:`~@aws-cdk/aws-lambda.cloudformation.PermissionResourceProps`\ 

   .. py:method:: renderProperties([properties]) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.Resource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any or ``undefined``
      :rtype: string => (any or ``undefined``)


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.


      :type: string *(readonly)* *(static)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-lambda.cloudformation.PermissionResourceProps`\  *(readonly)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: string *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.


      :param path: The path of the value to delete
      :type path: string


   .. py:method:: addDependency(*other)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependency>`

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`@aws-cdk/cdk.IDependable`\ 


   .. py:method:: addOverride(path, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addOverride>`

      Adds an override to the synthesized CloudFormation resource. To add a property override, either use `addPropertyOverride` or prefix `path` with "Properties." (i.e. `Properties.TopicName`).


      :param path: The path of the property, you can use dot notation to override values in complex types. Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value. Could be primitive or complex.
      :type value: any or ``undefined``


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.


      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyOverride>`

      Adds an override to a resource property.  Syntactic sugar for `addOverride("Properties.<...>", value)`.


      :param propertyPath: The path of the property
      :type propertyPath: string
      :param value: The value
      :type value: any or ``undefined``


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CloudFormationToken

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties.  This object is rendered via a call to "renderProperties(this.properties)".


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.untypedPropertyOverrides>`

      AWS resource property overrides.  During synthesis, the method "renderProperties(this.overrides)" is called with this object, and merged on top of the output of "renderProperties(this.properties)".  Derived classes should expose a strongly-typed version of this object as a public property called `propertyOverrides`.


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: dependencyElements

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.dependencyElements>`

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`@aws-cdk/cdk.IDependable`\ [] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of


      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Stack`\ 


PermissionResourceProps (interface)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:class:: PermissionResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.cloudformation.PermissionResourceProps;

      .. code-tab:: javascript

         // cloudformation.PermissionResourceProps is an interface

      .. code-tab:: typescript

         import { cloudformation.PermissionResourceProps } from '@aws-cdk/aws-lambda';





   .. py:attribute:: action

      ``AWS::Lambda::Permission.Action``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html#cfn-lambda-permission-action


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: functionName

      ``AWS::Lambda::Permission.FunctionName``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html#cfn-lambda-permission-functionname


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: principal

      ``AWS::Lambda::Permission.Principal``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html#cfn-lambda-permission-principal


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: eventSourceToken

      ``AWS::Lambda::Permission.EventSourceToken``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html#cfn-lambda-permission-eventsourcetoken


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: sourceAccount

      ``AWS::Lambda::Permission.SourceAccount``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html#cfn-lambda-permission-sourceaccount


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: sourceArn

      ``AWS::Lambda::Permission.SourceArn``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html#cfn-lambda-permission-sourcearn


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


VersionResource
~~~~~~~~~~~~~~~

.. py:class:: VersionResource(parent, name, properties)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.cloudformation.VersionResource;

      .. code-tab:: javascript

         const { cloudformation.VersionResource } = require('@aws-cdk/aws-lambda');

      .. code-tab:: typescript

         import { cloudformation.VersionResource } from '@aws-cdk/aws-lambda';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param parent: the ``cdk.Construct`` this ``VersionResource`` is a part of
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: the name of the resource in the ``cdk.Construct`` tree
   :type name: string
   :param properties: the properties of this ``VersionResource``
   :type properties: :py:class:`~@aws-cdk/aws-lambda.cloudformation.VersionResourceProps`\ 

   .. py:method:: renderProperties([properties]) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.Resource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any or ``undefined``
      :rtype: string => (any or ``undefined``)


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.


      :type: string *(readonly)* *(static)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-lambda.cloudformation.VersionResourceProps`\  *(readonly)*


   .. py:attribute:: version

      :type: string *(readonly)*


   .. py:attribute:: versionArn

      :type: string *(readonly)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: string *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.


      :param path: The path of the value to delete
      :type path: string


   .. py:method:: addDependency(*other)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependency>`

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`@aws-cdk/cdk.IDependable`\ 


   .. py:method:: addOverride(path, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addOverride>`

      Adds an override to the synthesized CloudFormation resource. To add a property override, either use `addPropertyOverride` or prefix `path` with "Properties." (i.e. `Properties.TopicName`).


      :param path: The path of the property, you can use dot notation to override values in complex types. Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value. Could be primitive or complex.
      :type value: any or ``undefined``


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.


      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyOverride>`

      Adds an override to a resource property.  Syntactic sugar for `addOverride("Properties.<...>", value)`.


      :param propertyPath: The path of the property
      :type propertyPath: string
      :param value: The value
      :type value: any or ``undefined``


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CloudFormationToken

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties.  This object is rendered via a call to "renderProperties(this.properties)".


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.untypedPropertyOverrides>`

      AWS resource property overrides.  During synthesis, the method "renderProperties(this.overrides)" is called with this object, and merged on top of the output of "renderProperties(this.properties)".  Derived classes should expose a strongly-typed version of this object as a public property called `propertyOverrides`.


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: dependencyElements

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.dependencyElements>`

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`@aws-cdk/cdk.IDependable`\ [] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of


      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Stack`\ 


VersionResourceProps (interface)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:class:: VersionResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.cloudformation.VersionResourceProps;

      .. code-tab:: javascript

         // cloudformation.VersionResourceProps is an interface

      .. code-tab:: typescript

         import { cloudformation.VersionResourceProps } from '@aws-cdk/aws-lambda';





   .. py:attribute:: functionName

      ``AWS::Lambda::Version.FunctionName``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-version.html#cfn-lambda-version-functionname


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  *(abstract)*


   .. py:attribute:: codeSha256

      ``AWS::Lambda::Version.CodeSha256``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-version.html#cfn-lambda-version-codesha256


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*


   .. py:attribute:: description

      ``AWS::Lambda::Version.Description``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-version.html#cfn-lambda-version-description


      :type: string or :py:class:`@aws-cdk/cdk.Token`\  or ``undefined`` *(abstract)*



.. py:currentmodule:: @aws-cdk/aws-lambda

