.. @jsii-pacmak:meta@ {"fingerprint":"VinY4AGTc5AHTepdRmoDkTy2Y1vf+H7gmv4LXmLSdqA="}

@aws-cdk/aws-iam
================

.. mdinclude:: ./__aws-cdk_aws-iam.README.md

Reference
---------

.. tabs::

   .. group-tab:: C#

      View in `Nuget <https://www.nuget.org/packages/Amazon.CDK.AWS.IAM/0.29.0>`_

      **csproj**:

      .. code-block:: xml

         <PackageReference Include="Amazon.CDK.AWS.IAM" Version="0.29.0" />

      **dotnet**:

      .. code-block:: console

         dotnet add package Amazon.CDK.AWS.IAM --version 0.29.0

      **packages.config**:

      .. code-block:: xml

         <package id="Amazon.CDK.AWS.IAM" version="0.29.0" />


   .. group-tab:: Java

      View in `Maven Central <https://repo1.maven.org/maven2/software/amazon/awscdk/iam/0.29.0/>`_

      **Apache Buildr**:

      .. code-block:: none

         'software.amazon.awscdk:iam:jar:0.29.0'

      **Apache Ivy**:

      .. code-block:: xml

         <dependency groupId="software.amazon.awscdk" name="iam" rev="0.29.0"/>

      **Apache Maven**:

      .. code-block:: xml

         <dependency>
           <groupId>software.amazon.awscdk</groupId>
           <artifactId>iam</artifactId>
           <version>0.29.0</version>
         </dependency>

      **Gradle / Grails**:

      .. code-block:: none

         compile 'software.amazon.awscdk:iam:0.29.0'

      **Groovy Grape**:

      .. code-block:: none

         @Grapes(
         @Grab(group='software.amazon.awscdk', module='iam', version='0.29.0')
         )


   .. group-tab:: JavaScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-iam/v/0.29.0>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-iam@0.29.0

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-iam": "^0.29.0"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-iam@0.29.0


   .. group-tab:: TypeScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-iam/v/0.29.0>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-iam@0.29.0

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-iam": "^0.29.0"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-iam@0.29.0



.. py:module:: @aws-cdk/aws-iam

AccountPrincipal
^^^^^^^^^^^^^^^^

.. py:class:: AccountPrincipal(accountId)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.AccountPrincipal;

      .. code-tab:: javascript

         const { AccountPrincipal } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { AccountPrincipal } from '@aws-cdk/aws-iam';



   :extends: :py:class:`~@aws-cdk/aws-iam.ArnPrincipal`\ 
   :param accountId: 
   :type accountId: any

   .. py:method:: toString() -> string

      *Overrides* :py:meth:`@aws-cdk/aws-iam.ArnPrincipal.toString`

      Returns a string representation of an object.



      :rtype: string


   .. py:attribute:: accountId

      :type: any *(readonly)*


   .. py:attribute:: arn

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.ArnPrincipal <@aws-cdk/aws-iam.ArnPrincipal.arn>`

      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.ArnPrincipal <@aws-cdk/aws-iam.ArnPrincipal.policyFragment>`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:method:: addToPolicy(_statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.addToPolicy>`

      Add to the policy of this principal.



      :param _statement: 
      :type _statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: toJSON() -> string => string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.toJSON>`

      :rtype: string => string[]


   .. py:attribute:: assumeRoleAction

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.assumeRoleAction>`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


AccountRootPrincipal
^^^^^^^^^^^^^^^^^^^^

.. py:class:: AccountRootPrincipal()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.AccountRootPrincipal;

      .. code-tab:: javascript

         const { AccountRootPrincipal } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { AccountRootPrincipal } from '@aws-cdk/aws-iam';



   :extends: :py:class:`~@aws-cdk/aws-iam.AccountPrincipal`\ 

   .. py:method:: toString() -> string

      *Overrides* :py:meth:`@aws-cdk/aws-iam.AccountPrincipal.toString`

      Returns a string representation of an object.



      :rtype: string


   .. py:attribute:: accountId

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.AccountPrincipal <@aws-cdk/aws-iam.AccountPrincipal.accountId>`

      :type: any *(readonly)*


   .. py:attribute:: arn

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.ArnPrincipal <@aws-cdk/aws-iam.ArnPrincipal.arn>`

      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.ArnPrincipal <@aws-cdk/aws-iam.ArnPrincipal.policyFragment>`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:method:: addToPolicy(_statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.addToPolicy>`

      Add to the policy of this principal.



      :param _statement: 
      :type _statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: toJSON() -> string => string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.toJSON>`

      :rtype: string => string[]


   .. py:attribute:: assumeRoleAction

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.assumeRoleAction>`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


AnyPrincipal
^^^^^^^^^^^^

.. py:class:: AnyPrincipal()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.AnyPrincipal;

      .. code-tab:: javascript

         const { AnyPrincipal } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { AnyPrincipal } from '@aws-cdk/aws-iam';



   A principal representing all identities in all accounts.



   :extends: :py:class:`~@aws-cdk/aws-iam.ArnPrincipal`\ 

   .. py:method:: toString() -> string

      *Overrides* :py:meth:`@aws-cdk/aws-iam.ArnPrincipal.toString`

      Returns a string representation of an object.



      :rtype: string


   .. py:attribute:: arn

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.ArnPrincipal <@aws-cdk/aws-iam.ArnPrincipal.arn>`

      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.ArnPrincipal <@aws-cdk/aws-iam.ArnPrincipal.policyFragment>`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:method:: addToPolicy(_statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.addToPolicy>`

      Add to the policy of this principal.



      :param _statement: 
      :type _statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: toJSON() -> string => string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.toJSON>`

      :rtype: string => string[]


   .. py:attribute:: assumeRoleAction

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.assumeRoleAction>`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


Anyone
^^^^^^

.. py:class:: Anyone()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.Anyone;

      .. code-tab:: javascript

         const { Anyone } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { Anyone } from '@aws-cdk/aws-iam';



   A principal representing all identities in all accounts.



   :extends: :py:class:`~@aws-cdk/aws-iam.AnyPrincipal`\ 

   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.AnyPrincipal <@aws-cdk/aws-iam.AnyPrincipal.toString>`

      Returns a string representation of an object.



      :rtype: string


   .. py:attribute:: arn

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.ArnPrincipal <@aws-cdk/aws-iam.ArnPrincipal.arn>`

      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.ArnPrincipal <@aws-cdk/aws-iam.ArnPrincipal.policyFragment>`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:method:: addToPolicy(_statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.addToPolicy>`

      Add to the policy of this principal.



      :param _statement: 
      :type _statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: toJSON() -> string => string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.toJSON>`

      :rtype: string => string[]


   .. py:attribute:: assumeRoleAction

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.assumeRoleAction>`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


ArnPrincipal
^^^^^^^^^^^^

.. py:class:: ArnPrincipal(arn)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.ArnPrincipal;

      .. code-tab:: javascript

         const { ArnPrincipal } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { ArnPrincipal } from '@aws-cdk/aws-iam';



   :extends: :py:class:`~@aws-cdk/aws-iam.PrincipalBase`\ 
   :param arn: 
   :type arn: string

   .. py:method:: toString() -> string

      *Overrides* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.toString`

      Returns a string representation of an object.



      :rtype: string


   .. py:attribute:: arn

      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.policyFragment`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:method:: addToPolicy(_statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.addToPolicy>`

      Add to the policy of this principal.



      :param _statement: 
      :type _statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: toJSON() -> string => string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.toJSON>`

      :rtype: string => string[]


   .. py:attribute:: assumeRoleAction

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.assumeRoleAction>`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


AwsManagedPolicy
^^^^^^^^^^^^^^^^

.. py:class:: AwsManagedPolicy(managedPolicyName, scope)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.AwsManagedPolicy;

      .. code-tab:: javascript

         const { AwsManagedPolicy } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { AwsManagedPolicy } from '@aws-cdk/aws-iam';



   A policy managed by AWS.

   

   For this managed policy, you only need to know the name to be able to use it.

   

   Some managed policy names start with "service-role/", some start with

   "job-function/", and some don't start with anything. Do include the

   prefix when constructing this object.



   :param managedPolicyName: 
   :type managedPolicyName: string
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.IConstruct`\ 

   .. py:attribute:: managedPolicyName

      :type: string *(readonly)*


   .. py:attribute:: policyArn

      The Arn of this managed policy.



      :type: string *(readonly)*


   .. py:attribute:: scope

      :type: :py:class:`@aws-cdk/cdk.IConstruct`\  *(readonly)*


CanonicalUserPrincipal
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CanonicalUserPrincipal(canonicalUserId)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CanonicalUserPrincipal;

      .. code-tab:: javascript

         const { CanonicalUserPrincipal } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { CanonicalUserPrincipal } from '@aws-cdk/aws-iam';



   A policy prinicipal for canonicalUserIds - useful for S3 bucket policies that use Origin Access identities.

   

   See https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html

   

   and

   

   https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html

   

   for more details.



   :extends: :py:class:`~@aws-cdk/aws-iam.PrincipalBase`\ 
   :param canonicalUserId: 
   :type canonicalUserId: string

   .. py:method:: toString() -> string

      *Overrides* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.toString`

      Returns a string representation of an object.



      :rtype: string


   .. py:attribute:: canonicalUserId

      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.policyFragment`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:method:: addToPolicy(_statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.addToPolicy>`

      Add to the policy of this principal.



      :param _statement: 
      :type _statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: toJSON() -> string => string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.toJSON>`

      :rtype: string => string[]


   .. py:attribute:: assumeRoleAction

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.assumeRoleAction>`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


CfnAccessKey
^^^^^^^^^^^^

.. py:class:: CfnAccessKey(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnAccessKey;

      .. code-tab:: javascript

         const { CfnAccessKey } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { CfnAccessKey } from '@aws-cdk/aws-iam';



   A CloudFormation `AWS::IAM::AccessKey`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html


   :extends: :py:class:`@aws-cdk/cdk.CfnResource`\ 
   :param scope: - scope in which this resource is defined.
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: - scoped id of the resource.
   :type id: string
   :param props: - resource properties.
   :type props: :py:class:`~@aws-cdk/aws-iam.CfnAccessKeyProps`\ 

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.CfnResource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: accessKeyId

      :type: string *(readonly)*


   .. py:attribute:: accessKeySecretAccessKey

      :type: string *(readonly)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-iam.CfnAccessKeyProps`\  *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.prepare>`

      Automatically detect references in this CfnElement.



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.logicalId>`

      The logical ID for this CloudFormation stack element.

      

      The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.stackPath>`

      Return the path with respect to the stack.



      :type: string *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:attribute:: referenceToken

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.referenceToken>`

      Return a token that will CloudFormation { Ref } this stack element.



      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete.
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.CfnResource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addOverride>`

      Adds an override to the synthesized CloudFormation resource.

      

      To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types.. . Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value.. . Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property.
      :type propertyPath: string
      :param value: The value.
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.IResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


CfnAccessKeyProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnAccessKeyProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnAccessKeyProps;

      .. code-tab:: javascript

         // CfnAccessKeyProps is an interface

      .. code-tab:: typescript

         import { CfnAccessKeyProps } from '@aws-cdk/aws-iam';



   Properties for defining a `AWS::IAM::AccessKey`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html




   .. py:attribute:: userName

      `AWS::IAM::AccessKey.UserName`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html#cfn-iam-accesskey-username


      :type: string *(readonly)*


   .. py:attribute:: serial

      `AWS::IAM::AccessKey.Serial`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html#cfn-iam-accesskey-serial


      :type: number or :py:class:`@aws-cdk/cdk.Token`\  *(optional)* *(readonly)*


   .. py:attribute:: status

      `AWS::IAM::AccessKey.Status`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html#cfn-iam-accesskey-status


      :type: string *(optional)* *(readonly)*


CfnGroup
^^^^^^^^

.. py:class:: CfnGroup(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnGroup;

      .. code-tab:: javascript

         const { CfnGroup } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { CfnGroup } from '@aws-cdk/aws-iam';



   A CloudFormation `AWS::IAM::Group`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html


   :extends: :py:class:`@aws-cdk/cdk.CfnResource`\ 
   :param scope: - scope in which this resource is defined.
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: - scoped id of the resource.
   :type id: string
   :param props: - resource properties.
   :type props: :py:class:`~@aws-cdk/aws-iam.CfnGroupProps`\ 

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.CfnResource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: groupArn

      :type: string *(readonly)*


   .. py:attribute:: groupName

      :type: string *(readonly)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-iam.CfnGroupProps`\  *(readonly)*

   .. py:class:: PolicyProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.IAM;

         .. code-tab:: java

            import software.amazon.awscdk.services.iam.CfnGroup.PolicyProperty;

         .. code-tab:: javascript

            // CfnGroup.PolicyProperty is an interface

         .. code-tab:: typescript

            import { CfnGroup.PolicyProperty } from '@aws-cdk/aws-iam';





      .. py:attribute:: policyDocument

         `CfnGroup.PolicyProperty.PolicyDocument`.

         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policydocument


         :type: json or :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


      .. py:attribute:: policyName

         `CfnGroup.PolicyProperty.PolicyName`.

         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policyname


         :type: string *(readonly)*



   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.prepare>`

      Automatically detect references in this CfnElement.



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.logicalId>`

      The logical ID for this CloudFormation stack element.

      

      The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.stackPath>`

      Return the path with respect to the stack.



      :type: string *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:attribute:: referenceToken

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.referenceToken>`

      Return a token that will CloudFormation { Ref } this stack element.



      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete.
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.CfnResource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addOverride>`

      Adds an override to the synthesized CloudFormation resource.

      

      To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types.. . Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value.. . Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property.
      :type propertyPath: string
      :param value: The value.
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.IResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


CfnGroupProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnGroupProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnGroupProps;

      .. code-tab:: javascript

         // CfnGroupProps is an interface

      .. code-tab:: typescript

         import { CfnGroupProps } from '@aws-cdk/aws-iam';



   Properties for defining a `AWS::IAM::Group`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html




   .. py:attribute:: groupName

      `AWS::IAM::Group.GroupName`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html#cfn-iam-group-groupname


      :type: string *(optional)* *(readonly)*


   .. py:attribute:: managedPolicyArns

      `AWS::IAM::Group.ManagedPolicyArns`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html#cfn-iam-group-managepolicyarns


      :type: string[] *(optional)* *(readonly)*


   .. py:attribute:: path

      `AWS::IAM::Group.Path`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html#cfn-iam-group-path


      :type: string *(optional)* *(readonly)*


   .. py:attribute:: policies

      `AWS::IAM::Group.Policies`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html#cfn-iam-group-policies


      :type: :py:class:`@aws-cdk/cdk.Token`\  or (:py:class:`@aws-cdk/cdk.Token`\  or :py:class:`~@aws-cdk/aws-iam.CfnGroup.PolicyProperty`\ )[] *(optional)* *(readonly)*


CfnInstanceProfile
^^^^^^^^^^^^^^^^^^

.. py:class:: CfnInstanceProfile(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnInstanceProfile;

      .. code-tab:: javascript

         const { CfnInstanceProfile } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { CfnInstanceProfile } from '@aws-cdk/aws-iam';



   A CloudFormation `AWS::IAM::InstanceProfile`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html


   :extends: :py:class:`@aws-cdk/cdk.CfnResource`\ 
   :param scope: - scope in which this resource is defined.
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: - scoped id of the resource.
   :type id: string
   :param props: - resource properties.
   :type props: :py:class:`~@aws-cdk/aws-iam.CfnInstanceProfileProps`\ 

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.CfnResource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: instanceProfileArn

      :type: string *(readonly)*


   .. py:attribute:: instanceProfileName

      :type: string *(readonly)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-iam.CfnInstanceProfileProps`\  *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.prepare>`

      Automatically detect references in this CfnElement.



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.logicalId>`

      The logical ID for this CloudFormation stack element.

      

      The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.stackPath>`

      Return the path with respect to the stack.



      :type: string *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:attribute:: referenceToken

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.referenceToken>`

      Return a token that will CloudFormation { Ref } this stack element.



      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete.
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.CfnResource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addOverride>`

      Adds an override to the synthesized CloudFormation resource.

      

      To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types.. . Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value.. . Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property.
      :type propertyPath: string
      :param value: The value.
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.IResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


CfnInstanceProfileProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnInstanceProfileProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnInstanceProfileProps;

      .. code-tab:: javascript

         // CfnInstanceProfileProps is an interface

      .. code-tab:: typescript

         import { CfnInstanceProfileProps } from '@aws-cdk/aws-iam';



   Properties for defining a `AWS::IAM::InstanceProfile`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html




   .. py:attribute:: roles

      `AWS::IAM::InstanceProfile.Roles`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html#cfn-iam-instanceprofile-roles


      :type: string[] *(readonly)*


   .. py:attribute:: instanceProfileName

      `AWS::IAM::InstanceProfile.InstanceProfileName`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html#cfn-iam-instanceprofile-instanceprofilename


      :type: string *(optional)* *(readonly)*


   .. py:attribute:: path

      `AWS::IAM::InstanceProfile.Path`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html#cfn-iam-instanceprofile-path


      :type: string *(optional)* *(readonly)*


CfnManagedPolicy
^^^^^^^^^^^^^^^^

.. py:class:: CfnManagedPolicy(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnManagedPolicy;

      .. code-tab:: javascript

         const { CfnManagedPolicy } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { CfnManagedPolicy } from '@aws-cdk/aws-iam';



   A CloudFormation `AWS::IAM::ManagedPolicy`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html


   :extends: :py:class:`@aws-cdk/cdk.CfnResource`\ 
   :param scope: - scope in which this resource is defined.
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: - scoped id of the resource.
   :type id: string
   :param props: - resource properties.
   :type props: :py:class:`~@aws-cdk/aws-iam.CfnManagedPolicyProps`\ 

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.CfnResource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: managedPolicyArn

      :type: string *(readonly)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-iam.CfnManagedPolicyProps`\  *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.prepare>`

      Automatically detect references in this CfnElement.



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.logicalId>`

      The logical ID for this CloudFormation stack element.

      

      The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.stackPath>`

      Return the path with respect to the stack.



      :type: string *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:attribute:: referenceToken

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.referenceToken>`

      Return a token that will CloudFormation { Ref } this stack element.



      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete.
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.CfnResource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addOverride>`

      Adds an override to the synthesized CloudFormation resource.

      

      To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types.. . Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value.. . Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property.
      :type propertyPath: string
      :param value: The value.
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.IResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


CfnManagedPolicyProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnManagedPolicyProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnManagedPolicyProps;

      .. code-tab:: javascript

         // CfnManagedPolicyProps is an interface

      .. code-tab:: typescript

         import { CfnManagedPolicyProps } from '@aws-cdk/aws-iam';



   Properties for defining a `AWS::IAM::ManagedPolicy`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html




   .. py:attribute:: policyDocument

      `AWS::IAM::ManagedPolicy.PolicyDocument`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-policydocument


      :type: json or :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:attribute:: description

      `AWS::IAM::ManagedPolicy.Description`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-description


      :type: string *(optional)* *(readonly)*


   .. py:attribute:: groups

      `AWS::IAM::ManagedPolicy.Groups`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-groups


      :type: string[] *(optional)* *(readonly)*


   .. py:attribute:: managedPolicyName

      `AWS::IAM::ManagedPolicy.ManagedPolicyName`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-managedpolicyname


      :type: string *(optional)* *(readonly)*


   .. py:attribute:: path

      `AWS::IAM::ManagedPolicy.Path`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-ec2-dhcpoptions-path


      :type: string *(optional)* *(readonly)*


   .. py:attribute:: roles

      `AWS::IAM::ManagedPolicy.Roles`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-roles


      :type: string[] *(optional)* *(readonly)*


   .. py:attribute:: users

      `AWS::IAM::ManagedPolicy.Users`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-users


      :type: string[] *(optional)* *(readonly)*


CfnPolicy
^^^^^^^^^

.. py:class:: CfnPolicy(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnPolicy;

      .. code-tab:: javascript

         const { CfnPolicy } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { CfnPolicy } from '@aws-cdk/aws-iam';



   A CloudFormation `AWS::IAM::Policy`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html


   :extends: :py:class:`@aws-cdk/cdk.CfnResource`\ 
   :param scope: - scope in which this resource is defined.
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: - scoped id of the resource.
   :type id: string
   :param props: - resource properties.
   :type props: :py:class:`~@aws-cdk/aws-iam.CfnPolicyProps`\ 

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.CfnResource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: policyName

      :type: string *(readonly)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-iam.CfnPolicyProps`\  *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.prepare>`

      Automatically detect references in this CfnElement.



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.logicalId>`

      The logical ID for this CloudFormation stack element.

      

      The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.stackPath>`

      Return the path with respect to the stack.



      :type: string *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:attribute:: referenceToken

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.referenceToken>`

      Return a token that will CloudFormation { Ref } this stack element.



      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete.
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.CfnResource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addOverride>`

      Adds an override to the synthesized CloudFormation resource.

      

      To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types.. . Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value.. . Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property.
      :type propertyPath: string
      :param value: The value.
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.IResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


CfnPolicyProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnPolicyProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnPolicyProps;

      .. code-tab:: javascript

         // CfnPolicyProps is an interface

      .. code-tab:: typescript

         import { CfnPolicyProps } from '@aws-cdk/aws-iam';



   Properties for defining a `AWS::IAM::Policy`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html




   .. py:attribute:: policyDocument

      `AWS::IAM::Policy.PolicyDocument`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-policydocument


      :type: json or :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:attribute:: policyName

      `AWS::IAM::Policy.PolicyName`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-policyname


      :type: string *(readonly)*


   .. py:attribute:: groups

      `AWS::IAM::Policy.Groups`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-groups


      :type: string[] *(optional)* *(readonly)*


   .. py:attribute:: roles

      `AWS::IAM::Policy.Roles`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-roles


      :type: string[] *(optional)* *(readonly)*


   .. py:attribute:: users

      `AWS::IAM::Policy.Users`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-users


      :type: string[] *(optional)* *(readonly)*


CfnRole
^^^^^^^

.. py:class:: CfnRole(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnRole;

      .. code-tab:: javascript

         const { CfnRole } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { CfnRole } from '@aws-cdk/aws-iam';



   A CloudFormation `AWS::IAM::Role`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html


   :extends: :py:class:`@aws-cdk/cdk.CfnResource`\ 
   :param scope: - scope in which this resource is defined.
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: - scoped id of the resource.
   :type id: string
   :param props: - resource properties.
   :type props: :py:class:`~@aws-cdk/aws-iam.CfnRoleProps`\ 

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.CfnResource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-iam.CfnRoleProps`\  *(readonly)*


   .. py:attribute:: roleArn

      :type: string *(readonly)*


   .. py:attribute:: roleId

      :type: string *(readonly)*


   .. py:attribute:: roleName

      :type: string *(readonly)*

   .. py:class:: PolicyProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.IAM;

         .. code-tab:: java

            import software.amazon.awscdk.services.iam.CfnRole.PolicyProperty;

         .. code-tab:: javascript

            // CfnRole.PolicyProperty is an interface

         .. code-tab:: typescript

            import { CfnRole.PolicyProperty } from '@aws-cdk/aws-iam';





      .. py:attribute:: policyDocument

         `CfnRole.PolicyProperty.PolicyDocument`.

         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policydocument


         :type: json or :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


      .. py:attribute:: policyName

         `CfnRole.PolicyProperty.PolicyName`.

         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policyname


         :type: string *(readonly)*



   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.prepare>`

      Automatically detect references in this CfnElement.



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.logicalId>`

      The logical ID for this CloudFormation stack element.

      

      The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.stackPath>`

      Return the path with respect to the stack.



      :type: string *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:attribute:: referenceToken

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.referenceToken>`

      Return a token that will CloudFormation { Ref } this stack element.



      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete.
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.CfnResource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addOverride>`

      Adds an override to the synthesized CloudFormation resource.

      

      To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types.. . Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value.. . Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property.
      :type propertyPath: string
      :param value: The value.
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.IResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


CfnRoleProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnRoleProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnRoleProps;

      .. code-tab:: javascript

         // CfnRoleProps is an interface

      .. code-tab:: typescript

         import { CfnRoleProps } from '@aws-cdk/aws-iam';



   Properties for defining a `AWS::IAM::Role`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html




   .. py:attribute:: assumeRolePolicyDocument

      `AWS::IAM::Role.AssumeRolePolicyDocument`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-assumerolepolicydocument


      :type: json or :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:attribute:: managedPolicyArns

      `AWS::IAM::Role.ManagedPolicyArns`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-managepolicyarns


      :type: string[] *(optional)* *(readonly)*


   .. py:attribute:: maxSessionDuration

      `AWS::IAM::Role.MaxSessionDuration`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-maxsessionduration


      :type: number or :py:class:`@aws-cdk/cdk.Token`\  *(optional)* *(readonly)*


   .. py:attribute:: path

      `AWS::IAM::Role.Path`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-path


      :type: string *(optional)* *(readonly)*


   .. py:attribute:: permissionsBoundary

      `AWS::IAM::Role.PermissionsBoundary`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-permissionsboundary


      :type: string *(optional)* *(readonly)*


   .. py:attribute:: policies

      `AWS::IAM::Role.Policies`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-policies


      :type: :py:class:`@aws-cdk/cdk.Token`\  or (:py:class:`@aws-cdk/cdk.Token`\  or :py:class:`~@aws-cdk/aws-iam.CfnRole.PolicyProperty`\ )[] *(optional)* *(readonly)*


   .. py:attribute:: roleName

      `AWS::IAM::Role.RoleName`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-rolename


      :type: string *(optional)* *(readonly)*


CfnServiceLinkedRole
^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnServiceLinkedRole(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnServiceLinkedRole;

      .. code-tab:: javascript

         const { CfnServiceLinkedRole } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { CfnServiceLinkedRole } from '@aws-cdk/aws-iam';



   A CloudFormation `AWS::IAM::ServiceLinkedRole`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servicelinkedrole.html


   :extends: :py:class:`@aws-cdk/cdk.CfnResource`\ 
   :param scope: - scope in which this resource is defined.
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: - scoped id of the resource.
   :type id: string
   :param props: - resource properties.
   :type props: :py:class:`~@aws-cdk/aws-iam.CfnServiceLinkedRoleProps`\ 

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.CfnResource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-iam.CfnServiceLinkedRoleProps`\  *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.prepare>`

      Automatically detect references in this CfnElement.



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.logicalId>`

      The logical ID for this CloudFormation stack element.

      

      The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.stackPath>`

      Return the path with respect to the stack.



      :type: string *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:attribute:: referenceToken

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.referenceToken>`

      Return a token that will CloudFormation { Ref } this stack element.



      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete.
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.CfnResource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addOverride>`

      Adds an override to the synthesized CloudFormation resource.

      

      To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types.. . Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value.. . Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property.
      :type propertyPath: string
      :param value: The value.
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.IResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


CfnServiceLinkedRoleProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnServiceLinkedRoleProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnServiceLinkedRoleProps;

      .. code-tab:: javascript

         // CfnServiceLinkedRoleProps is an interface

      .. code-tab:: typescript

         import { CfnServiceLinkedRoleProps } from '@aws-cdk/aws-iam';



   Properties for defining a `AWS::IAM::ServiceLinkedRole`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servicelinkedrole.html




   .. py:attribute:: awsServiceName

      `AWS::IAM::ServiceLinkedRole.AWSServiceName`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servicelinkedrole.html#cfn-iam-servicelinkedrole-awsservicename


      :type: string *(readonly)*


   .. py:attribute:: customSuffix

      `AWS::IAM::ServiceLinkedRole.CustomSuffix`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servicelinkedrole.html#cfn-iam-servicelinkedrole-customsuffix


      :type: string *(optional)* *(readonly)*


   .. py:attribute:: description

      `AWS::IAM::ServiceLinkedRole.Description`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servicelinkedrole.html#cfn-iam-servicelinkedrole-description


      :type: string *(optional)* *(readonly)*


CfnUser
^^^^^^^

.. py:class:: CfnUser(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnUser;

      .. code-tab:: javascript

         const { CfnUser } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { CfnUser } from '@aws-cdk/aws-iam';



   A CloudFormation `AWS::IAM::User`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html


   :extends: :py:class:`@aws-cdk/cdk.CfnResource`\ 
   :param scope: - scope in which this resource is defined.
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: - scoped id of the resource.
   :type id: string
   :param props: - resource properties.
   :type props: :py:class:`~@aws-cdk/aws-iam.CfnUserProps`\ 

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.CfnResource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-iam.CfnUserProps`\  *(readonly)*


   .. py:attribute:: userArn

      :type: string *(readonly)*


   .. py:attribute:: userName

      :type: string *(readonly)*

   .. py:class:: LoginProfileProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.IAM;

         .. code-tab:: java

            import software.amazon.awscdk.services.iam.CfnUser.LoginProfileProperty;

         .. code-tab:: javascript

            // CfnUser.LoginProfileProperty is an interface

         .. code-tab:: typescript

            import { CfnUser.LoginProfileProperty } from '@aws-cdk/aws-iam';





      .. py:attribute:: password

         `CfnUser.LoginProfileProperty.Password`.

         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user-loginprofile.html#cfn-iam-user-loginprofile-password


         :type: string *(readonly)*


      .. py:attribute:: passwordResetRequired

         `CfnUser.LoginProfileProperty.PasswordResetRequired`.

         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user-loginprofile.html#cfn-iam-user-loginprofile-passwordresetrequired


         :type: boolean or :py:class:`@aws-cdk/cdk.Token`\  *(optional)* *(readonly)*


   .. py:class:: PolicyProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.IAM;

         .. code-tab:: java

            import software.amazon.awscdk.services.iam.CfnUser.PolicyProperty;

         .. code-tab:: javascript

            // CfnUser.PolicyProperty is an interface

         .. code-tab:: typescript

            import { CfnUser.PolicyProperty } from '@aws-cdk/aws-iam';





      .. py:attribute:: policyDocument

         `CfnUser.PolicyProperty.PolicyDocument`.

         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policydocument


         :type: json or :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


      .. py:attribute:: policyName

         `CfnUser.PolicyProperty.PolicyName`.

         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policyname


         :type: string *(readonly)*



   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.prepare>`

      Automatically detect references in this CfnElement.



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.logicalId>`

      The logical ID for this CloudFormation stack element.

      

      The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.stackPath>`

      Return the path with respect to the stack.



      :type: string *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:attribute:: referenceToken

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.referenceToken>`

      Return a token that will CloudFormation { Ref } this stack element.



      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete.
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.CfnResource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addOverride>`

      Adds an override to the synthesized CloudFormation resource.

      

      To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types.. . Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value.. . Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property.
      :type propertyPath: string
      :param value: The value.
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.IResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


CfnUserProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnUserProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnUserProps;

      .. code-tab:: javascript

         // CfnUserProps is an interface

      .. code-tab:: typescript

         import { CfnUserProps } from '@aws-cdk/aws-iam';



   Properties for defining a `AWS::IAM::User`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html




   .. py:attribute:: groups

      `AWS::IAM::User.Groups`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-groups


      :type: string[] *(optional)* *(readonly)*


   .. py:attribute:: loginProfile

      `AWS::IAM::User.LoginProfile`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-loginprofile


      :type: :py:class:`@aws-cdk/cdk.Token`\  or :py:class:`~@aws-cdk/aws-iam.CfnUser.LoginProfileProperty`\  *(optional)* *(readonly)*


   .. py:attribute:: managedPolicyArns

      `AWS::IAM::User.ManagedPolicyArns`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-managepolicyarns


      :type: string[] *(optional)* *(readonly)*


   .. py:attribute:: path

      `AWS::IAM::User.Path`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-path


      :type: string *(optional)* *(readonly)*


   .. py:attribute:: permissionsBoundary

      `AWS::IAM::User.PermissionsBoundary`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-permissionsboundary


      :type: string *(optional)* *(readonly)*


   .. py:attribute:: policies

      `AWS::IAM::User.Policies`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-policies


      :type: :py:class:`@aws-cdk/cdk.Token`\  or (:py:class:`@aws-cdk/cdk.Token`\  or :py:class:`~@aws-cdk/aws-iam.CfnUser.PolicyProperty`\ )[] *(optional)* *(readonly)*


   .. py:attribute:: userName

      `AWS::IAM::User.UserName`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-username


      :type: string *(optional)* *(readonly)*


CfnUserToGroupAddition
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnUserToGroupAddition(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnUserToGroupAddition;

      .. code-tab:: javascript

         const { CfnUserToGroupAddition } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { CfnUserToGroupAddition } from '@aws-cdk/aws-iam';



   A CloudFormation `AWS::IAM::UserToGroupAddition`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html


   :extends: :py:class:`@aws-cdk/cdk.CfnResource`\ 
   :param scope: - scope in which this resource is defined.
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: - scoped id of the resource.
   :type id: string
   :param props: - resource properties.
   :type props: :py:class:`~@aws-cdk/aws-iam.CfnUserToGroupAdditionProps`\ 

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.CfnResource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-iam.CfnUserToGroupAdditionProps`\  *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.prepare>`

      Automatically detect references in this CfnElement.



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.logicalId>`

      The logical ID for this CloudFormation stack element.

      

      The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.stackPath>`

      Return the path with respect to the stack.



      :type: string *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:attribute:: referenceToken

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.referenceToken>`

      Return a token that will CloudFormation { Ref } this stack element.



      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete.
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.CfnResource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addOverride>`

      Adds an override to the synthesized CloudFormation resource.

      

      To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types.. . Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value.. . Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property.
      :type propertyPath: string
      :param value: The value.
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.IResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


CfnUserToGroupAdditionProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnUserToGroupAdditionProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CfnUserToGroupAdditionProps;

      .. code-tab:: javascript

         // CfnUserToGroupAdditionProps is an interface

      .. code-tab:: typescript

         import { CfnUserToGroupAdditionProps } from '@aws-cdk/aws-iam';



   Properties for defining a `AWS::IAM::UserToGroupAddition`.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html




   .. py:attribute:: groupName

      `AWS::IAM::UserToGroupAddition.GroupName`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html#cfn-iam-addusertogroup-groupname


      :type: string *(readonly)*


   .. py:attribute:: users

      `AWS::IAM::UserToGroupAddition.Users`.

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html#cfn-iam-addusertogroup-users


      :type: string[] *(readonly)*


CommonGrantOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CommonGrantOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CommonGrantOptions;

      .. code-tab:: javascript

         // CommonGrantOptions is an interface

      .. code-tab:: typescript

         import { CommonGrantOptions } from '@aws-cdk/aws-iam';



   Basic options for a grant operation.





   .. py:attribute:: actions

      The actions to grant.



      :type: string[] *(readonly)*


   .. py:attribute:: grantee

      The principal to grant to.



      :type: :py:class:`~@aws-cdk/aws-iam.IGrantable`\  *(readonly)*
      :default: if principal is undefined, no work is done.


   .. py:attribute:: resourceArns

      The resource ARNs to grant to.



      :type: string[] *(readonly)*


CompositePrincipal
^^^^^^^^^^^^^^^^^^

.. py:class:: CompositePrincipal(principal, *additionalPrincipals)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.CompositePrincipal;

      .. code-tab:: javascript

         const { CompositePrincipal } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { CompositePrincipal } from '@aws-cdk/aws-iam';



   :extends: :py:class:`~@aws-cdk/aws-iam.PrincipalBase`\ 
   :param principal: 
   :type principal: :py:class:`~@aws-cdk/aws-iam.PrincipalBase`\ 
   :param \*additionalPrincipals: 
   :type \*additionalPrincipals: :py:class:`~@aws-cdk/aws-iam.PrincipalBase`\ 

   .. py:method:: addPrincipals(*principals) -> @aws-cdk/aws-iam.CompositePrincipal

      :param \*principals: 
      :type \*principals: :py:class:`~@aws-cdk/aws-iam.PrincipalBase`\ 
      :rtype: :py:class:`~@aws-cdk/aws-iam.CompositePrincipal`\ 


   .. py:method:: toString() -> string

      *Overrides* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.toString`

      Returns a string representation of an object.



      :rtype: string


   .. py:attribute:: assumeRoleAction

      *Overrides* :py:attr:`@aws-cdk/aws-iam.PrincipalBase.assumeRoleAction`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.policyFragment`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:method:: addToPolicy(_statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.addToPolicy>`

      Add to the policy of this principal.



      :param _statement: 
      :type _statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: toJSON() -> string => string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.toJSON>`

      :rtype: string => string[]


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


FederatedPrincipal
^^^^^^^^^^^^^^^^^^

.. py:class:: FederatedPrincipal(federated, conditions, [assumeRoleAction])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.FederatedPrincipal;

      .. code-tab:: javascript

         const { FederatedPrincipal } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { FederatedPrincipal } from '@aws-cdk/aws-iam';



   :extends: :py:class:`~@aws-cdk/aws-iam.PrincipalBase`\ 
   :param federated: 
   :type federated: string
   :param conditions: 
   :type conditions: string => any
   :param assumeRoleAction: 
   :type assumeRoleAction: string

   .. py:method:: toString() -> string

      *Overrides* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.toString`

      Returns a string representation of an object.



      :rtype: string


   .. py:attribute:: assumeRoleAction

      *Overrides* :py:attr:`@aws-cdk/aws-iam.PrincipalBase.assumeRoleAction`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: conditions

      :type: string => any *(readonly)*


   .. py:attribute:: federated

      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.policyFragment`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:method:: addToPolicy(_statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.addToPolicy>`

      Add to the policy of this principal.



      :param _statement: 
      :type _statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: toJSON() -> string => string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.toJSON>`

      :rtype: string => string[]


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


Grant
^^^^^

.. py:class:: Grant

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.Grant;

      .. code-tab:: javascript

         const { Grant } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { Grant } from '@aws-cdk/aws-iam';



   Result of a grant() operation.

   

   This class is not instantiable by consumers on purpose, so that they will be

   required to call the Grant factory functions.




   .. py:staticmethod:: addToPrincipal(options) -> @aws-cdk/aws-iam.Grant

      Try to grant the given permissions to the given principal.

      

      Absence of a principal leads to a warning, but failing to add

      the permissions to a present principal is not an error.



      :param options: 
      :type options: :py:class:`~@aws-cdk/aws-iam.GrantOnPrincipalOptions`\ 
      :rtype: :py:class:`~@aws-cdk/aws-iam.Grant`\ 


   .. py:staticmethod:: addToPrincipalAndResource(options) -> @aws-cdk/aws-iam.Grant

      Add a grant both on the principal and on the resource.

      

      As long as any principal is given, granting on the pricipal may fail (in

      case of a non-identity principal), but granting on the resource will

      never fail.

      

      Statement will be the resource statement.



      :param options: 
      :type options: :py:class:`~@aws-cdk/aws-iam.GrantOnPrincipalAndResourceOptions`\ 
      :rtype: :py:class:`~@aws-cdk/aws-iam.Grant`\ 


   .. py:staticmethod:: addToPrincipalOrResource(options) -> @aws-cdk/aws-iam.Grant

      Grant the given permissions to the principal.

      

      The permissions will be added to the principal policy primarily, falling

      back to the resource policy if necessary. The permissions must be granted

      somewhere.

      

      - Trying to grant permissions to a principal that does not admit adding to

         the principal policy while not providing a resource with a resource policy

         is an error.

      - Trying to grant permissions to an absent principal (possible in the

         case of imported resources) leads to a warning being added to the

         resource construct.



      :param options: 
      :type options: :py:class:`~@aws-cdk/aws-iam.GrantWithResourceOptions`\ 
      :rtype: :py:class:`~@aws-cdk/aws-iam.Grant`\ 


   .. py:method:: assertSuccess()

      Throw an error if this grant wasn't successful.





   .. py:attribute:: success

      Whether the grant operation was successful.



      :type: boolean *(readonly)*


   .. py:attribute:: principalStatement

      The statement that was added to the principal's policy.

      

      Can be accessed to (e.g.) add additional conditions to the statement.



      :type: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\  *(optional)* *(readonly)*


   .. py:attribute:: resourceStatement

      The statement that was added to the resource policy.

      

      Can be accessed to (e.g.) add additional conditions to the statement.



      :type: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\  *(optional)* *(readonly)*


GrantOnPrincipalAndResourceOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: GrantOnPrincipalAndResourceOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.GrantOnPrincipalAndResourceOptions;

      .. code-tab:: javascript

         // GrantOnPrincipalAndResourceOptions is an interface

      .. code-tab:: typescript

         import { GrantOnPrincipalAndResourceOptions } from '@aws-cdk/aws-iam';



   Options for a grant operation to both identity and resource.



   :extends: :py:class:`~@aws-cdk/aws-iam.CommonGrantOptions`\ 


   .. py:attribute:: resource

      The resource with a resource policy.

      

      The statement will always be added to the resource policy.



      :type: :py:class:`~@aws-cdk/aws-iam.IResourceWithPolicy`\  *(readonly)*


   .. py:attribute:: resourceSelfArns

      When referring to the resource in a resource policy, use this as ARN.

      

      (Depending on the resource type, this needs to be '*' in a resource policy).



      :type: string[] *(optional)* *(readonly)*
      :default: Same as regular resource ARNs


   .. py:attribute:: actions

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.CommonGrantOptions <@aws-cdk/aws-iam.CommonGrantOptions.actions>`

      The actions to grant.



      :type: string[] *(readonly)*


   .. py:attribute:: grantee

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.CommonGrantOptions <@aws-cdk/aws-iam.CommonGrantOptions.grantee>`

      The principal to grant to.



      :type: :py:class:`~@aws-cdk/aws-iam.IGrantable`\  *(readonly)*
      :default: if principal is undefined, no work is done.


   .. py:attribute:: resourceArns

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.CommonGrantOptions <@aws-cdk/aws-iam.CommonGrantOptions.resourceArns>`

      The resource ARNs to grant to.



      :type: string[] *(readonly)*


GrantOnPrincipalOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: GrantOnPrincipalOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.GrantOnPrincipalOptions;

      .. code-tab:: javascript

         // GrantOnPrincipalOptions is an interface

      .. code-tab:: typescript

         import { GrantOnPrincipalOptions } from '@aws-cdk/aws-iam';



   Options for a grant operation that only applies to principals.



   :extends: :py:class:`~@aws-cdk/aws-iam.CommonGrantOptions`\ 


   .. py:attribute:: scope

      Construct to report warnings on in case grant could not be registered.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\  *(optional)* *(readonly)*


   .. py:attribute:: actions

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.CommonGrantOptions <@aws-cdk/aws-iam.CommonGrantOptions.actions>`

      The actions to grant.



      :type: string[] *(readonly)*


   .. py:attribute:: grantee

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.CommonGrantOptions <@aws-cdk/aws-iam.CommonGrantOptions.grantee>`

      The principal to grant to.



      :type: :py:class:`~@aws-cdk/aws-iam.IGrantable`\  *(readonly)*
      :default: if principal is undefined, no work is done.


   .. py:attribute:: resourceArns

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.CommonGrantOptions <@aws-cdk/aws-iam.CommonGrantOptions.resourceArns>`

      The resource ARNs to grant to.



      :type: string[] *(readonly)*


GrantWithResourceOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: GrantWithResourceOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.GrantWithResourceOptions;

      .. code-tab:: javascript

         // GrantWithResourceOptions is an interface

      .. code-tab:: typescript

         import { GrantWithResourceOptions } from '@aws-cdk/aws-iam';



   Options for a grant operation.



   :extends: :py:class:`~@aws-cdk/aws-iam.CommonGrantOptions`\ 


   .. py:attribute:: resource

      The resource with a resource policy.

      

      The statement will be added to the resource policy if it couldn't be

      added to the principal policy.



      :type: :py:class:`~@aws-cdk/aws-iam.IResourceWithPolicy`\  *(readonly)*


   .. py:attribute:: resourceSelfArns

      When referring to the resource in a resource policy, use this as ARN.

      

      (Depending on the resource type, this needs to be '*' in a resource policy).



      :type: string[] *(optional)* *(readonly)*
      :default: Same as regular resource ARNs


   .. py:attribute:: actions

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.CommonGrantOptions <@aws-cdk/aws-iam.CommonGrantOptions.actions>`

      The actions to grant.



      :type: string[] *(readonly)*


   .. py:attribute:: grantee

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.CommonGrantOptions <@aws-cdk/aws-iam.CommonGrantOptions.grantee>`

      The principal to grant to.



      :type: :py:class:`~@aws-cdk/aws-iam.IGrantable`\  *(readonly)*
      :default: if principal is undefined, no work is done.


   .. py:attribute:: resourceArns

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.CommonGrantOptions <@aws-cdk/aws-iam.CommonGrantOptions.resourceArns>`

      The resource ARNs to grant to.



      :type: string[] *(readonly)*


Group
^^^^^

.. py:class:: Group(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.Group;

      .. code-tab:: javascript

         const { Group } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { Group } from '@aws-cdk/aws-iam';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :implements: :py:class:`~@aws-cdk/aws-iam.IIdentity`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-iam.GroupProps`\ 

   .. py:method:: addToPolicy(statement) -> boolean

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.addToPolicy`

      Adds an IAM statement to the default policy.



      :param statement: 
      :type statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: addUser(user)

      Adds a user to this group.



      :param user: 
      :type user: :py:class:`~@aws-cdk/aws-iam.User`\ 


   .. py:method:: attachInlinePolicy(policy)

      *Implements* :py:meth:`@aws-cdk/aws-iam.IIdentity.attachInlinePolicy`

      Attaches a policy to this group.



      :param policy: The policy to attach.
      :type policy: :py:class:`~@aws-cdk/aws-iam.Policy`\ 


   .. py:method:: attachManagedPolicy(arn)

      *Implements* :py:meth:`@aws-cdk/aws-iam.IIdentity.attachManagedPolicy`

      Attaches a managed policy to this group.



      :param arn: The ARN of the managed policy to attach.
      :type arn: string


   .. py:attribute:: assumeRoleAction

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.assumeRoleAction`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Implements* :py:meth:`@aws-cdk/aws-iam.IGrantable.grantPrincipal`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


   .. py:attribute:: groupArn

      The ARN of this group.



      :type: string *(readonly)*


   .. py:attribute:: groupName

      The runtime name of this group.



      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.policyFragment`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis.

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


GroupProps (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: GroupProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.GroupProps;

      .. code-tab:: javascript

         // GroupProps is an interface

      .. code-tab:: typescript

         import { GroupProps } from '@aws-cdk/aws-iam';





   .. py:attribute:: groupName

      A name for the IAM group.

      

      For valid values, see the GroupName parameter

      for the CreateGroup action in the IAM API Reference. If you don't specify

      a name, AWS CloudFormation generates a unique physical ID and uses that

      ID for the group name.

      

      If you specify a name, you must specify the CAPABILITY_NAMED_IAM value to

      acknowledge your template's capabilities. For more information, see

      Acknowledging IAM Resources in AWS CloudFormation Templates.



      :type: string *(optional)* *(readonly)*
      :default: Generated by CloudFormation (recommended)


   .. py:attribute:: managedPolicyArns

      A list of ARNs for managed policies associated with group.



      :type: any[] *(optional)* *(readonly)*
      :default: No managed policies.


   .. py:attribute:: path

      The path to the group.

      

      For more information about paths, see [IAM

      Identifiers](http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html)

      in the IAM User Guide.



      :type: string *(optional)* *(readonly)*


IGrantable (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IGrantable

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.IGrantable;

      .. code-tab:: javascript

         // IGrantable is an interface

      .. code-tab:: typescript

         import { IGrantable } from '@aws-cdk/aws-iam';



   Any object that has an associated principal that a permission can be granted to.





   .. py:attribute:: grantPrincipal

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


IIdentity (interface)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IIdentity

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.IIdentity;

      .. code-tab:: javascript

         // IIdentity is an interface

      .. code-tab:: typescript

         import { IIdentity } from '@aws-cdk/aws-iam';



   A construct that represents an IAM principal, such as a user, group or role.



   :extends: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\ 
   :extends: :py:class:`@aws-cdk/cdk.IResource`\ 


   .. py:method:: attachInlinePolicy(policy)

      Attaches an inline policy to this principal. This is the same as calling `policy.addToXxx(principal)`.



      :param policy: The policy resource to attach to this principal.
      :type policy: :py:class:`~@aws-cdk/aws-iam.Policy`\ 
      :abstract: Yes


   .. py:method:: attachManagedPolicy(arn)

      Attaches a managed policy to this principal.



      :param arn: The ARN of the managed policy.
      :type arn: string
      :abstract: Yes


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.IGrantable <@aws-cdk/aws-iam.IGrantable.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


   .. py:method:: addToPolicy(statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.IPrincipal <@aws-cdk/aws-iam.IPrincipal.addToPolicy>`

      Add to the policy of this principal.



      :param statement: 
      :type statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :return: true if the statement was added, false if the principal in
         question does not have a policy document to add the statement to.
      :rtype: boolean
      :abstract: Yes


   .. py:attribute:: assumeRoleAction

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.IPrincipal <@aws-cdk/aws-iam.IPrincipal.assumeRoleAction>`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.IPrincipal <@aws-cdk/aws-iam.IPrincipal.policyFragment>`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.IConstruct <@aws-cdk/cdk.IConstruct.node>`

      The construct node in the scope tree.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.IDependable <@aws-cdk/cdk.IDependable.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


IPrincipal (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IPrincipal

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.IPrincipal;

      .. code-tab:: javascript

         // IPrincipal is an interface

      .. code-tab:: typescript

         import { IPrincipal } from '@aws-cdk/aws-iam';



   Represents a logical IAM principal.

   

   An IPrincipal describes a logical entity that can perform AWS API calls

   against sets of resources, optionally under certain conditions.

   

   Examples of simple principals are IAM objects that you create, such

   as Users or Roles.

   

   An example of a more complex principals is a `ServicePrincipal` (such as

   `new ServicePrincipal("sns.amazonaws.com")`, which represents the Simple

   Notifications Service).

   

   A single logical Principal may also map to a set of physical principals.

   For example, `new OrganizationPrincipal('o-1234')` represents all

   identities that are part of the given AWS Organization.



   :extends: :py:class:`~@aws-cdk/aws-iam.IGrantable`\ 


   .. py:attribute:: assumeRoleAction

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:method:: addToPolicy(statement) -> boolean

      Add to the policy of this principal.



      :param statement: 
      :type statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :return: true if the statement was added, false if the principal in
         question does not have a policy document to add the statement to.
      :rtype: boolean
      :abstract: Yes


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.IGrantable <@aws-cdk/aws-iam.IGrantable.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


IResourceWithPolicy (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IResourceWithPolicy

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.IResourceWithPolicy;

      .. code-tab:: javascript

         // IResourceWithPolicy is an interface

      .. code-tab:: typescript

         import { IResourceWithPolicy } from '@aws-cdk/aws-iam';



   A resource with a resource policy that can be added to.



   :extends: :py:class:`@aws-cdk/cdk.IConstruct`\ 


   .. py:method:: addToResourcePolicy(statement)

      Add a statement to the resource's resource policy.



      :param statement: 
      :type statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :abstract: Yes


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.IConstruct <@aws-cdk/cdk.IConstruct.node>`

      The construct node in the scope tree.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.IDependable <@aws-cdk/cdk.IDependable.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


IRole (interface)
^^^^^^^^^^^^^^^^^

.. py:class:: IRole

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.IRole;

      .. code-tab:: javascript

         // IRole is an interface

      .. code-tab:: typescript

         import { IRole } from '@aws-cdk/aws-iam';



   A Role object.



   :extends: :py:class:`~@aws-cdk/aws-iam.IIdentity`\ 


   .. py:attribute:: roleArn

      Returns the ARN of this role.



      :type: string *(readonly)*


   .. py:attribute:: roleId

      Returns the stable and unique string identifying the role.

      

      For example,

      AIDAJQABLZS4A3QDU576Q.



      :type: string *(readonly)*


   .. py:attribute:: roleName

      Returns the name of this role.



      :type: string *(readonly)*


   .. py:method:: export() -> @aws-cdk/aws-iam.RoleImportProps

      Export this role to another stack.



      :rtype: :py:class:`~@aws-cdk/aws-iam.RoleImportProps`\ 
      :abstract: Yes


   .. py:method:: grant(grantee, *actions) -> @aws-cdk/aws-iam.Grant

      Grant the actions defined in actions to the identity Principal on this resource.



      :param grantee: 
      :type grantee: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\ 
      :param \*actions: 
      :type \*actions: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.Grant`\ 
      :abstract: Yes


   .. py:method:: grantPassRole(grantee) -> @aws-cdk/aws-iam.Grant

      Grant permissions to the given principal to pass this role.



      :param grantee: 
      :type grantee: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\ 
      :rtype: :py:class:`~@aws-cdk/aws-iam.Grant`\ 
      :abstract: Yes


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.IGrantable <@aws-cdk/aws-iam.IGrantable.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


   .. py:method:: attachInlinePolicy(policy)

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.IIdentity <@aws-cdk/aws-iam.IIdentity.attachInlinePolicy>`

      Attaches an inline policy to this principal. This is the same as calling `policy.addToXxx(principal)`.



      :param policy: The policy resource to attach to this principal.
      :type policy: :py:class:`~@aws-cdk/aws-iam.Policy`\ 
      :abstract: Yes


   .. py:method:: attachManagedPolicy(arn)

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.IIdentity <@aws-cdk/aws-iam.IIdentity.attachManagedPolicy>`

      Attaches a managed policy to this principal.



      :param arn: The ARN of the managed policy.
      :type arn: string
      :abstract: Yes


   .. py:method:: addToPolicy(statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.IPrincipal <@aws-cdk/aws-iam.IPrincipal.addToPolicy>`

      Add to the policy of this principal.



      :param statement: 
      :type statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :return: true if the statement was added, false if the principal in
         question does not have a policy document to add the statement to.
      :rtype: boolean
      :abstract: Yes


   .. py:attribute:: assumeRoleAction

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.IPrincipal <@aws-cdk/aws-iam.IPrincipal.assumeRoleAction>`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.IPrincipal <@aws-cdk/aws-iam.IPrincipal.policyFragment>`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.IConstruct <@aws-cdk/cdk.IConstruct.node>`

      The construct node in the scope tree.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.IDependable <@aws-cdk/cdk.IDependable.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


ImportedResourcePrincipal
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ImportedResourcePrincipal(props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.ImportedResourcePrincipal;

      .. code-tab:: javascript

         const { ImportedResourcePrincipal } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { ImportedResourcePrincipal } from '@aws-cdk/aws-iam';



   A principal associated with an imported resource.

   

   Some resources have roles associated with them which they assume, such as

   Lambda Functions, CodeBuild projects, StepFunctions machines, etc.

   

   When those resources are imported, their actual roles are not always

   imported with them. When that happens, we use an instance of this class

   instead, which will add user warnings when statements are attempted to be

   added to it.



   :implements: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\ 
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-iam.ImportedResourcePrincipalProps`\ 

   .. py:method:: addToPolicy(statement) -> boolean

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.addToPolicy`

      Add to the policy of this principal.



      :param statement: 
      :type statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:attribute:: assumeRoleAction

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.assumeRoleAction`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Implements* :py:meth:`@aws-cdk/aws-iam.IGrantable.grantPrincipal`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.policyFragment`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


ImportedResourcePrincipalProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ImportedResourcePrincipalProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.ImportedResourcePrincipalProps;

      .. code-tab:: javascript

         // ImportedResourcePrincipalProps is an interface

      .. code-tab:: typescript

         import { ImportedResourcePrincipalProps } from '@aws-cdk/aws-iam';



   Properties for an ImportedResourcePrincipal.





   .. py:attribute:: resource

      The resource the role proxy is for.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\  *(readonly)*


LazyRole
^^^^^^^^

.. py:class:: LazyRole(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.LazyRole;

      .. code-tab:: javascript

         const { LazyRole } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { LazyRole } from '@aws-cdk/aws-iam';



   An IAM role that only gets attached to the construct tree once it gets used, not before.

   

   This construct can be used to simplify logic in other constructs

   which need to create a role but only if certain configurations occur

   (such as when AutoScaling is configured). The role can be configured in one

   place, but if it never gets used it doesn't get instantiated and will

   not be synthesized or deployed.



   :extends: :py:class:`@aws-cdk/cdk.Construct`\ 
   :implements: :py:class:`~@aws-cdk/aws-iam.IRole`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-iam.LazyRoleProps`\ 

   .. py:method:: addToPolicy(statement) -> boolean

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.addToPolicy`

      Adds a permission to the role's default policy document. If there is no default policy attached to this role, it will be created.



      :param statement: The permission statement to add to the policy document.
      :type statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: attachInlinePolicy(policy)

      *Implements* :py:meth:`@aws-cdk/aws-iam.IIdentity.attachInlinePolicy`

      Attaches a policy to this role.



      :param policy: The policy to attach.
      :type policy: :py:class:`~@aws-cdk/aws-iam.Policy`\ 


   .. py:method:: attachManagedPolicy(arn)

      *Implements* :py:meth:`@aws-cdk/aws-iam.IIdentity.attachManagedPolicy`

      Attaches a managed policy to this role.



      :param arn: The ARN of the managed policy to attach.
      :type arn: string


   .. py:method:: export() -> @aws-cdk/aws-iam.RoleImportProps

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.export`

      Export this role to another stack.



      :rtype: :py:class:`~@aws-cdk/aws-iam.RoleImportProps`\ 


   .. py:method:: grant(identity, *actions) -> @aws-cdk/aws-iam.Grant

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.grant`

      Grant the actions defined in actions to the identity Principal on this resource.



      :param identity: 
      :type identity: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\ 
      :param \*actions: 
      :type \*actions: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.Grant`\ 


   .. py:method:: grantPassRole(identity) -> @aws-cdk/aws-iam.Grant

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.grantPassRole`

      Grant permissions to the given principal to pass this role.



      :param identity: 
      :type identity: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\ 
      :rtype: :py:class:`~@aws-cdk/aws-iam.Grant`\ 


   .. py:attribute:: assumeRoleAction

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.assumeRoleAction`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Implements* :py:meth:`@aws-cdk/aws-iam.IGrantable.grantPrincipal`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.policyFragment`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:attribute:: props

      :type: :py:class:`~@aws-cdk/aws-iam.LazyRoleProps`\  *(readonly)*


   .. py:attribute:: roleArn

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.roleArn`

      Returns the ARN of this role.



      :type: string *(readonly)*


   .. py:attribute:: roleId

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.roleId`

      Returns the stable and unique string identifying the role.

      

      For example,

      AIDAJQABLZS4A3QDU576Q.



      :type: string *(readonly)*


   .. py:attribute:: roleName

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.roleName`

      Returns the name of this role.



      :type: string *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis.

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


LazyRoleProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: LazyRoleProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.LazyRoleProps;

      .. code-tab:: javascript

         // LazyRoleProps is an interface

      .. code-tab:: typescript

         import { LazyRoleProps } from '@aws-cdk/aws-iam';



   :extends: :py:class:`~@aws-cdk/aws-iam.RoleProps`\ 


   .. py:attribute:: assumedBy

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.RoleProps <@aws-cdk/aws-iam.RoleProps.assumedBy>`

      The IAM principal (i.e. `new ServicePrincipal('sns.amazonaws.com')`) which can assume this role.

      

      You can later modify the assume role policy document by accessing it via

      the `assumeRolePolicy` property.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


   .. py:attribute:: externalId

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.RoleProps <@aws-cdk/aws-iam.RoleProps.externalId>`

      ID that the role assumer needs to provide when assuming this role.

      

      If the configured and provided external IDs do not match, the

      AssumeRole operation will fail.



      :type: string *(optional)* *(readonly)*
      :default: No external ID required


   .. py:attribute:: inlinePolicies

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.RoleProps <@aws-cdk/aws-iam.RoleProps.inlinePolicies>`

      A list of named policies to inline into this role.

      

      These policies will be

      created with the role, whereas those added by ``addToPolicy`` are added

      using a separate CloudFormation resource (allowing a way around circular

      dependencies that could otherwise be introduced).



      :type: string => :py:class:`~@aws-cdk/aws-iam.PolicyDocument`\  *(optional)* *(readonly)*
      :default: No policy is inlined in the Role resource.


   .. py:attribute:: managedPolicyArns

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.RoleProps <@aws-cdk/aws-iam.RoleProps.managedPolicyArns>`

      A list of ARNs for managed policies associated with this role. You can add managed policies later using `attachManagedPolicy(arn)`.



      :type: string[] *(optional)* *(readonly)*
      :default: No managed policies.


   .. py:attribute:: maxSessionDurationSec

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.RoleProps <@aws-cdk/aws-iam.RoleProps.maxSessionDurationSec>`

      The maximum session duration (in seconds) that you want to set for the specified role.

      

      If you do not specify a value for this setting, the

      default maximum of one hour is applied. This setting can have a value

      from 1 hour (3600sec) to 12 (43200sec) hours.

      

      Anyone who assumes the role from the AWS CLI or API can use the

      DurationSeconds API parameter or the duration-seconds CLI parameter to

      request a longer session. The MaxSessionDuration setting determines the

      maximum duration that can be requested using the DurationSeconds

      parameter.

      

      If users don't specify a value for the DurationSeconds parameter, their

      security credentials are valid for one hour by default. This applies when

      you use the AssumeRole* API operations or the assume-role* CLI operations

      but does not apply when you use those operations to create a console URL.



      :type: number *(optional)* *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.RoleProps <@aws-cdk/aws-iam.RoleProps.path>`

      The path associated with this role.

      

      For information about IAM paths, see

      Friendly Names and Paths in IAM User Guide.



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: roleName

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.RoleProps <@aws-cdk/aws-iam.RoleProps.roleName>`

      A name for the IAM role.

      

      For valid values, see the RoleName parameter for

      the CreateRole action in the IAM API Reference. If you don't specify a

      name, AWS CloudFormation generates a unique physical ID and uses that ID

      for the group name.

      

      IMPORTANT: If you specify a name, you cannot perform updates that require

      replacement of this resource. You can perform updates that require no or

      some interruption. If you must replace the resource, specify a new name.

      

      If you specify a name, you must specify the CAPABILITY_NAMED_IAM value to

      acknowledge your template's capabilities. For more information, see

      Acknowledging IAM Resources in AWS CloudFormation Templates.



      :type: string *(optional)* *(readonly)*


OrganizationPrincipal
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: OrganizationPrincipal(organizationId)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.OrganizationPrincipal;

      .. code-tab:: javascript

         const { OrganizationPrincipal } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { OrganizationPrincipal } from '@aws-cdk/aws-iam';



   A principal that represents an AWS Organization.



   :extends: :py:class:`~@aws-cdk/aws-iam.PrincipalBase`\ 
   :param organizationId: 
   :type organizationId: string

   .. py:method:: toString() -> string

      *Overrides* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.toString`

      Returns a string representation of an object.



      :rtype: string


   .. py:attribute:: organizationId

      :type: string *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.policyFragment`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:method:: addToPolicy(_statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.addToPolicy>`

      Add to the policy of this principal.



      :param _statement: 
      :type _statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: toJSON() -> string => string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.toJSON>`

      :rtype: string => string[]


   .. py:attribute:: assumeRoleAction

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.assumeRoleAction>`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


Policy
^^^^^^

.. py:class:: Policy(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.Policy;

      .. code-tab:: javascript

         const { Policy } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { Policy } from '@aws-cdk/aws-iam';



   The AWS::IAM::Policy resource associates an IAM policy with IAM users, roles, or groups.

   

   For more information about IAM policies, see [Overview of IAM

   Policies](http://docs.aws.amazon.com/IAM/latest/UserGuide/policies_overview.html)

   in the IAM User Guide guide.



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-iam.PolicyProps`\ 

   .. py:method:: addStatement(statement)

      Adds a statement to the policy document.



      :param statement: 
      :type statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: attachToGroup(group)

      Attaches this policy to a group.



      :param group: 
      :type group: :py:class:`~@aws-cdk/aws-iam.Group`\ 


   .. py:method:: attachToRole(role)

      Attaches this policy to a role.



      :param role: 
      :type role: :py:class:`~@aws-cdk/aws-iam.IRole`\ 


   .. py:method:: attachToUser(user)

      Attaches this policy to a user.



      :param user: 
      :type user: :py:class:`~@aws-cdk/aws-iam.User`\ 


   .. py:method:: validate() -> string[]

      *Overrides* :py:meth:`@aws-cdk/cdk.Construct.validate`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :rtype: string[]


   .. py:attribute:: document

      The policy document.



      :type: :py:class:`~@aws-cdk/aws-iam.PolicyDocument`\  *(readonly)*


   .. py:attribute:: policyName

      The name of this policy.



      :type: string *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis.

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


PolicyDocument
^^^^^^^^^^^^^^

.. py:class:: PolicyDocument([baseDocument])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.PolicyDocument;

      .. code-tab:: javascript

         const { PolicyDocument } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { PolicyDocument } from '@aws-cdk/aws-iam';



   :extends: :py:class:`@aws-cdk/cdk.Token`\ 
   :implements: :py:class:`@aws-cdk/cdk.IResolvedValuePostProcessor`\ 
   :param baseDocument: 
   :type baseDocument: any

   .. py:method:: addStatement(statement) -> @aws-cdk/aws-iam.PolicyDocument

      Adds a statement to the policy document.



      :param statement: the statement to add.
      :type statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyDocument`\ 


   .. py:method:: autoAssignSids()

      Will automatically assign a unique SID to each statement, unless an SID is provided.





   .. py:method:: postProcess(input, _context) -> any

      *Implements* :py:meth:`@aws-cdk/cdk.IResolvedValuePostProcessor.postProcess`

      Removes duplicate statements.



      :param input: 
      :type input: any
      :param _context: 
      :type _context: :py:class:`@aws-cdk/cdk.ResolveContext`\ 
      :rtype: any


   .. py:method:: resolve(_context) -> any

      *Overrides* :py:meth:`@aws-cdk/cdk.Token.resolve`

      :param _context: 
      :type _context: :py:class:`@aws-cdk/cdk.ResolveContext`\ 
      :rtype: any


   .. py:attribute:: baseDocument

      :type: any *(readonly)*


   .. py:attribute:: isEmpty

      :type: boolean *(readonly)*


   .. py:attribute:: statementCount

      The number of statements already added to this policy. Can be used, for example, to generate uniuqe "sid"s within the policy.



      :type: number *(readonly)*


   .. py:method:: toJSON() -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toJSON>`

      Turn this Token into JSON.

      

      This gets called by JSON.stringify(). We want to prohibit this, because

      it's not possible to do this properly, so we just throw an error here.



      :rtype: any


   .. py:method:: toList() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toList>`

      Return a string list representation of this token.

      

      Call this if the Token intrinsically evaluates to a list of strings.

      If so, you can represent the Token in a similar way in the type

      system.

      

      Note that even though the Token is represented as a list of strings, you

      still cannot do any operations on it such as concatenation, indexing,

      or taking its length. The only useful operations you can do to these lists

      is constructing a `FnJoin` or a `FnSelect` on it.



      :rtype: string[]


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toString>`

      Return a reversible string representation of this token.

      

      If the Token is initialized with a literal, the stringified value of the

      literal is returned. Otherwise, a special quoted string representation

      of the Token is returned that can be embedded into other strings.

      

      Strings with quoted Tokens in them can be restored back into

      complex values with the Tokens restored by calling `resolve()`

      on the string.



      :rtype: string


   .. py:attribute:: displayName

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.displayName>`

      A human-readable display hint for this Token.



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: valueOrFunction

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.valueOrFunction>`

      What this token will evaluate to, literal or function.



      :type: any *(readonly)*


PolicyProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: PolicyProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.PolicyProps;

      .. code-tab:: javascript

         // PolicyProps is an interface

      .. code-tab:: typescript

         import { PolicyProps } from '@aws-cdk/aws-iam';





   .. py:attribute:: groups

      Groups to attach this policy to. You can also use `attachToGroup(group)` to attach this policy to a group.



      :type: :py:class:`~@aws-cdk/aws-iam.Group`\ [] *(optional)* *(readonly)*


   .. py:attribute:: policyName

      The name of the policy.

      

      If you specify multiple policies for an entity,

      specify unique names. For example, if you specify a list of policies for

      an IAM role, each policy must have a unique name.



      :type: string *(optional)* *(readonly)*
      :default: Uses the logical ID of the policy resource, which is ensured to
be unique within the stack.


   .. py:attribute:: roles

      Roles to attach this policy to. You can also use `attachToRole(role)` to attach this policy to a role.



      :type: :py:class:`~@aws-cdk/aws-iam.IRole`\ [] *(optional)* *(readonly)*


   .. py:attribute:: statements

      Initial set of permissions to add to this policy document. You can also use `addPermission(statement)` to add permissions later.



      :type: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ [] *(optional)* *(readonly)*


   .. py:attribute:: users

      Users to attach this policy to. You can also use `attachToUser(user)` to attach this policy to a user.



      :type: :py:class:`~@aws-cdk/aws-iam.User`\ [] *(optional)* *(readonly)*


PolicyStatement
^^^^^^^^^^^^^^^

.. py:class:: PolicyStatement([effect])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.PolicyStatement;

      .. code-tab:: javascript

         const { PolicyStatement } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { PolicyStatement } from '@aws-cdk/aws-iam';



   Represents a statement in an IAM policy document.



   :extends: :py:class:`@aws-cdk/cdk.Token`\ 
   :param effect: 
   :type effect: :py:class:`~@aws-cdk/aws-iam.PolicyStatementEffect`\ 

   .. py:method:: addAccountRootPrincipal() -> @aws-cdk/aws-iam.PolicyStatement

      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addAction(action) -> @aws-cdk/aws-iam.PolicyStatement

      :param action: 
      :type action: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addActions(*actions) -> @aws-cdk/aws-iam.PolicyStatement

      :param \*actions: 
      :type \*actions: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addAllResources() -> @aws-cdk/aws-iam.PolicyStatement

      Adds a ``"*"`` resource to this statement.



      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addAnyPrincipal() -> @aws-cdk/aws-iam.PolicyStatement

      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addArnPrincipal(arn) -> @aws-cdk/aws-iam.PolicyStatement

      :param arn: 
      :type arn: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addAwsAccountPrincipal(accountId) -> @aws-cdk/aws-iam.PolicyStatement

      :param accountId: 
      :type accountId: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addAwsPrincipal(arn) -> @aws-cdk/aws-iam.PolicyStatement

      :param arn: 
      :type arn: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addCanonicalUserPrincipal(canonicalUserId) -> @aws-cdk/aws-iam.PolicyStatement

      :param canonicalUserId: 
      :type canonicalUserId: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addCondition(key, value) -> @aws-cdk/aws-iam.PolicyStatement

      Add a condition to the Policy.



      :param key: 
      :type key: string
      :param value: 
      :type value: any
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addConditions(conditions) -> @aws-cdk/aws-iam.PolicyStatement

      Add multiple conditions to the Policy.



      :param conditions: 
      :type conditions: string => any
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addFederatedPrincipal(federated, conditions) -> @aws-cdk/aws-iam.PolicyStatement

      :param federated: 
      :type federated: any
      :param conditions: 
      :type conditions: string => any
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addPrincipal(principal) -> @aws-cdk/aws-iam.PolicyStatement

      :param principal: 
      :type principal: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\ 
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addResource(arn) -> @aws-cdk/aws-iam.PolicyStatement

      :param arn: 
      :type arn: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addResources(*arns) -> @aws-cdk/aws-iam.PolicyStatement

      :param \*arns: 
      :type \*arns: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: addServicePrincipal(service, [opts]) -> @aws-cdk/aws-iam.PolicyStatement

      Adds a service principal to this policy statement.



      :param service: the service name for which a service principal is requested (e.g: `s3.amazonaws.com`).
      :type service: string
      :param opts: options for adding the service principal (such as specifying a principal in a different region).
      :type opts: :py:class:`~@aws-cdk/aws-iam.ServicePrincipalOpts`\ 
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: allow() -> @aws-cdk/aws-iam.PolicyStatement

      Sets the permission effect to allow access to resources.



      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: deny() -> @aws-cdk/aws-iam.PolicyStatement

      Sets the permission effect to deny access to resources.



      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: describe(sid) -> @aws-cdk/aws-iam.PolicyStatement

      :param sid: 
      :type sid: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: limitToAccount(accountId) -> @aws-cdk/aws-iam.PolicyStatement

      :param accountId: 
      :type accountId: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: resolve(_context) -> any

      *Overrides* :py:meth:`@aws-cdk/cdk.Token.resolve`

      :param _context: 
      :type _context: :py:class:`@aws-cdk/cdk.ResolveContext`\ 
      :rtype: any


   .. py:method:: setCondition(key, value) -> @aws-cdk/aws-iam.PolicyStatement

      Add a condition to the Policy.



      :param key: 
      :type key: string
      :param value: 
      :type value: any
      :rtype: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: toJson() -> any

      :rtype: any


   .. py:attribute:: hasPrincipal

      Indicates if this permission has a "Principal" section.



      :type: boolean *(readonly)*


   .. py:attribute:: hasResource

      Indicates if this permission as at least one resource associated with it.



      :type: boolean *(readonly)*


   .. py:attribute:: sid

      :type: string *(optional)*


   .. py:method:: toJSON() -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toJSON>`

      Turn this Token into JSON.

      

      This gets called by JSON.stringify(). We want to prohibit this, because

      it's not possible to do this properly, so we just throw an error here.



      :rtype: any


   .. py:method:: toList() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toList>`

      Return a string list representation of this token.

      

      Call this if the Token intrinsically evaluates to a list of strings.

      If so, you can represent the Token in a similar way in the type

      system.

      

      Note that even though the Token is represented as a list of strings, you

      still cannot do any operations on it such as concatenation, indexing,

      or taking its length. The only useful operations you can do to these lists

      is constructing a `FnJoin` or a `FnSelect` on it.



      :rtype: string[]


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toString>`

      Return a reversible string representation of this token.

      

      If the Token is initialized with a literal, the stringified value of the

      literal is returned. Otherwise, a special quoted string representation

      of the Token is returned that can be embedded into other strings.

      

      Strings with quoted Tokens in them can be restored back into

      complex values with the Tokens restored by calling `resolve()`

      on the string.



      :rtype: string


   .. py:attribute:: displayName

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.displayName>`

      A human-readable display hint for this Token.



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: valueOrFunction

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.valueOrFunction>`

      What this token will evaluate to, literal or function.



      :type: any *(readonly)*


PolicyStatementEffect (enum)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: PolicyStatementEffect

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.PolicyStatementEffect;

      .. code-tab:: javascript

         const { PolicyStatementEffect } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { PolicyStatementEffect } from '@aws-cdk/aws-iam';



   .. py:data:: Allow

   .. py:data:: Deny


PrincipalBase
^^^^^^^^^^^^^

.. py:class:: PrincipalBase()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.PrincipalBase;

      .. code-tab:: javascript

         const { PrincipalBase } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { PrincipalBase } from '@aws-cdk/aws-iam';



   Base class for policy principals.



   :implements: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\ 
   :abstract: Yes

   .. py:method:: addToPolicy(_statement) -> boolean

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.addToPolicy`

      Add to the policy of this principal.



      :param _statement: 
      :type _statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: toJSON() -> string => string[]

      :rtype: string => string[]


   .. py:method:: toString() -> string

      Returns a string representation of an object.



      :rtype: string


   .. py:attribute:: assumeRoleAction

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.assumeRoleAction`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Implements* :py:meth:`@aws-cdk/aws-iam.IGrantable.grantPrincipal`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.policyFragment`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)* *(abstract)*


PrincipalPolicyFragment
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: PrincipalPolicyFragment(principalJson, [conditions])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.PrincipalPolicyFragment;

      .. code-tab:: javascript

         const { PrincipalPolicyFragment } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { PrincipalPolicyFragment } from '@aws-cdk/aws-iam';



   A collection of the fields in a PolicyStatement that can be used to identify a principal.

   

   This consists of the JSON used in the "Principal" field, and optionally a

   set of "Condition"s that need to be applied to the policy.



   :param principalJson: 
   :type principalJson: string => string[]
   :param conditions: 
   :type conditions: string => any

   .. py:attribute:: conditions

      :type: string => any *(readonly)*


   .. py:attribute:: principalJson

      :type: string => string[] *(readonly)*


Role
^^^^

.. py:class:: Role(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.Role;

      .. code-tab:: javascript

         const { Role } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { Role } from '@aws-cdk/aws-iam';



   IAM Role.

   

   Defines an IAM role. The role is created with an assume policy document associated with

   the specified AWS service principal defined in `serviceAssumeRole`.



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :implements: :py:class:`~@aws-cdk/aws-iam.IRole`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-iam.RoleProps`\ 

   .. py:staticmethod:: import(scope, id, props) -> @aws-cdk/aws-iam.IRole

      Import a role that already exists.



      :param scope: 
      :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param id: 
      :type id: string
      :param props: 
      :type props: :py:class:`~@aws-cdk/aws-iam.RoleImportProps`\ 
      :rtype: :py:class:`~@aws-cdk/aws-iam.IRole`\ 


   .. py:method:: addToPolicy(statement) -> boolean

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.addToPolicy`

      Adds a permission to the role's default policy document. If there is no default policy attached to this role, it will be created.



      :param statement: The permission statement to add to the policy document.
      :type statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: attachInlinePolicy(policy)

      *Implements* :py:meth:`@aws-cdk/aws-iam.IIdentity.attachInlinePolicy`

      Attaches a policy to this role.



      :param policy: The policy to attach.
      :type policy: :py:class:`~@aws-cdk/aws-iam.Policy`\ 


   .. py:method:: attachManagedPolicy(arn)

      *Implements* :py:meth:`@aws-cdk/aws-iam.IIdentity.attachManagedPolicy`

      Attaches a managed policy to this role.



      :param arn: The ARN of the managed policy to attach.
      :type arn: string


   .. py:method:: export() -> @aws-cdk/aws-iam.RoleImportProps

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.export`

      Export this role to another stack.



      :rtype: :py:class:`~@aws-cdk/aws-iam.RoleImportProps`\ 


   .. py:method:: grant(grantee, *actions) -> @aws-cdk/aws-iam.Grant

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.grant`

      Grant the actions defined in actions to the identity Principal on this resource.



      :param grantee: 
      :type grantee: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\ 
      :param \*actions: 
      :type \*actions: string
      :rtype: :py:class:`~@aws-cdk/aws-iam.Grant`\ 


   .. py:method:: grantPassRole(identity) -> @aws-cdk/aws-iam.Grant

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.grantPassRole`

      Grant permissions to the given principal to pass this role.



      :param identity: 
      :type identity: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\ 
      :rtype: :py:class:`~@aws-cdk/aws-iam.Grant`\ 


   .. py:attribute:: assumeRoleAction

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.assumeRoleAction`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Implements* :py:meth:`@aws-cdk/aws-iam.IGrantable.grantPrincipal`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.policyFragment`

      Returns the role.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:attribute:: roleArn

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.roleArn`

      Returns the ARN of this role.



      :type: string *(readonly)*


   .. py:attribute:: roleId

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.roleId`

      Returns the stable and unique string identifying the role.

      

      For example,

      AIDAJQABLZS4A3QDU576Q.



      :type: string *(readonly)*


   .. py:attribute:: roleName

      *Implements* :py:meth:`@aws-cdk/aws-iam.IRole.roleName`

      Returns the name of the role.



      :type: string *(readonly)*


   .. py:attribute:: assumeRolePolicy

      The assume role policy document associated with this role.



      :type: :py:class:`~@aws-cdk/aws-iam.PolicyDocument`\  *(optional)* *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis.

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


RoleImportProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RoleImportProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.RoleImportProps;

      .. code-tab:: javascript

         // RoleImportProps is an interface

      .. code-tab:: typescript

         import { RoleImportProps } from '@aws-cdk/aws-iam';



   Properties to import a Role.





   .. py:attribute:: roleArn

      The role's ARN.



      :type: string *(readonly)*


   .. py:attribute:: roleId

      The stable and unique string identifying the role.

      

      For example,

      AIDAJQABLZS4A3QDU576Q.



      :type: string *(optional)* *(readonly)*
      :default: If "roleId" is not specified for an imported role, then
`role.roleId` will throw an exception. In most cases, role ID is not really needed.


RoleProps (interface)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RoleProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.RoleProps;

      .. code-tab:: javascript

         // RoleProps is an interface

      .. code-tab:: typescript

         import { RoleProps } from '@aws-cdk/aws-iam';





   .. py:attribute:: assumedBy

      The IAM principal (i.e. `new ServicePrincipal('sns.amazonaws.com')`) which can assume this role.

      

      You can later modify the assume role policy document by accessing it via

      the `assumeRolePolicy` property.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


   .. py:attribute:: externalId

      ID that the role assumer needs to provide when assuming this role.

      

      If the configured and provided external IDs do not match, the

      AssumeRole operation will fail.



      :type: string *(optional)* *(readonly)*
      :default: No external ID required


   .. py:attribute:: inlinePolicies

      A list of named policies to inline into this role.

      

      These policies will be

      created with the role, whereas those added by ``addToPolicy`` are added

      using a separate CloudFormation resource (allowing a way around circular

      dependencies that could otherwise be introduced).



      :type: string => :py:class:`~@aws-cdk/aws-iam.PolicyDocument`\  *(optional)* *(readonly)*
      :default: No policy is inlined in the Role resource.


   .. py:attribute:: managedPolicyArns

      A list of ARNs for managed policies associated with this role. You can add managed policies later using `attachManagedPolicy(arn)`.



      :type: string[] *(optional)* *(readonly)*
      :default: No managed policies.


   .. py:attribute:: maxSessionDurationSec

      The maximum session duration (in seconds) that you want to set for the specified role.

      

      If you do not specify a value for this setting, the

      default maximum of one hour is applied. This setting can have a value

      from 1 hour (3600sec) to 12 (43200sec) hours.

      

      Anyone who assumes the role from the AWS CLI or API can use the

      DurationSeconds API parameter or the duration-seconds CLI parameter to

      request a longer session. The MaxSessionDuration setting determines the

      maximum duration that can be requested using the DurationSeconds

      parameter.

      

      If users don't specify a value for the DurationSeconds parameter, their

      security credentials are valid for one hour by default. This applies when

      you use the AssumeRole* API operations or the assume-role* CLI operations

      but does not apply when you use those operations to create a console URL.



      :type: number *(optional)* *(readonly)*


   .. py:attribute:: path

      The path associated with this role.

      

      For information about IAM paths, see

      Friendly Names and Paths in IAM User Guide.



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: roleName

      A name for the IAM role.

      

      For valid values, see the RoleName parameter for

      the CreateRole action in the IAM API Reference. If you don't specify a

      name, AWS CloudFormation generates a unique physical ID and uses that ID

      for the group name.

      

      IMPORTANT: If you specify a name, you cannot perform updates that require

      replacement of this resource. You can perform updates that require no or

      some interruption. If you must replace the resource, specify a new name.

      

      If you specify a name, you must specify the CAPABILITY_NAMED_IAM value to

      acknowledge your template's capabilities. For more information, see

      Acknowledging IAM Resources in AWS CloudFormation Templates.



      :type: string *(optional)* *(readonly)*


ServicePrincipal
^^^^^^^^^^^^^^^^

.. py:class:: ServicePrincipal(service, [opts])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.ServicePrincipal;

      .. code-tab:: javascript

         const { ServicePrincipal } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { ServicePrincipal } from '@aws-cdk/aws-iam';



   An IAM principal that represents an AWS service (i.e. sqs.amazonaws.com).



   :extends: :py:class:`~@aws-cdk/aws-iam.PrincipalBase`\ 
   :param service: 
   :type service: string
   :param opts: 
   :type opts: :py:class:`~@aws-cdk/aws-iam.ServicePrincipalOpts`\ 

   .. py:method:: toString() -> string

      *Overrides* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.toString`

      Returns a string representation of an object.



      :rtype: string


   .. py:attribute:: opts

      :type: :py:class:`~@aws-cdk/aws-iam.ServicePrincipalOpts`\  *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.PrincipalBase.policyFragment`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:attribute:: service

      :type: string *(readonly)*


   .. py:method:: addToPolicy(_statement) -> boolean

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.addToPolicy>`

      Add to the policy of this principal.



      :param _statement: 
      :type _statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :rtype: boolean


   .. py:method:: toJSON() -> string => string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.toJSON>`

      :rtype: string => string[]


   .. py:attribute:: assumeRoleAction

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.assumeRoleAction>`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Inherited from* :py:attr:`@aws-cdk/aws-iam.PrincipalBase <@aws-cdk/aws-iam.PrincipalBase.grantPrincipal>`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


ServicePrincipalOpts (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ServicePrincipalOpts

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.ServicePrincipalOpts;

      .. code-tab:: javascript

         // ServicePrincipalOpts is an interface

      .. code-tab:: typescript

         import { ServicePrincipalOpts } from '@aws-cdk/aws-iam';



   Options for a service principal.





   .. py:attribute:: region

      The region in which the service is operating.



      :type: string *(optional)* *(readonly)*
      :default: the current Stack's region.


User
^^^^

.. py:class:: User(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.User;

      .. code-tab:: javascript

         const { User } = require('@aws-cdk/aws-iam');

      .. code-tab:: typescript

         import { User } from '@aws-cdk/aws-iam';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :implements: :py:class:`~@aws-cdk/aws-iam.IIdentity`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-iam.UserProps`\ 

   .. py:method:: addToGroup(group)

      Adds this user to a group.



      :param group: 
      :type group: :py:class:`~@aws-cdk/aws-iam.Group`\ 


   .. py:method:: addToPolicy(statement) -> boolean

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.addToPolicy`

      Adds an IAM statement to the default policy.



      :param statement: 
      :type statement: :py:class:`~@aws-cdk/aws-iam.PolicyStatement`\ 
      :return: true
      :rtype: boolean


   .. py:method:: attachInlinePolicy(policy)

      *Implements* :py:meth:`@aws-cdk/aws-iam.IIdentity.attachInlinePolicy`

      Attaches a policy to this user.



      :param policy: 
      :type policy: :py:class:`~@aws-cdk/aws-iam.Policy`\ 


   .. py:method:: attachManagedPolicy(arn)

      *Implements* :py:meth:`@aws-cdk/aws-iam.IIdentity.attachManagedPolicy`

      Attaches a managed policy to the user.



      :param arn: The ARN of the managed policy to attach.
      :type arn: string


   .. py:attribute:: assumeRoleAction

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.assumeRoleAction`

      When this Principal is used in an AssumeRole policy, the action to use.



      :type: string *(readonly)*


   .. py:attribute:: grantPrincipal

      *Implements* :py:meth:`@aws-cdk/aws-iam.IGrantable.grantPrincipal`

      The principal to grant permissions to.



      :type: :py:class:`~@aws-cdk/aws-iam.IPrincipal`\  *(readonly)*


   .. py:attribute:: policyFragment

      *Implements* :py:meth:`@aws-cdk/aws-iam.IPrincipal.policyFragment`

      Return the policy fragment that identifies this principal in a Policy.



      :type: :py:class:`~@aws-cdk/aws-iam.PrincipalPolicyFragment`\  *(readonly)*


   .. py:attribute:: userArn

      An attribute that represents the user's ARN.



      :type: string *(readonly)*


   .. py:attribute:: userName

      An attribute that represents the user name.



      :type: string *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis.

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable.

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


UserProps (interface)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: UserProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.IAM;

      .. code-tab:: java

         import software.amazon.awscdk.services.iam.UserProps;

      .. code-tab:: javascript

         // UserProps is an interface

      .. code-tab:: typescript

         import { UserProps } from '@aws-cdk/aws-iam';





   .. py:attribute:: groups

      Groups to add this user to.

      

      You can also use `addToGroup` to add this

      user to a group.



      :type: :py:class:`~@aws-cdk/aws-iam.Group`\ [] *(optional)* *(readonly)*


   .. py:attribute:: managedPolicyArns

      A list of ARNs for managed policies attacherd to this user. You can use `addManagedPolicy(arn)` to attach a managed policy to this user.



      :type: any[] *(optional)* *(readonly)*
      :default: No managed policies.


   .. py:attribute:: password

      The password for the user. This is required so the user can access the AWS Management Console.

      

      You can use `SecretValue.plainText` to specify a password in plain text or

      use `secretsmanager.Secret.import` to reference a secret in Secrets Manager.



      :type: :py:class:`@aws-cdk/cdk.SecretValue`\  *(optional)* *(readonly)*
      :default: User won't be able to access the management console without a password.


   .. py:attribute:: passwordResetRequired

      Specifies whether the user is required to set a new password the next time the user logs in to the AWS Management Console.

      

      If this is set to 'true', you must also specify "initialPassword".



      :type: boolean *(optional)* *(readonly)*
      :default: false


   .. py:attribute:: path

      The path for the user name.

      

      For more information about paths, see IAM

      Identifiers in the IAM User Guide.



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: userName

      A name for the IAM user.

      

      For valid values, see the UserName parameter for

      the CreateUser action in the IAM API Reference. If you don't specify a

      name, AWS CloudFormation generates a unique physical ID and uses that ID

      for the user name.

      

      If you specify a name, you cannot perform updates that require

      replacement of this resource. You can perform updates that require no or

      some interruption. If you must replace the resource, specify a new name.

      

      If you specify a name, you must specify the CAPABILITY_NAMED_IAM value to

      acknowledge your template's capabilities. For more information, see

      Acknowledging IAM Resources in AWS CloudFormation Templates.



      :type: string *(optional)* *(readonly)*
      :default: Generated by CloudFormation (recommended)


