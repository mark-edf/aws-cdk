.. @jsii-pacmak:meta@ {"fingerprint":"v+4V7uRAVf1trsJc/laW9IDLqchpOASkX58VvWf754I="}

@aws-cdk/assets
===============

.. mdinclude:: ./__aws-cdk_assets.README.md

Reference
---------

.. tabs::

   .. group-tab:: C#

      View in `Nuget <https://www.nuget.org/packages/Amazon.CDK.Assets/0.25.2>`_

      **csproj**:

      .. code-block:: xml

         <PackageReference Include="Amazon.CDK.Assets" Version="0.25.2" />

      **dotnet**:

      .. code-block:: console

         dotnet add package Amazon.CDK.Assets --version 0.25.2

      **packages.config**:

      .. code-block:: xml

         <package id="Amazon.CDK.Assets" version="0.25.2" />


   .. group-tab:: Java

      View in `Maven Central <https://repo1.maven.org/maven2/software/amazon/awscdk/cdk-assets/0.25.2/>`_

      **Apache Buildr**:

      .. code-block:: none

         'software.amazon.awscdk:cdk-assets:jar:0.25.2'

      **Apache Ivy**:

      .. code-block:: xml

         <dependency groupId="software.amazon.awscdk" name="cdk-assets" rev="0.25.2"/>

      **Apache Maven**:

      .. code-block:: xml

         <dependency>
           <groupId>software.amazon.awscdk</groupId>
           <artifactId>cdk-assets</artifactId>
           <version>0.25.2</version>
         </dependency>

      **Gradle / Grails**:

      .. code-block:: none

         compile 'software.amazon.awscdk:cdk-assets:0.25.2'

      **Groovy Grape**:

      .. code-block:: none

         @Grapes(
         @Grab(group='software.amazon.awscdk', module='cdk-assets', version='0.25.2')
         )


   .. group-tab:: JavaScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/assets/v/0.25.2>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/assets@0.25.2

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/assets": "^0.25.2"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/assets@0.25.2


   .. group-tab:: TypeScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/assets/v/0.25.2>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/assets@0.25.2

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/assets": "^0.25.2"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/assets@0.25.2



.. py:module:: @aws-cdk/assets

Asset
^^^^^

.. py:class:: Asset(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.Assets;

      .. code-tab:: java

         import software.amazon.awscdk.assets.Asset;

      .. code-tab:: javascript

         const { Asset } = require('@aws-cdk/assets');

      .. code-tab:: typescript

         import { Asset } from '@aws-cdk/assets';



   An asset represents a local file or directory, which is automatically uploaded to S3

   and then can be referenced within a CDK application.



   :extends: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/assets.GenericAssetProps`\ 

   .. py:method:: addResourceMetadata(resource, resourceProperty)

      Adds CloudFormation template metadata to the specified resource with

      information that indicates which resource property is mapped to this local

      asset. This can be used by tools such as SAM CLI to provide local

      experience such as local invocation and debugging of Lambda functions.

      

      Asset metadata will only be included if the stack is synthesized with the

      "aws:cdk:enable-asset-metadata" context key defined, which is the default

      behavior when synthesizing via the CDK Toolkit.



      :param resource: The CloudFormation resource which is using this asset.
      :type resource: :py:class:`@aws-cdk/cdk.Resource`\ 
      :param resourceProperty: The property name where this asset is referenced (e.g. "Code" for AWS::Lambda::Function)
      :type resourceProperty: string


   .. py:method:: grantRead([principal])

      Grants read permissions to the principal on the asset's S3 object.



      :param principal: 
      :type principal: :py:class:`@aws-cdk/aws-iam.IPrincipal`\  *(optional)*


   .. py:attribute:: assetPath

      Resolved full-path location of this asset.



      :type: string *(readonly)*


   .. py:attribute:: bucket

      The S3 bucket in which this asset resides.



      :type: :py:class:`@aws-cdk/aws-s3.IBucket`\  *(readonly)*


   .. py:attribute:: isZipArchive

      Indicates if this asset is a zip archive. Allows constructs to ensure that the

      correct file type was used.



      :type: boolean *(readonly)*


   .. py:attribute:: s3BucketName

      Attribute that represents the name of the bucket this asset exists in.



      :type: string *(readonly)*


   .. py:attribute:: s3ObjectKey

      Attribute which represents the S3 object key of this asset.



      :type: string *(readonly)*


   .. py:attribute:: s3Url

      Attribute which represents the S3 URL of this asset.



      :type: string *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


AssetPackaging (enum)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AssetPackaging

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.Assets;

      .. code-tab:: java

         import software.amazon.awscdk.assets.AssetPackaging;

      .. code-tab:: javascript

         const { AssetPackaging } = require('@aws-cdk/assets');

      .. code-tab:: typescript

         import { AssetPackaging } from '@aws-cdk/assets';



   Defines the way an asset is packaged before it is uploaded to S3.



   .. py:data:: ZipDirectory

   Path refers to a directory on disk, the contents of the directory is

   archived into a .zip.



   .. py:data:: File

   Path refers to a single file on disk. The file is uploaded as-is.




FileAsset
^^^^^^^^^

.. py:class:: FileAsset(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.Assets;

      .. code-tab:: java

         import software.amazon.awscdk.assets.FileAsset;

      .. code-tab:: javascript

         const { FileAsset } = require('@aws-cdk/assets');

      .. code-tab:: typescript

         import { FileAsset } from '@aws-cdk/assets';



   An asset that represents a file on disk.



   :extends: :py:class:`~@aws-cdk/assets.Asset`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/assets.FileAssetProps`\ 

   .. py:method:: addResourceMetadata(resource, resourceProperty)

      *Inherited from* :py:meth:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.addResourceMetadata>`

      Adds CloudFormation template metadata to the specified resource with

      information that indicates which resource property is mapped to this local

      asset. This can be used by tools such as SAM CLI to provide local

      experience such as local invocation and debugging of Lambda functions.

      

      Asset metadata will only be included if the stack is synthesized with the

      "aws:cdk:enable-asset-metadata" context key defined, which is the default

      behavior when synthesizing via the CDK Toolkit.



      :param resource: The CloudFormation resource which is using this asset.
      :type resource: :py:class:`@aws-cdk/cdk.Resource`\ 
      :param resourceProperty: The property name where this asset is referenced (e.g. "Code" for AWS::Lambda::Function)
      :type resourceProperty: string


   .. py:method:: grantRead([principal])

      *Inherited from* :py:meth:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.grantRead>`

      Grants read permissions to the principal on the asset's S3 object.



      :param principal: 
      :type principal: :py:class:`@aws-cdk/aws-iam.IPrincipal`\  *(optional)*


   .. py:attribute:: assetPath

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.assetPath>`

      Resolved full-path location of this asset.



      :type: string *(readonly)*


   .. py:attribute:: bucket

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.bucket>`

      The S3 bucket in which this asset resides.



      :type: :py:class:`@aws-cdk/aws-s3.IBucket`\  *(readonly)*


   .. py:attribute:: isZipArchive

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.isZipArchive>`

      Indicates if this asset is a zip archive. Allows constructs to ensure that the

      correct file type was used.



      :type: boolean *(readonly)*


   .. py:attribute:: s3BucketName

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.s3BucketName>`

      Attribute that represents the name of the bucket this asset exists in.



      :type: string *(readonly)*


   .. py:attribute:: s3ObjectKey

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.s3ObjectKey>`

      Attribute which represents the S3 object key of this asset.



      :type: string *(readonly)*


   .. py:attribute:: s3Url

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.s3Url>`

      Attribute which represents the S3 URL of this asset.



      :type: string *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


FileAssetProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: FileAssetProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.Assets;

      .. code-tab:: java

         import software.amazon.awscdk.assets.FileAssetProps;

      .. code-tab:: javascript

         // FileAssetProps is an interface

      .. code-tab:: typescript

         import { FileAssetProps } from '@aws-cdk/assets';





   .. py:attribute:: path

      File path.



      :type: string


   .. py:attribute:: readers

      A list of principals that should be able to read this file asset from S3.

      You can use `asset.grantRead(principal)` to grant read permissions later.



      :type: :py:class:`@aws-cdk/aws-iam.IPrincipal`\ [] *(optional)*


GenericAssetProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: GenericAssetProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.Assets;

      .. code-tab:: java

         import software.amazon.awscdk.assets.GenericAssetProps;

      .. code-tab:: javascript

         // GenericAssetProps is an interface

      .. code-tab:: typescript

         import { GenericAssetProps } from '@aws-cdk/assets';





   .. py:attribute:: packaging

      The packaging type for this asset.



      :type: :py:class:`~@aws-cdk/assets.AssetPackaging`\ 


   .. py:attribute:: path

      The disk location of the asset.



      :type: string


   .. py:attribute:: readers

      A list of principals that should be able to read this asset from S3.

      You can use `asset.grantRead(principal)` to grant read permissions later.



      :type: :py:class:`@aws-cdk/aws-iam.IPrincipal`\ [] *(optional)*


ZipDirectoryAsset
^^^^^^^^^^^^^^^^^

.. py:class:: ZipDirectoryAsset(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.Assets;

      .. code-tab:: java

         import software.amazon.awscdk.assets.ZipDirectoryAsset;

      .. code-tab:: javascript

         const { ZipDirectoryAsset } = require('@aws-cdk/assets');

      .. code-tab:: typescript

         import { ZipDirectoryAsset } from '@aws-cdk/assets';



   An asset that represents a ZIP archive of a directory on disk.



   :extends: :py:class:`~@aws-cdk/assets.Asset`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/assets.ZipDirectoryAssetProps`\ 

   .. py:method:: addResourceMetadata(resource, resourceProperty)

      *Inherited from* :py:meth:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.addResourceMetadata>`

      Adds CloudFormation template metadata to the specified resource with

      information that indicates which resource property is mapped to this local

      asset. This can be used by tools such as SAM CLI to provide local

      experience such as local invocation and debugging of Lambda functions.

      

      Asset metadata will only be included if the stack is synthesized with the

      "aws:cdk:enable-asset-metadata" context key defined, which is the default

      behavior when synthesizing via the CDK Toolkit.



      :param resource: The CloudFormation resource which is using this asset.
      :type resource: :py:class:`@aws-cdk/cdk.Resource`\ 
      :param resourceProperty: The property name where this asset is referenced (e.g. "Code" for AWS::Lambda::Function)
      :type resourceProperty: string


   .. py:method:: grantRead([principal])

      *Inherited from* :py:meth:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.grantRead>`

      Grants read permissions to the principal on the asset's S3 object.



      :param principal: 
      :type principal: :py:class:`@aws-cdk/aws-iam.IPrincipal`\  *(optional)*


   .. py:attribute:: assetPath

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.assetPath>`

      Resolved full-path location of this asset.



      :type: string *(readonly)*


   .. py:attribute:: bucket

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.bucket>`

      The S3 bucket in which this asset resides.



      :type: :py:class:`@aws-cdk/aws-s3.IBucket`\  *(readonly)*


   .. py:attribute:: isZipArchive

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.isZipArchive>`

      Indicates if this asset is a zip archive. Allows constructs to ensure that the

      correct file type was used.



      :type: boolean *(readonly)*


   .. py:attribute:: s3BucketName

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.s3BucketName>`

      Attribute that represents the name of the bucket this asset exists in.



      :type: string *(readonly)*


   .. py:attribute:: s3ObjectKey

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.s3ObjectKey>`

      Attribute which represents the S3 object key of this asset.



      :type: string *(readonly)*


   .. py:attribute:: s3Url

      *Inherited from* :py:attr:`@aws-cdk/assets.Asset <@aws-cdk/assets.Asset.s3Url>`

      Attribute which represents the S3 URL of this asset.



      :type: string *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


ZipDirectoryAssetProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ZipDirectoryAssetProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.Assets;

      .. code-tab:: java

         import software.amazon.awscdk.assets.ZipDirectoryAssetProps;

      .. code-tab:: javascript

         // ZipDirectoryAssetProps is an interface

      .. code-tab:: typescript

         import { ZipDirectoryAssetProps } from '@aws-cdk/assets';





   .. py:attribute:: path

      Path of the directory.



      :type: string


   .. py:attribute:: readers

      A list of principals that should be able to read this ZIP file from S3.

      You can use `asset.grantRead(principal)` to grant read permissions later.



      :type: :py:class:`@aws-cdk/aws-iam.IPrincipal`\ [] *(optional)*


