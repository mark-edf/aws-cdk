.. @jsii-pacmak:meta@ {"fingerprint":"haeWr674JiPOFjhGGxCG7qS3vkd4rukMTdHMRDpNNSE="}

@aws-cdk/aws-ecr
================

.. mdinclude:: ./__aws-cdk_aws-ecr.README.md

Reference
---------

.. tabs::

   .. group-tab:: C#

      View in `Nuget <https://www.nuget.org/packages/Amazon.CDK.AWS.ECR/0.28.0>`_

      **csproj**:

      .. code-block:: xml

         <PackageReference Include="Amazon.CDK.AWS.ECR" Version="0.28.0" />

      **dotnet**:

      .. code-block:: console

         dotnet add package Amazon.CDK.AWS.ECR --version 0.28.0

      **packages.config**:

      .. code-block:: xml

         <package id="Amazon.CDK.AWS.ECR" version="0.28.0" />


   .. group-tab:: Java

      View in `Maven Central <https://repo1.maven.org/maven2/software/amazon/awscdk/ecr/0.28.0/>`_

      **Apache Buildr**:

      .. code-block:: none

         'software.amazon.awscdk:ecr:jar:0.28.0'

      **Apache Ivy**:

      .. code-block:: xml

         <dependency groupId="software.amazon.awscdk" name="ecr" rev="0.28.0"/>

      **Apache Maven**:

      .. code-block:: xml

         <dependency>
           <groupId>software.amazon.awscdk</groupId>
           <artifactId>ecr</artifactId>
           <version>0.28.0</version>
         </dependency>

      **Gradle / Grails**:

      .. code-block:: none

         compile 'software.amazon.awscdk:ecr:0.28.0'

      **Groovy Grape**:

      .. code-block:: none

         @Grapes(
         @Grab(group='software.amazon.awscdk', module='ecr', version='0.28.0')
         )


   .. group-tab:: JavaScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-ecr/v/0.28.0>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-ecr@0.28.0

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-ecr": "^0.28.0"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-ecr@0.28.0


   .. group-tab:: TypeScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-ecr/v/0.28.0>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-ecr@0.28.0

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-ecr": "^0.28.0"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-ecr@0.28.0



.. py:module:: @aws-cdk/aws-ecr

CfnRepository
^^^^^^^^^^^^^

.. py:class:: CfnRepository(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.ECR;

      .. code-tab:: java

         import software.amazon.awscdk.services.ecr.CfnRepository;

      .. code-tab:: javascript

         const { CfnRepository } = require('@aws-cdk/aws-ecr');

      .. code-tab:: typescript

         import { CfnRepository } from '@aws-cdk/aws-ecr';



   A CloudFormation `AWS::ECR::Repository`



   :extends: :py:class:`@aws-cdk/cdk.CfnResource`\ 
   :param scope: - scope in which this resource is defined
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: - scoped id of the resource
   :type id: string
   :param props: - resource properties
   :type props: :py:class:`~@aws-cdk/aws-ecr.CfnRepositoryProps`\  *(optional)*

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.CfnResource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-ecr.CfnRepositoryProps`\  *(readonly)*


   .. py:attribute:: repositoryArn

      :type: string *(readonly)*


   .. py:attribute:: repositoryName

      :type: string *(readonly)*

   .. py:class:: LifecyclePolicyProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.ECR;

         .. code-tab:: java

            import software.amazon.awscdk.services.ecr.CfnRepository.LifecyclePolicyProperty;

         .. code-tab:: javascript

            // CfnRepository.LifecyclePolicyProperty is an interface

         .. code-tab:: typescript

            import { CfnRepository.LifecyclePolicyProperty } from '@aws-cdk/aws-ecr';





      .. py:attribute:: lifecyclePolicyText

         `CfnRepository.LifecyclePolicyProperty.LifecyclePolicyText`



         :type: string *(optional)* *(readonly)*


      .. py:attribute:: registryId

         `CfnRepository.LifecyclePolicyProperty.RegistryId`



         :type: string *(optional)* *(readonly)*



   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.prepare>`

      Automatically detect references in this CfnElement



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.logicalId>`

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnElement <@aws-cdk/cdk.CfnElement.stackPath>`

      Return the path with respect to the stack



      :type: string *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:attribute:: referenceToken

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnRefElement <@aws-cdk/cdk.CfnRefElement.referenceToken>`

      Return a token that will CloudFormation { Ref } this stack element



      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Token`\  *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned

      unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.CfnResource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addOverride>`

      Adds an override to the synthesized CloudFormation resource. To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types. Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value. Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property
      :type propertyPath: string
      :param value: The value
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.getAtt>`

      Returns a token for an runtime attribute of this resource.

      Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility

      in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.IResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnResource <@aws-cdk/cdk.CfnResource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


CfnRepositoryProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnRepositoryProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.ECR;

      .. code-tab:: java

         import software.amazon.awscdk.services.ecr.CfnRepositoryProps;

      .. code-tab:: javascript

         // CfnRepositoryProps is an interface

      .. code-tab:: typescript

         import { CfnRepositoryProps } from '@aws-cdk/aws-ecr';



   Properties for defining a `AWS::ECR::Repository`





   .. py:attribute:: lifecyclePolicy

      `AWS::ECR::Repository.LifecyclePolicy`



      :type: :py:class:`~@aws-cdk/aws-ecr.CfnRepository.LifecyclePolicyProperty`\  or :py:class:`@aws-cdk/cdk.Token`\  *(optional)* *(readonly)*


   .. py:attribute:: repositoryName

      `AWS::ECR::Repository.RepositoryName`



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: repositoryPolicyText

      `AWS::ECR::Repository.RepositoryPolicyText`



      :type: json or :py:class:`@aws-cdk/cdk.Token`\  *(optional)* *(readonly)*


CountType (enum)
^^^^^^^^^^^^^^^^

.. py:class:: CountType

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.ECR;

      .. code-tab:: java

         import software.amazon.awscdk.services.ecr.CountType;

      .. code-tab:: javascript

         const { CountType } = require('@aws-cdk/aws-ecr');

      .. code-tab:: typescript

         import { CountType } from '@aws-cdk/aws-ecr';



   Select images based on counts



   .. py:data:: ImageCountMoreThan

   Set a limit on the number of images in your repository



   .. py:data:: SinceImagePushed

   Set an age limit on the images in your repository




IRepository (interface)
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IRepository

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.ECR;

      .. code-tab:: java

         import software.amazon.awscdk.services.ecr.IRepository;

      .. code-tab:: javascript

         // IRepository is an interface

      .. code-tab:: typescript

         import { IRepository } from '@aws-cdk/aws-ecr';



   Represents an ECR repository.



   :extends: :py:class:`@aws-cdk/cdk.IConstruct`\ 


   .. py:attribute:: repositoryArn

      The ARN of the repository



      :type: string *(readonly)*


   .. py:attribute:: repositoryName

      The name of the repository



      :type: string *(readonly)*


   .. py:attribute:: repositoryUri

      The URI of this repository (represents the latest image):

      

          ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY



      :type: string *(readonly)*


   .. py:method:: addToResourcePolicy(statement)

      Add a policy statement to the repository's resource policy



      :param statement: 
      :type statement: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ 
      :abstract: Yes


   .. py:method:: export() -> @aws-cdk/aws-ecr.RepositoryImportProps

      Export this repository from the stack



      :rtype: :py:class:`~@aws-cdk/aws-ecr.RepositoryImportProps`\ 
      :abstract: Yes


   .. py:method:: grant(grantee, *actions) -> @aws-cdk/aws-iam.Grant

      Grant the given principal identity permissions to perform the actions on this repository



      :param grantee: 
      :type grantee: :py:class:`@aws-cdk/aws-iam.IGrantable`\ 
      :param \*actions: 
      :type \*actions: string
      :rtype: :py:class:`@aws-cdk/aws-iam.Grant`\ 
      :abstract: Yes


   .. py:method:: grantPull(grantee) -> @aws-cdk/aws-iam.Grant

      Grant the given identity permissions to pull images in this repository.



      :param grantee: 
      :type grantee: :py:class:`@aws-cdk/aws-iam.IGrantable`\ 
      :rtype: :py:class:`@aws-cdk/aws-iam.Grant`\ 
      :abstract: Yes


   .. py:method:: grantPullPush(grantee) -> @aws-cdk/aws-iam.Grant

      Grant the given identity permissions to pull and push images to this repository.



      :param grantee: 
      :type grantee: :py:class:`@aws-cdk/aws-iam.IGrantable`\ 
      :rtype: :py:class:`@aws-cdk/aws-iam.Grant`\ 
      :abstract: Yes


   .. py:method:: onImagePushed(name, [target, [imageTag]]) -> @aws-cdk/aws-events.EventRule

      Defines an AWS CloudWatch event rule that can trigger a target when an image is pushed to this

      repository.



      :param name: The name of the rule
      :type name: string
      :param target: An IEventRuleTarget to invoke when this event happens (you can add more targets using `addTarget`)
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  *(optional)*
      :param imageTag: Only trigger on the specific image tag
      :type imageTag: string *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 
      :abstract: Yes


   .. py:method:: repositoryUriForTag([tag]) -> string

      Returns the URI of the repository for a certain tag. Can be used in `docker push/pull`.

      

          ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY[:TAG]



      :param tag: Image tag to use (tools usually default to "latest" if omitted)
      :type tag: string *(optional)*
      :rtype: string
      :abstract: Yes


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.IConstruct <@aws-cdk/cdk.IConstruct.node>`

      The construct node in the scope tree.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.IDependable <@aws-cdk/cdk.IDependable.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


LifecycleRule (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: LifecycleRule

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.ECR;

      .. code-tab:: java

         import software.amazon.awscdk.services.ecr.LifecycleRule;

      .. code-tab:: javascript

         // LifecycleRule is an interface

      .. code-tab:: typescript

         import { LifecycleRule } from '@aws-cdk/aws-ecr';



   An ECR life cycle rule





   .. py:attribute:: description

      Describes the purpose of the rule



      :type: string *(optional)* *(readonly)*
      :default: No description


   .. py:attribute:: maxImageAgeDays

      The maximum age of images to retain

      

      Specify exactly one of maxImageCount and maxImageAgeDays.



      :type: number *(optional)* *(readonly)*


   .. py:attribute:: maxImageCount

      The maximum number of images to retain

      

      Specify exactly one of maxImageCount and maxImageAgeDays.



      :type: number *(optional)* *(readonly)*


   .. py:attribute:: rulePriority

      Controls the order in which rules are evaluated (low to high)

      

      All rules must have a unique priority, where lower numbers have

      higher precedence. The first rule that matches is applied to an image.

      

      There can only be one rule with a tagStatus of Any, and it must have

      the highest rulePriority.

      

      All rules without a specified priority will have incrementing priorities

      automatically assigned to them, higher than any rules that DO have priorities.



      :type: number *(optional)* *(readonly)*
      :default: Automatically assigned


   .. py:attribute:: tagPrefixList

      Select images that have ALL the given prefixes in their tag.

      

      Only if tagStatus == TagStatus.Tagged



      :type: string[] *(optional)* *(readonly)*


   .. py:attribute:: tagStatus

      Select images based on tags

      

      Only one rule is allowed to select untagged images, and it must

      have the highest rulePriority.



      :type: :py:class:`~@aws-cdk/aws-ecr.TagStatus`\  *(optional)* *(readonly)*
      :default: TagStatus.Tagged if tagPrefixList is given, TagStatus.Any otherwise


Repository
^^^^^^^^^^

.. py:class:: Repository(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.ECR;

      .. code-tab:: java

         import software.amazon.awscdk.services.ecr.Repository;

      .. code-tab:: javascript

         const { Repository } = require('@aws-cdk/aws-ecr');

      .. code-tab:: typescript

         import { Repository } from '@aws-cdk/aws-ecr';



   Define an ECR repository



   :extends: :py:class:`~@aws-cdk/aws-ecr.RepositoryBase`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-ecr.RepositoryProps`\  *(optional)*

   .. py:method:: addLifecycleRule(rule)

      Add a life cycle rule to the repository

      

      Life cycle rules automatically expire images from the repository that match

      certain conditions.



      :param rule: 
      :type rule: :py:class:`~@aws-cdk/aws-ecr.LifecycleRule`\ 


   .. py:method:: addToResourcePolicy(statement)

      *Implements* :py:meth:`@aws-cdk/aws-ecr.RepositoryBase.addToResourcePolicy`

      Add a policy statement to the repository's resource policy



      :param statement: 
      :type statement: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: export() -> @aws-cdk/aws-ecr.RepositoryImportProps

      *Implements* :py:meth:`@aws-cdk/aws-ecr.RepositoryBase.export`

      Export this repository from the stack



      :rtype: :py:class:`~@aws-cdk/aws-ecr.RepositoryImportProps`\ 


   .. py:attribute:: repositoryArn

      *Implements* :py:meth:`@aws-cdk/aws-ecr.RepositoryBase.repositoryArn`

      The ARN of the repository



      :type: string *(readonly)*


   .. py:attribute:: repositoryName

      *Implements* :py:meth:`@aws-cdk/aws-ecr.RepositoryBase.repositoryName`

      The name of the repository



      :type: string *(readonly)*


   .. py:method:: grant(grantee, *actions) -> @aws-cdk/aws-iam.Grant

      *Inherited from* :py:meth:`@aws-cdk/aws-ecr.RepositoryBase <@aws-cdk/aws-ecr.RepositoryBase.grant>`

      Grant the given principal identity permissions to perform the actions on this repository



      :param grantee: 
      :type grantee: :py:class:`@aws-cdk/aws-iam.IGrantable`\ 
      :param \*actions: 
      :type \*actions: string
      :rtype: :py:class:`@aws-cdk/aws-iam.Grant`\ 


   .. py:method:: grantPull(grantee) -> @aws-cdk/aws-iam.Grant

      *Inherited from* :py:meth:`@aws-cdk/aws-ecr.RepositoryBase <@aws-cdk/aws-ecr.RepositoryBase.grantPull>`

      Grant the given identity permissions to use the images in this repository



      :param grantee: 
      :type grantee: :py:class:`@aws-cdk/aws-iam.IGrantable`\ 
      :rtype: :py:class:`@aws-cdk/aws-iam.Grant`\ 


   .. py:method:: grantPullPush(grantee) -> @aws-cdk/aws-iam.Grant

      *Inherited from* :py:meth:`@aws-cdk/aws-ecr.RepositoryBase <@aws-cdk/aws-ecr.RepositoryBase.grantPullPush>`

      Grant the given identity permissions to pull and push images to this repository.



      :param grantee: 
      :type grantee: :py:class:`@aws-cdk/aws-iam.IGrantable`\ 
      :rtype: :py:class:`@aws-cdk/aws-iam.Grant`\ 


   .. py:method:: onImagePushed(name, [target, [imageTag]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-ecr.RepositoryBase <@aws-cdk/aws-ecr.RepositoryBase.onImagePushed>`

      Defines an AWS CloudWatch event rule that can trigger a target when an image is pushed to this

      repository.



      :param name: The name of the rule
      :type name: string
      :param target: An IEventRuleTarget to invoke when this event happens (you can add more targets using `addTarget`)
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  *(optional)*
      :param imageTag: Only trigger on the specific image tag
      :type imageTag: string *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: repositoryUriForTag([tag]) -> string

      *Inherited from* :py:meth:`@aws-cdk/aws-ecr.RepositoryBase <@aws-cdk/aws-ecr.RepositoryBase.repositoryUriForTag>`

      Returns the URL of the repository. Can be used in `docker push/pull`.

      

          ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY[:TAG]



      :param tag: Optional image tag
      :type tag: string *(optional)*
      :rtype: string


   .. py:attribute:: repositoryUri

      *Inherited from* :py:attr:`@aws-cdk/aws-ecr.RepositoryBase <@aws-cdk/aws-ecr.RepositoryBase.repositoryUri>`

      The URI of this repository (represents the latest image):

      

          ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY



      :type: string *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


RepositoryBase
^^^^^^^^^^^^^^

.. py:class:: RepositoryBase(scope, id)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.ECR;

      .. code-tab:: java

         import software.amazon.awscdk.services.ecr.RepositoryBase;

      .. code-tab:: javascript

         const { RepositoryBase } = require('@aws-cdk/aws-ecr');

      .. code-tab:: typescript

         import { RepositoryBase } from '@aws-cdk/aws-ecr';



   Base class for ECR repository. Reused between imported repositories and owned repositories.



   :extends: :py:class:`@aws-cdk/cdk.Construct`\ 
   :implements: :py:class:`~@aws-cdk/aws-ecr.IRepository`\ 
   :abstract: Yes
   :param scope: The scope in which to define this construct
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: The scoped construct ID. Must be unique amongst siblings. If the ID includes a path separator (`/`), then it will be replaced by double dash `--`.
   :type id: string

   .. py:staticmethod:: arnForLocalRepository(repositoryName, scope) -> string

      Returns an ECR ARN for a repository that resides in the same account/region

      as the current stack.



      :param repositoryName: 
      :type repositoryName: string
      :param scope: 
      :type scope: :py:class:`@aws-cdk/cdk.IConstruct`\ 
      :rtype: string


   .. py:staticmethod:: import(scope, id, props) -> @aws-cdk/aws-ecr.IRepository

      Import a repository



      :param scope: 
      :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param id: 
      :type id: string
      :param props: 
      :type props: :py:class:`~@aws-cdk/aws-ecr.RepositoryImportProps`\ 
      :rtype: :py:class:`~@aws-cdk/aws-ecr.IRepository`\ 


   .. py:method:: addToResourcePolicy(statement)

      *Implements* :py:meth:`@aws-cdk/aws-ecr.IRepository.addToResourcePolicy`

      Add a policy statement to the repository's resource policy



      :param statement: 
      :type statement: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ 
      :abstract: Yes


   .. py:method:: export() -> @aws-cdk/aws-ecr.RepositoryImportProps

      *Implements* :py:meth:`@aws-cdk/aws-ecr.IRepository.export`

      Export this repository from the stack



      :rtype: :py:class:`~@aws-cdk/aws-ecr.RepositoryImportProps`\ 
      :abstract: Yes


   .. py:method:: grant(grantee, *actions) -> @aws-cdk/aws-iam.Grant

      *Implements* :py:meth:`@aws-cdk/aws-ecr.IRepository.grant`

      Grant the given principal identity permissions to perform the actions on this repository



      :param grantee: 
      :type grantee: :py:class:`@aws-cdk/aws-iam.IGrantable`\ 
      :param \*actions: 
      :type \*actions: string
      :rtype: :py:class:`@aws-cdk/aws-iam.Grant`\ 


   .. py:method:: grantPull(grantee) -> @aws-cdk/aws-iam.Grant

      *Implements* :py:meth:`@aws-cdk/aws-ecr.IRepository.grantPull`

      Grant the given identity permissions to use the images in this repository



      :param grantee: 
      :type grantee: :py:class:`@aws-cdk/aws-iam.IGrantable`\ 
      :rtype: :py:class:`@aws-cdk/aws-iam.Grant`\ 


   .. py:method:: grantPullPush(grantee) -> @aws-cdk/aws-iam.Grant

      *Implements* :py:meth:`@aws-cdk/aws-ecr.IRepository.grantPullPush`

      Grant the given identity permissions to pull and push images to this repository.



      :param grantee: 
      :type grantee: :py:class:`@aws-cdk/aws-iam.IGrantable`\ 
      :rtype: :py:class:`@aws-cdk/aws-iam.Grant`\ 


   .. py:method:: onImagePushed(name, [target, [imageTag]]) -> @aws-cdk/aws-events.EventRule

      *Implements* :py:meth:`@aws-cdk/aws-ecr.IRepository.onImagePushed`

      Defines an AWS CloudWatch event rule that can trigger a target when an image is pushed to this

      repository.



      :param name: The name of the rule
      :type name: string
      :param target: An IEventRuleTarget to invoke when this event happens (you can add more targets using `addTarget`)
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  *(optional)*
      :param imageTag: Only trigger on the specific image tag
      :type imageTag: string *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: repositoryUriForTag([tag]) -> string

      *Implements* :py:meth:`@aws-cdk/aws-ecr.IRepository.repositoryUriForTag`

      Returns the URL of the repository. Can be used in `docker push/pull`.

      

          ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY[:TAG]



      :param tag: Optional image tag
      :type tag: string *(optional)*
      :rtype: string


   .. py:attribute:: repositoryArn

      *Implements* :py:meth:`@aws-cdk/aws-ecr.IRepository.repositoryArn`

      The ARN of the repository



      :type: string *(readonly)* *(abstract)*


   .. py:attribute:: repositoryName

      *Implements* :py:meth:`@aws-cdk/aws-ecr.IRepository.repositoryName`

      The name of the repository



      :type: string *(readonly)* *(abstract)*


   .. py:attribute:: repositoryUri

      *Implements* :py:meth:`@aws-cdk/aws-ecr.IRepository.repositoryUri`

      The URI of this repository (represents the latest image):

      

          ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY



      :type: string *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


RepositoryImportProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RepositoryImportProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.ECR;

      .. code-tab:: java

         import software.amazon.awscdk.services.ecr.RepositoryImportProps;

      .. code-tab:: javascript

         // RepositoryImportProps is an interface

      .. code-tab:: typescript

         import { RepositoryImportProps } from '@aws-cdk/aws-ecr';





   .. py:attribute:: repositoryArn

      The ARN of the repository to import.

      

      At least one of `repositoryArn` or `repositoryName` is required.



      :type: string *(optional)* *(readonly)*
      :default: If you only have a repository name and the repository is in the same
account/region as the current stack, you can set `repositoryName` instead
and the ARN will be formatted with the current region and account.


   .. py:attribute:: repositoryName

      The full name of the repository to import.

      

      This is only needed if the repository ARN is not a concrete string, in which

      case it is impossible to safely parse the ARN and extract full repository

      names from it if it includes multiple components (e.g. `foo/bar/myrepo`).

      

      If the repository is in the same region/account as the stack, it is sufficient

      to only specify the repository name.



      :type: string *(optional)* *(readonly)*


RepositoryProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RepositoryProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.ECR;

      .. code-tab:: java

         import software.amazon.awscdk.services.ecr.RepositoryProps;

      .. code-tab:: javascript

         // RepositoryProps is an interface

      .. code-tab:: typescript

         import { RepositoryProps } from '@aws-cdk/aws-ecr';





   .. py:attribute:: lifecycleRegistryId

      The AWS account ID associated with the registry that contains the repository.



      :type: string *(optional)* *(readonly)*
      :default: The default registry is assumed.


   .. py:attribute:: lifecycleRules

      Life cycle rules to apply to this registry



      :type: :py:class:`~@aws-cdk/aws-ecr.LifecycleRule`\ [] *(optional)* *(readonly)*
      :default: No life cycle rules


   .. py:attribute:: repositoryName

      Name for this repository



      :type: string *(optional)* *(readonly)*
      :default: Automatically generated name.


   .. py:attribute:: retain

      Retain the repository on stack deletion

      

      If you don't set this to true, the registry must be empty, otherwise

      your stack deletion will fail.



      :type: boolean *(optional)* *(readonly)*
      :default: false


TagStatus (enum)
^^^^^^^^^^^^^^^^

.. py:class:: TagStatus

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.ECR;

      .. code-tab:: java

         import software.amazon.awscdk.services.ecr.TagStatus;

      .. code-tab:: javascript

         const { TagStatus } = require('@aws-cdk/aws-ecr');

      .. code-tab:: typescript

         import { TagStatus } from '@aws-cdk/aws-ecr';



   Select images based on tags



   .. py:data:: Any

   Rule applies to all images



   .. py:data:: Tagged

   Rule applies to tagged images



   .. py:data:: Untagged

   Rule applies to untagged images




