.. @jsii-pacmak:meta@ {"fingerprint":"G2LpxbazuQ45NeyG5EkrAzYcHdsT0WNCcbN0J1/4LKc="}

@aws-cdk/cdk
============

.. mdinclude:: ./__aws-cdk_cdk.README.md

Reference
---------

.. tabs::

   .. group-tab:: C#

      View in `Nuget <https://www.nuget.org/packages/Amazon.CDK/0.24.1>`_

      **csproj**:

      .. code-block:: xml

         <PackageReference Include="Amazon.CDK" Version="0.24.1" />

      **dotnet**:

      .. code-block:: console

         dotnet add package Amazon.CDK --version 0.24.1

      **packages.config**:

      .. code-block:: xml

         <package id="Amazon.CDK" version="0.24.1" />


   .. group-tab:: Java

      View in `Maven Central <https://repo1.maven.org/maven2/software/amazon/awscdk/cdk/0.24.1/>`_

      **Apache Buildr**:

      .. code-block:: none

         'software.amazon.awscdk:cdk:jar:0.24.1'

      **Apache Ivy**:

      .. code-block:: xml

         <dependency groupId="software.amazon.awscdk" name="cdk" rev="0.24.1"/>

      **Apache Maven**:

      .. code-block:: xml

         <dependency>
           <groupId>software.amazon.awscdk</groupId>
           <artifactId>cdk</artifactId>
           <version>0.24.1</version>
         </dependency>

      **Gradle / Grails**:

      .. code-block:: none

         compile 'software.amazon.awscdk:cdk:0.24.1'

      **Groovy Grape**:

      .. code-block:: none

         @Grapes(
         @Grab(group='software.amazon.awscdk', module='cdk', version='0.24.1')
         )


   .. group-tab:: JavaScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/cdk/v/0.24.1>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/cdk@0.24.1

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/cdk": "^0.24.1"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/cdk@0.24.1


   .. group-tab:: TypeScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/cdk/v/0.24.1>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/cdk@0.24.1

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/cdk": "^0.24.1"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/cdk@0.24.1



.. py:module:: @aws-cdk/cdk

App
^^^

.. py:class:: App()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.App;

      .. code-tab:: javascript

         const { App } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { App } from '@aws-cdk/cdk';



   Represents a CDK program.



   :extends: :py:class:`~@aws-cdk/cdk.Root`\ 

   .. py:method:: collectMetadata(stack) -> string => @aws-cdk/cdk.MetadataEntry[]

      Returns metadata for all constructs in the stack.



      :param stack: 
      :type stack: :py:class:`~@aws-cdk/cdk.Stack`\ 
      :rtype: string => :py:class:`~@aws-cdk/cdk.MetadataEntry`\ []


   .. py:method:: run()

      Runs the program. Output is written to output directory as specified in the request.





   .. py:method:: synthesizeStack(stackName) -> @aws-cdk/cx-api.SynthesizedStack

      Synthesize and validate a single stack



      :param stackName: The name of the stack to synthesize
      :type stackName: string
      :rtype: :py:class:`@aws-cdk/cx-api.SynthesizedStack`\ 


   .. py:method:: synthesizeStacks(stackNames) -> @aws-cdk/cx-api.SynthesizedStack[]

      Synthesizes multiple stacks



      :param stackNames: 
      :type stackNames: string[]
      :rtype: :py:class:`@aws-cdk/cx-api.SynthesizedStack`\ []


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


ArnComponents (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ArnComponents

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ArnComponents;

      .. code-tab:: javascript

         // ArnComponents is an interface

      .. code-tab:: typescript

         import { ArnComponents } from '@aws-cdk/cdk';





   .. py:attribute:: resource

      Resource type (e.g. "table", "autoScalingGroup", "certificate").

      For some resource types, e.g. S3 buckets, this field defines the bucket name.



      :type: string


   .. py:attribute:: service

      The service namespace that identifies the AWS product (for example,

      's3', 'iam', 'codepipline').



      :type: string


   .. py:attribute:: account

      The ID of the AWS account that owns the resource, without the hyphens.

      For example, 123456789012. Note that the ARNs for some resources don't

      require an account number, so this component might be omitted.



      :type: string *(optional)*
      :default: The account the stack is deployed to.


   .. py:attribute:: partition

      The partition that the resource is in. For standard AWS regions, the

      partition is aws. If you have resources in other partitions, the

      partition is aws-partitionname. For example, the partition for resources

      in the China (Beijing) region is aws-cn.



      :type: string *(optional)*
      :default: The AWS partition the stack is deployed to.


   .. py:attribute:: region

      The region the resource resides in. Note that the ARNs for some resources

      do not require a region, so this component might be omitted.



      :type: string *(optional)*
      :default: The region the stack is deployed to.


   .. py:attribute:: resourceName

      Resource name or path within the resource (i.e. S3 bucket object key) or

      a wildcard such as ``"*"``. This is service-dependent.



      :type: string *(optional)*


   .. py:attribute:: sep

      Separator between resource type and the resource.

      

      Can be either '/' or ':'. Will only be used if path is defined.



      :type: string *(optional)*
      :default: '/'


AutoScalingCreationPolicy (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AutoScalingCreationPolicy

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.AutoScalingCreationPolicy;

      .. code-tab:: javascript

         // AutoScalingCreationPolicy is an interface

      .. code-tab:: typescript

         import { AutoScalingCreationPolicy } from '@aws-cdk/cdk';



   For an Auto Scaling group replacement update, specifies how many instances must signal success for the

   update to succeed.





   .. py:attribute:: minSuccessfulInstancesPercent

      Specifies the percentage of instances in an Auto Scaling replacement update that must signal success for the

      update to succeed. You can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent.

      For example, if you update five instances with a minimum successful percentage of 50, three instances must signal success.

      If an instance doesn't send a signal within the time specified by the Timeout property, AWS CloudFormation assumes that the

      instance wasn't created.



      :type: number *(optional)*


AutoScalingReplacingUpdate (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AutoScalingReplacingUpdate

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.AutoScalingReplacingUpdate;

      .. code-tab:: javascript

         // AutoScalingReplacingUpdate is an interface

      .. code-tab:: typescript

         import { AutoScalingReplacingUpdate } from '@aws-cdk/cdk';



   Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement,

   AWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation

   can roll back to the old Auto Scaling group and delete the new Auto Scaling group.

   

   While AWS CloudFormation creates the new group, it doesn't detach or attach any instances. After successfully creating

   the new Auto Scaling group, AWS CloudFormation deletes the old Auto Scaling group during the cleanup process.

   

   When you set the WillReplace parameter, remember to specify a matching CreationPolicy. If the minimum number of

   instances (specified by the MinSuccessfulInstancesPercent property) don't signal success within the Timeout period

   (specified in the CreationPolicy policy), the replacement update fails and AWS CloudFormation rolls back to the old

   Auto Scaling group.





   .. py:attribute:: willReplace

      :type: boolean *(optional)*


AutoScalingRollingUpdate (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AutoScalingRollingUpdate

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.AutoScalingRollingUpdate;

      .. code-tab:: javascript

         // AutoScalingRollingUpdate is an interface

      .. code-tab:: typescript

         import { AutoScalingRollingUpdate } from '@aws-cdk/cdk';



   To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate

   policy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling

   group in batches or all at once.





   .. py:attribute:: maxBatchSize

      Specifies the maximum number of instances that AWS CloudFormation updates.



      :type: number *(optional)*


   .. py:attribute:: minInstancesInService

      Specifies the minimum number of instances that must be in service within the Auto Scaling group while AWS

      CloudFormation updates old instances.



      :type: number *(optional)*


   .. py:attribute:: minSuccessfulInstancesPercent

      Specifies the percentage of instances in an Auto Scaling rolling update that must signal success for an update to succeed.

      You can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent. For example, if you

      update five instances with a minimum successful percentage of 50, three instances must signal success.

      

      If an instance doesn't send a signal within the time specified in the PauseTime property, AWS CloudFormation assumes

      that the instance wasn't updated.

      

      If you specify this property, you must also enable the WaitOnResourceSignals and PauseTime properties.



      :type: number *(optional)*


   .. py:attribute:: pauseTime

      The amount of time that AWS CloudFormation pauses after making a change to a batch of instances to give those instances

      time to start software applications. For example, you might need to specify PauseTime when scaling up the number of

      instances in an Auto Scaling group.

      

      If you enable the WaitOnResourceSignals property, PauseTime is the amount of time that AWS CloudFormation should wait

      for the Auto Scaling group to receive the required number of valid signals from added or replaced instances. If the

      PauseTime is exceeded before the Auto Scaling group receives the required number of signals, the update fails. For best

      results, specify a time period that gives your applications sufficient time to get started. If the update needs to be

      rolled back, a short PauseTime can cause the rollback to fail.

      

      Specify PauseTime in the ISO8601 duration format (in the format PT#H#M#S, where each # is the number of hours, minutes,

      and seconds, respectively). The maximum PauseTime is one hour (PT1H).



      :type: string *(optional)*


   .. py:attribute:: suspendProcesses

      Specifies the Auto Scaling processes to suspend during a stack update. Suspending processes prevents Auto Scaling from

      interfering with a stack update. For example, you can suspend alarming so that Auto Scaling doesn't execute scaling

      policies associated with an alarm. For valid values, see the ScalingProcesses.member.N parameter for the SuspendProcesses

      action in the Auto Scaling API Reference.



      :type: string[] *(optional)*


   .. py:attribute:: waitOnResourceSignals

      Specifies whether the Auto Scaling group waits on signals from new instances during an update. Use this property to

      ensure that instances have completed installing and configuring applications before the Auto Scaling group update proceeds.

      AWS CloudFormation suspends the update of an Auto Scaling group after new EC2 instances are launched into the group.

      AWS CloudFormation must receive a signal from each new instance within the specified PauseTime before continuing the update.

      To signal the Auto Scaling group, use the cfn-signal helper script or SignalResource API.

      

      To have instances wait for an Elastic Load Balancing health check before they signal success, add a health-check

      verification by using the cfn-init helper script. For an example, see the verify_instance_health command in the Auto Scaling

      rolling updates sample template.



      :type: boolean *(optional)*


AutoScalingScheduledAction (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AutoScalingScheduledAction

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.AutoScalingScheduledAction;

      .. code-tab:: javascript

         // AutoScalingScheduledAction is an interface

      .. code-tab:: typescript

         import { AutoScalingScheduledAction } from '@aws-cdk/cdk';



   With scheduled actions, the group size properties of an Auto Scaling group can change at any time. When you update a

   stack with an Auto Scaling group and scheduled action, AWS CloudFormation always sets the group size property values of

   your Auto Scaling group to the values that are defined in the AWS::AutoScaling::AutoScalingGroup resource of your template,

   even if a scheduled action is in effect.

   

   If you do not want AWS CloudFormation to change any of the group size property values when you have a scheduled action in

   effect, use the AutoScalingScheduledAction update policy to prevent AWS CloudFormation from changing the MinSize, MaxSize,

   or DesiredCapacity properties unless you have modified these values in your template.\





   .. py:attribute:: ignoreUnmodifiedGroupSizeProperties

      :type: boolean *(optional)*


AvailabilityZoneProvider
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AvailabilityZoneProvider(context)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.AvailabilityZoneProvider;

      .. code-tab:: javascript

         const { AvailabilityZoneProvider } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AvailabilityZoneProvider } from '@aws-cdk/cdk';



   Context provider that will return the availability zones for the current account and region



   :param context: 
   :type context: :py:class:`~@aws-cdk/cdk.Construct`\ 

   .. py:attribute:: availabilityZones

      Return the list of AZs for the current account and region



      :type: string[] *(readonly)*


Aws
^^^

.. py:class:: Aws([scope])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Aws;

      .. code-tab:: javascript

         const { Aws } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Aws } from '@aws-cdk/cdk';



   Accessor for pseudo parameters

   

   Since pseudo parameters need to be anchored to a stack somewhere in the

   construct tree, this class takes an scope parameter; the pseudo parameter

   values can be obtained as properties from an scoped object.



   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\  *(optional)*

   .. py:attribute:: accountId

      :type: string *(readonly)*


   .. py:attribute:: notificationArns

      :type: string[] *(readonly)*


   .. py:attribute:: noValue

      :type: string *(readonly)*


   .. py:attribute:: partition

      :type: string *(readonly)*


   .. py:attribute:: region

      :type: string *(readonly)*


   .. py:attribute:: stackId

      :type: string *(readonly)*


   .. py:attribute:: stackName

      :type: string *(readonly)*


   .. py:attribute:: urlSuffix

      :type: string *(readonly)*


   .. py:attribute:: scope

      :type: :py:class:`~@aws-cdk/cdk.Construct`\  *(optional)* *(readonly)*


AwsNoValue
^^^^^^^^^^

.. py:class:: AwsNoValue()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.AwsNoValue;

      .. code-tab:: javascript

         const { AwsNoValue } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AwsNoValue } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.Token`\ 

   .. py:method:: resolve(_context) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.resolve>`

      :param _context: 
      :type _context: :py:class:`~@aws-cdk/cdk.ResolveContext`\ 
      :return: The resolved value for this token.
      :rtype: any


   .. py:method:: toJSON() -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toJSON>`

      Turn this Token into JSON

      

      This gets called by JSON.stringify(). We want to prohibit this, because

      it's not possible to do this properly, so we just throw an error here.



      :rtype: any


   .. py:method:: toList() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toList>`

      Return a string list representation of this token

      

      Call this if the Token intrinsically evaluates to a list of strings.

      If so, you can represent the Token in a similar way in the type

      system.

      

      Note that even though the Token is represented as a list of strings, you

      still cannot do any operations on it such as concatenation, indexing,

      or taking its length. The only useful operations you can do to these lists

      is constructing a `FnJoin` or a `FnSelect` on it.



      :rtype: string[]


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toString>`

      Return a reversible string representation of this token

      

      If the Token is initialized with a literal, the stringified value of the

      literal is returned. Otherwise, a special quoted string representation

      of the Token is returned that can be embedded into other strings.

      

      Strings with quoted Tokens in them can be restored back into

      complex values with the Tokens restored by calling `resolve()`

      on the string.



      :rtype: string


   .. py:attribute:: displayName

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.displayName>`

      A human-readable display hint for this Token



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: isReference

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.isReference>`

      Indicate whether this Token represent a "reference"

      

      The Construct tree can be queried for the Reference Tokens that

      are used in it.



      :type: boolean *(optional)* *(readonly)*


   .. py:attribute:: valueOrFunction

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.valueOrFunction>`

      What this token will evaluate to, literal or function.



      :type: any *(optional)* *(readonly)*


CfnReference
^^^^^^^^^^^^

.. py:class:: CfnReference(value, [displayName, [scope]])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.CfnReference;

      .. code-tab:: javascript

         const { CfnReference } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { CfnReference } from '@aws-cdk/cdk';



   A Token that represents a CloudFormation reference to another resource

   

   If these references are used in a different stack from where they are

   defined, appropriate CloudFormation `Export`s and `Fn::ImportValue`s will be

   synthesized automatically instead of the regular CloudFormation references.

   

   Additionally, the dependency between the stacks will be recorded, and the toolkit

   will make sure to deploy producing stack before the consuming stack.

   

   This magic happens in the prepare() phase, where consuming stacks will call

   `consumeFromStack` on these Tokens and if they happen to be exported by a different

   Stack, we'll register the dependency.



   :extends: :py:class:`~@aws-cdk/cdk.Token`\ 
   :param value: 
   :type value: any
   :param displayName: 
   :type displayName: string *(optional)*
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\  *(optional)*

   .. py:staticmethod:: isCfnReference(x) -> boolean

      Check whether this is actually a CfnReference



      :param x: 
      :type x: :py:class:`~@aws-cdk/cdk.Token`\ 
      :rtype: boolean


   .. py:method:: consumeFromStack(consumingStack)

      Register a stack this references is being consumed from.



      :param consumingStack: 
      :type consumingStack: :py:class:`~@aws-cdk/cdk.Stack`\ 


   .. py:method:: resolve(context) -> any

      *Overrides* :py:meth:`@aws-cdk/cdk.Token.resolve`

      :param context: 
      :type context: :py:class:`~@aws-cdk/cdk.ResolveContext`\ 
      :rtype: any


   .. py:attribute:: isReference

      *Overrides* :py:attr:`@aws-cdk/cdk.Token.isReference`

      Indicate whether this Token represent a "reference"

      

      The Construct tree can be queried for the Reference Tokens that

      are used in it.



      :type: boolean *(optional)* *(readonly)*


   .. py:method:: toJSON() -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toJSON>`

      Turn this Token into JSON

      

      This gets called by JSON.stringify(). We want to prohibit this, because

      it's not possible to do this properly, so we just throw an error here.



      :rtype: any


   .. py:method:: toList() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toList>`

      Return a string list representation of this token

      

      Call this if the Token intrinsically evaluates to a list of strings.

      If so, you can represent the Token in a similar way in the type

      system.

      

      Note that even though the Token is represented as a list of strings, you

      still cannot do any operations on it such as concatenation, indexing,

      or taking its length. The only useful operations you can do to these lists

      is constructing a `FnJoin` or a `FnSelect` on it.



      :rtype: string[]


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toString>`

      Return a reversible string representation of this token

      

      If the Token is initialized with a literal, the stringified value of the

      literal is returned. Otherwise, a special quoted string representation

      of the Token is returned that can be embedded into other strings.

      

      Strings with quoted Tokens in them can be restored back into

      complex values with the Tokens restored by calling `resolve()`

      on the string.



      :rtype: string


   .. py:attribute:: displayName

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.displayName>`

      A human-readable display hint for this Token



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: valueOrFunction

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.valueOrFunction>`

      What this token will evaluate to, literal or function.



      :type: any *(optional)* *(readonly)*


CfnTag (interface)
^^^^^^^^^^^^^^^^^^

.. py:class:: CfnTag

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.CfnTag;

      .. code-tab:: javascript

         // CfnTag is an interface

      .. code-tab:: typescript

         import { CfnTag } from '@aws-cdk/cdk';





   .. py:attribute:: key

      :type: string


   .. py:attribute:: value

      :type: string


CloudFormationJSON
^^^^^^^^^^^^^^^^^^

.. py:class:: CloudFormationJSON()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.CloudFormationJSON;

      .. code-tab:: javascript

         const { CloudFormationJSON } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { CloudFormationJSON } from '@aws-cdk/cdk';



   Class for JSON routines that are framework-aware




   .. py:staticmethod:: stringify(obj, context) -> string

      Turn an arbitrary structure potentially containing Tokens into a JSON string.

      

      Returns a Token which will evaluate to CloudFormation expression that

      will be evaluated by CloudFormation to the JSON representation of the

      input structure.

      

      All Tokens substituted in this way must return strings, or the evaluation

      in CloudFormation will fail.



      :param obj: The object to stringify
      :type obj: any
      :param context: The Construct from which to resolve any Tokens found in the object
      :type context: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
      :rtype: string


CodeDeployLambdaAliasUpdate (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CodeDeployLambdaAliasUpdate

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.CodeDeployLambdaAliasUpdate;

      .. code-tab:: javascript

         // CodeDeployLambdaAliasUpdate is an interface

      .. code-tab:: typescript

         import { CodeDeployLambdaAliasUpdate } from '@aws-cdk/cdk';



   To perform an AWS CodeDeploy deployment when the version changes on an AWS::Lambda::Alias resource,

   use the CodeDeployLambdaAliasUpdate update policy.





   .. py:attribute:: applicationName

      The name of the AWS CodeDeploy application.



      :type: string


   .. py:attribute:: deploymentGroupName

      The name of the AWS CodeDeploy deployment group. This is where the traffic-shifting policy is set.



      :type: string


   .. py:attribute:: afterAllowTrafficHook

      The name of the Lambda function to run after traffic routing completes.



      :type: string *(optional)*


   .. py:attribute:: beforeAllowTrafficHook

      The name of the Lambda function to run before traffic routing starts.



      :type: string *(optional)*


ConcreteDependable
^^^^^^^^^^^^^^^^^^

.. py:class:: ConcreteDependable()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ConcreteDependable;

      .. code-tab:: javascript

         const { ConcreteDependable } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ConcreteDependable } from '@aws-cdk/cdk';



   A set of constructs to be used as a dependable

   

   This class can be used when a set of constructs which are disjoint in the

   construct tree needs to be combined to be used as a single dependable.



   :implements: :py:class:`~@aws-cdk/cdk.IDependable`\ 

   .. py:method:: add(construct)

      Add a construct to the dependency roots



      :param construct: 
      :type construct: :py:class:`~@aws-cdk/cdk.IConstruct`\ 


   .. py:attribute:: dependencyRoots

      *Implements* :py:meth:`@aws-cdk/cdk.IDependable.dependencyRoots`

      Retrieve the current set of dependency roots



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


Condition
^^^^^^^^^

.. py:class:: Condition(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Condition;

      .. code-tab:: javascript

         const { Condition } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Condition } from '@aws-cdk/cdk';



   Represents a CloudFormation condition, for resources which must be conditionally created and

   the determination must be made at deploy time.



   :extends: :py:class:`~@aws-cdk/cdk.Referenceable`\ 
   :implements: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.ConditionProps`\  *(optional)*

   .. py:method:: resolve(_context) -> any

      *Implements* :py:meth:`@aws-cdk/cdk.IConditionExpression.resolve`

      Synthesizes the condition.



      :param _context: 
      :type _context: :py:class:`~@aws-cdk/cdk.ResolveContext`\ 
      :rtype: any


   .. py:method:: toCloudFormation() -> json

      *Implements* :py:meth:`@aws-cdk/cdk.StackElement.toCloudFormation`

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged

      at the root level to ensure there are no identity conflicts.

      

      For example, a Resource class will return something like:

      {

         Resources: {

           [this.logicalId]: {

             Type: this.resourceType,

             Properties: this.props,

             Condition: this.condition

           }

         }

      }



      :rtype: json


   .. py:attribute:: expression

      The condition statement.



      :type: :py:class:`~@aws-cdk/cdk.IConditionExpression`\  *(optional)*


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.prepare>`

      Automatically detect references in this StackElement



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack



      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of



      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.Stack`\ 


ConditionProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ConditionProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ConditionProps;

      .. code-tab:: javascript

         // ConditionProps is an interface

      .. code-tab:: typescript

         import { ConditionProps } from '@aws-cdk/cdk';





   .. py:attribute:: expression

      :type: :py:class:`~@aws-cdk/cdk.IConditionExpression`\  *(optional)*


Construct
^^^^^^^^^

.. py:class:: Construct(scope, id)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Construct;

      .. code-tab:: javascript

         const { Construct } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Construct } from '@aws-cdk/cdk';



   Represents the building block of the construct graph.

   

   All constructs besides the root construct must be created within the scope of

   another construct.



   :implements: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
   :param scope: The scope in which to define this construct
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: The scoped construct ID. Must be unique amongst siblings. If the ID includes a path separator (`/`), then it will be replaced by double dash `--`.
   :type id: string

   .. py:staticmethod:: isConstruct(x) -> boolean

      Return whether the given object is a Construct



      :param x: 
      :type x: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
      :rtype: boolean


   .. py:method:: apply(aspect)

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: prepare()

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Implements* :py:meth:`@aws-cdk/cdk.IDependable.dependencyRoots`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Implements* :py:meth:`@aws-cdk/cdk.IConstruct.node`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


ConstructNode
^^^^^^^^^^^^^

.. py:class:: ConstructNode(host, scope, id)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ConstructNode;

      .. code-tab:: javascript

         const { ConstructNode } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ConstructNode } from '@aws-cdk/cdk';



   Represents the construct node in the scope tree.



   :param host: 
   :type host: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
   :param id: 
   :type id: string

   .. py:method:: addChild(child, childName)

      Adds a child construct to this node.



      :param child: The child construct
      :type child: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addDependency(*dependencies)

      Add an ordering dependency on another Construct.

      

      All constructs in the dependency's scope will be deployed before any

      construct in this construct's scope.



      :param \*dependencies: 
      :type \*dependencies: :py:class:`~@aws-cdk/cdk.IDependable`\ 


   .. py:method:: addError(message)

      Adds an { error: <message> } metadata entry to this construct.

      The toolkit will fail synthesis when errors are reported.



      :param message: The error message.
      :type message: string


   .. py:method:: addInfo(message)

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct.

      The toolkit will display the info message when apps are synthesized.



      :param message: The info message.
      :type message: string


   .. py:method:: addMetadata(type, data, [from])

      Adds a metadata entry to this construct.

      Entries are arbitrary values and will also include a stack trace to allow tracing back to

      the code location for when the entry was added. It can be used, for example, to include source

      mapping in CloudFormation templates to improve diagnostics.



      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any *(optional)*


   .. py:method:: addWarning(message)

      Adds a { warning: <message> } metadata entry to this construct.

      The toolkit will display the warning when an app is synthesized, or fail

      if run in --strict mode.



      :param message: The warning message.
      :type message: string


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.IConstruct[]

      Return the ancestors (including self) of this Construct up until and excluding the indicated component



      :param upTo: 
      :type upTo: :py:class:`~@aws-cdk/cdk.Construct`\  *(optional)*
      :rtype: :py:class:`~@aws-cdk/cdk.IConstruct`\ []


   .. py:method:: findAll([order]) -> @aws-cdk/cdk.IConstruct[]

      Return this construct and all of its children in the given order



      :param order: 
      :type order: :py:class:`~@aws-cdk/cdk.ConstructOrder`\  *(optional)*
      :rtype: :py:class:`~@aws-cdk/cdk.IConstruct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.IConstruct

      Return a descendant by path

      

      Throws an exception if the descendant is not found.

      

      Note that if the original ID of the construct you are looking for contained

      a '/', then it would have been replaced by '--'.



      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`~@aws-cdk/cdk.IConstruct`\ 


   .. py:method:: findDependencies() -> @aws-cdk/cdk.Dependency[]

      Return all dependencies registered on this node or any of its children



      :rtype: :py:class:`~@aws-cdk/cdk.Dependency`\ []


   .. py:method:: findReferences() -> @aws-cdk/cdk.Token[]

      Return all references of the given type originating from this node or any of its children



      :rtype: :py:class:`~@aws-cdk/cdk.Token`\ []


   .. py:method:: getContext(key) -> any

      Retrieves a value from tree context.

      

      Context is usually initialized at the root, but can be overridden at any point in the tree.



      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any


   .. py:method:: lock()

      Locks this construct from allowing more children to be added. After this

      call, no more children can be added to this construct or to any children.





   .. py:method:: prepareTree()

      Run 'prepare()' on all constructs in the tree





   .. py:method:: recordReference(*refs)

      Record a reference originating from this construct node



      :param \*refs: 
      :type \*refs: :py:class:`~@aws-cdk/cdk.Token`\ 


   .. py:method:: requireContext(key) -> any

      Retrieve a value from tree-global context

      

      It is an error if the context object is not available.



      :param key: 
      :type key: string
      :rtype: any


   .. py:method:: required(props, name) -> any

      Throws if the `props` bag doesn't include the property `name`.

      In the future we can add some type-checking here, maybe even auto-generate during compilation.



      :param props: The props bag.
      :type props: any
      :param name: The name of the required property.
      :type name: string
      :rtype: any


   .. py:method:: resolve(obj) -> any

      Resolve a tokenized value in the context of the current Construct



      :param obj: 
      :type obj: any
      :rtype: any


   .. py:method:: setContext(key, value)

      This can be used to set contextual values.

      Context must be set before any children are added, since children may consult context info during construction.

      If the key already exists, it will be overridden.



      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any


   .. py:method:: stringifyJson(obj) -> string

      Convert an object, potentially containing tokens, to a JSON string



      :param obj: 
      :type obj: any
      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      Returns a string with a tree representation of this construct and it's children.



      :param depth: 
      :type depth: number *(optional)*
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.IConstruct

      Return a descendant by path, or undefined

      

      Note that if the original ID of the construct you are looking for contained

      a '/', then it would have been replaced by '--'.



      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`~@aws-cdk/cdk.IConstruct`\  *(optional)*


   .. py:method:: unlock()

      Unlocks this costruct and allows mutations (adding children).





   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      Invokes 'validate' on all child constructs and then on this construct (depth-first).



      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`~@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: aspects

      An array of aspects applied to this node



      :type: :py:class:`~@aws-cdk/cdk.IAspect`\ [] *(readonly)*


   .. py:attribute:: children

      All direct children of this construct.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: host

      :type: :py:class:`~@aws-cdk/cdk.Construct`\  *(readonly)*


   .. py:attribute:: id

      The scoped construct ID

      This ID is unique amongst all constructs defined in the same scope.

      To obtain a global unique id for this construct, use `uniqueId`.



      :type: string *(readonly)*


   .. py:attribute:: locked

      Returns true if this construct or the scopes in which it is defined are

      locked.



      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      An array of metadata objects associated with this construct.

      This can be used, for example, to implement support for deprecation notices, source mapping, etc.



      :type: :py:class:`~@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      The full path of this construct in the tree.

      Components are separated by '/'.



      :type: string *(readonly)*


   .. py:attribute:: typename

      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      A tree-global unique alphanumeric identifier for this construct.

      Includes all components of the tree.



      :type: string *(readonly)*


   .. py:attribute:: scope

      Returns the scope in which this construct is defined.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\  *(optional)* *(readonly)*


ConstructOrder (enum)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ConstructOrder

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ConstructOrder;

      .. code-tab:: javascript

         const { ConstructOrder } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ConstructOrder } from '@aws-cdk/cdk';



   In what order to return constructs



   .. py:data:: BreadthFirst

   Breadth first



   .. py:data:: DepthFirst

   Depth first




ContextProvider
^^^^^^^^^^^^^^^

.. py:class:: ContextProvider(context, provider, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ContextProvider;

      .. code-tab:: javascript

         const { ContextProvider } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ContextProvider } from '@aws-cdk/cdk';



   Base class for the model side of context providers

   

   Instances of this class communicate with context provider plugins in the 'cdk

   toolkit' via context variables (input), outputting specialized queries for

   more context variables (output).

   

   ContextProvider needs access to a Construct to hook into the context mechanism.



   :param context: 
   :type context: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param provider: 
   :type provider: string
   :param props: 
   :type props: string => any *(optional)*

   .. py:method:: getStringListValue(defaultValue) -> string[]

      Read a provider value, verifying it's a list



      :param defaultValue: The value to return if there is no value defined for this context key
      :type defaultValue: string[]
      :rtype: string[]


   .. py:method:: getStringValue(defaultValue) -> string

      Read a provider value, verifying it's a string



      :param defaultValue: The value to return if there is no value defined for this context key
      :type defaultValue: string
      :rtype: string


   .. py:method:: getValue(defaultValue) -> any

      Read a provider value and verify it is not `null`



      :param defaultValue: 
      :type defaultValue: any
      :rtype: any


   .. py:attribute:: context

      :type: :py:class:`~@aws-cdk/cdk.Construct`\  *(readonly)*


   .. py:attribute:: key

      :type: string *(readonly)*


   .. py:attribute:: provider

      :type: string *(readonly)*


CreationPolicy (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CreationPolicy

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.CreationPolicy;

      .. code-tab:: javascript

         // CreationPolicy is an interface

      .. code-tab:: typescript

         import { CreationPolicy } from '@aws-cdk/cdk';



   Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until

   AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded. To signal a

   resource, you can use the cfn-signal helper script or SignalResource API. AWS CloudFormation publishes valid signals

   to the stack events so that you track the number of signals sent.

   

   The creation policy is invoked only when AWS CloudFormation creates the associated resource. Currently, the only

   AWS CloudFormation resources that support creation policies are AWS::AutoScaling::AutoScalingGroup, AWS::EC2::Instance,

   and AWS::CloudFormation::WaitCondition.

   

   Use the CreationPolicy attribute when you want to wait on resource configuration actions before stack creation proceeds.

   For example, if you install and configure software applications on an EC2 instance, you might want those applications to

   be running before proceeding. In such cases, you can add a CreationPolicy attribute to the instance, and then send a success

   signal to the instance after the applications are installed and configured. For a detailed example, see Deploying Applications

   on Amazon EC2 with AWS CloudFormation.





   .. py:attribute:: autoScalingCreationPolicy

      For an Auto Scaling group replacement update, specifies how many instances must signal success for the

      update to succeed.



      :type: :py:class:`~@aws-cdk/cdk.AutoScalingCreationPolicy`\  *(optional)*


   .. py:attribute:: resourceSignal

      When AWS CloudFormation creates the associated resource, configures the number of required success signals and

      the length of time that AWS CloudFormation waits for those signals.



      :type: :py:class:`~@aws-cdk/cdk.ResourceSignal`\  *(optional)*


DeletionPolicy (enum)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: DeletionPolicy

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.DeletionPolicy;

      .. code-tab:: javascript

         const { DeletionPolicy } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { DeletionPolicy } from '@aws-cdk/cdk';



   With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted.

   You specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy

   attribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations

   that lead to resources being removed.



   .. py:data:: Delete

   AWS CloudFormation deletes the resource and all its content if applicable during stack deletion. You can add this

   deletion policy to any resource type. By default, if you don't specify a DeletionPolicy, AWS CloudFormation deletes

   your resources. However, be aware of the following considerations:



   .. py:data:: Retain

   AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted.

   You can add this deletion policy to any resource type. Note that when AWS CloudFormation completes the stack deletion,

   the stack will be in Delete_Complete state; however, resources that are retained continue to exist and continue to incur

   applicable charges until you delete those resources.



   .. py:data:: Snapshot

   For resources that support snapshots (AWS::EC2::Volume, AWS::ElastiCache::CacheCluster, AWS::ElastiCache::ReplicationGroup,

   AWS::RDS::DBInstance, AWS::RDS::DBCluster, and AWS::Redshift::Cluster), AWS CloudFormation creates a snapshot for the

   resource before deleting it. Note that when AWS CloudFormation completes the stack deletion, the stack will be in the

   Delete_Complete state; however, the snapshots that are created with this policy continue to exist and continue to

   incur applicable charges until you delete those snapshots.




Dependency (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: Dependency

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Dependency;

      .. code-tab:: javascript

         // Dependency is an interface

      .. code-tab:: typescript

         import { Dependency } from '@aws-cdk/cdk';



   A single dependency

   A single dependency





   .. py:attribute:: source

      Source the dependency

      Source the dependency



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ 


   .. py:attribute:: target

      Target of the dependency

      Target of the dependency



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ 


DynamicReference
^^^^^^^^^^^^^^^^

.. py:class:: DynamicReference(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.DynamicReference;

      .. code-tab:: javascript

         const { DynamicReference } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { DynamicReference } from '@aws-cdk/cdk';



   References a dynamically retrieved value

   

   This is a Construct so that subclasses will (eventually) be able to attach

   metadata to themselves without having to change call signatures.



   :extends: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.DynamicReferenceProps`\ 

   .. py:method:: makeResolveValue(service, referenceKey) -> string

      Make a dynamic reference Token value

      

      This is a value (similar to CDK Tokens) that will be substituted by

      CloudFormation before executing the changeset.



      *Protected method*

      :param service: 
      :type service: :py:class:`~@aws-cdk/cdk.DynamicReferenceService`\ 
      :param referenceKey: 
      :type referenceKey: string
      :rtype: string


   .. py:attribute:: value

      The value of this dynamic reference



      :type: string *(readonly)*


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


DynamicReferenceProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: DynamicReferenceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.DynamicReferenceProps;

      .. code-tab:: javascript

         // DynamicReferenceProps is an interface

      .. code-tab:: typescript

         import { DynamicReferenceProps } from '@aws-cdk/cdk';



   Properties for a Dynamic Reference





   .. py:attribute:: referenceKey

      The reference key of the dynamic reference



      :type: string


   .. py:attribute:: service

      The service to retrieve the dynamic reference from



      :type: :py:class:`~@aws-cdk/cdk.DynamicReferenceService`\ 


DynamicReferenceService (enum)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: DynamicReferenceService

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.DynamicReferenceService;

      .. code-tab:: javascript

         const { DynamicReferenceService } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { DynamicReferenceService } from '@aws-cdk/cdk';



   The service to retrieve the dynamic reference from



   .. py:data:: Ssm

   Plaintext value stored in AWS Systems Manager Parameter Store



   .. py:data:: SsmSecure

   Secure string stored in AWS Systems Manager Parameter Store



   .. py:data:: SecretsManager

   Secret stored in AWS Secrets Manager




Environment (interface)
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: Environment

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Environment;

      .. code-tab:: javascript

         // Environment is an interface

      .. code-tab:: typescript

         import { Environment } from '@aws-cdk/cdk';



   The deployment environment for a stack.





   .. py:attribute:: account

      The AWS account ID for this environment.

      If not specified, the context parameter `default-account` is used.



      :type: string *(optional)*


   .. py:attribute:: region

      The AWS region for this environment.

      If not specified, the context parameter `default-region` is used.



      :type: string *(optional)*


Fn
^^

.. py:class:: Fn()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Fn;

      .. code-tab:: javascript

         const { Fn } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Fn } from '@aws-cdk/cdk';



   CloudFormation intrinsic functions.

   http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html




   .. py:staticmethod:: base64(data) -> string

      The intrinsic function ``Fn::Base64`` returns the Base64 representation of

      the input string. This function is typically used to pass encoded data to

      Amazon EC2 instances by way of the UserData property.



      :param data: The string value you want to convert to Base64.
      :type data: string
      :return: a token represented as a string
      :rtype: string


   .. py:staticmethod:: cidr(ipBlock, count, [sizeMask]) -> string

      The intrinsic function ``Fn::Cidr`` returns the specified Cidr address block.



      :param ipBlock: The user-specified default Cidr address block.
      :type ipBlock: string
      :param count: The number of subnets' Cidr block wanted. Count can be 1 to 256.
      :type count: number
      :param sizeMask: The digit covered in the subnet.
      :type sizeMask: string *(optional)*
      :return: a token represented as a string
      :rtype: string


   .. py:staticmethod:: conditionAnd(*conditions) -> @aws-cdk/cdk.IConditionExpression

      Returns true if all the specified conditions evaluate to true, or returns

      false if any one of the conditions evaluates to false. ``Fn::And`` acts as

      an AND operator. The minimum number of conditions that you can include is

      2, and the maximum is 10.



      :param \*conditions: conditions to AND
      :type \*conditions: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 
      :return: an FnCondition token
      :rtype: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 


   .. py:staticmethod:: conditionContains(listOfStrings, value) -> @aws-cdk/cdk.IConditionExpression

      Returns true if a specified string matches at least one value in a list of

      strings.



      :param listOfStrings: A list of strings, such as "A", "B", "C".
      :type listOfStrings: string[]
      :param value: A string, such as "A", that you want to compare against a list of strings.
      :type value: string
      :return: an FnCondition token
      :rtype: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 


   .. py:staticmethod:: conditionEquals(lhs, rhs) -> @aws-cdk/cdk.IConditionExpression

      Compares if two values are equal. Returns true if the two values are equal

      or false if they aren't.



      :param lhs: A value of any type that you want to compare.
      :type lhs: any
      :param rhs: A value of any type that you want to compare.
      :type rhs: any
      :return: an FnCondition token
      :rtype: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 


   .. py:staticmethod:: conditionIf(conditionId, valueIfTrue, valueIfFalse) -> @aws-cdk/cdk.IConditionExpression

      Returns one value if the specified condition evaluates to true and another

      value if the specified condition evaluates to false. Currently, AWS

      CloudFormation supports the ``Fn::If`` intrinsic function in the metadata

      attribute, update policy attribute, and property values in the Resources

      section and Outputs sections of a template. You can use the AWS::NoValue

      pseudo parameter as a return value to remove the corresponding property.



      :param conditionId: 
      :type conditionId: string
      :param valueIfTrue: A value to be returned if the specified condition evaluates to true.
      :type valueIfTrue: any
      :param valueIfFalse: A value to be returned if the specified condition evaluates to false.
      :type valueIfFalse: any
      :return: an FnCondition token
      :rtype: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 


   .. py:staticmethod:: conditionNot(condition) -> @aws-cdk/cdk.IConditionExpression

      Returns true for a condition that evaluates to false or returns false for a

      condition that evaluates to true. ``Fn::Not`` acts as a NOT operator.



      :param condition: A condition such as ``Fn::Equals`` that evaluates to true or false.
      :type condition: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 
      :return: an FnCondition token
      :rtype: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 


   .. py:staticmethod:: conditionOr(*conditions) -> @aws-cdk/cdk.IConditionExpression

      Returns true if any one of the specified conditions evaluate to true, or

      returns false if all of the conditions evaluates to false. ``Fn::Or`` acts

      as an OR operator. The minimum number of conditions that you can include is

      2, and the maximum is 10.



      :param \*conditions: conditions that evaluates to true or false.
      :type \*conditions: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 
      :return: an FnCondition token
      :rtype: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 


   .. py:staticmethod:: findInMap(mapName, topLevelKey, secondLevelKey) -> string

      The intrinsic function ``Fn::FindInMap`` returns the value corresponding to

      keys in a two-level map that is declared in the Mappings section.



      :param mapName: 
      :type mapName: string
      :param topLevelKey: 
      :type topLevelKey: string
      :param secondLevelKey: 
      :type secondLevelKey: string
      :return: a token represented as a string
      :rtype: string


   .. py:staticmethod:: getAtt(logicalNameOfResource, attributeName) -> @aws-cdk/cdk.Token

      The ``Fn::GetAtt`` intrinsic function returns the value of an attribute

      from a resource in the template.



      :param logicalNameOfResource: The logical name (also called logical ID) of the resource that contains the attribute that you want.
      :type logicalNameOfResource: string
      :param attributeName: The name of the resource-specific attribute whose value you want. See the resource's reference page for details about the attributes available for that resource type.
      :type attributeName: string
      :return: a CloudFormationToken object
      :rtype: :py:class:`~@aws-cdk/cdk.Token`\ 


   .. py:staticmethod:: getAZs([region]) -> string[]

      The intrinsic function ``Fn::GetAZs`` returns an array that lists

      Availability Zones for a specified region. Because customers have access to

      different Availability Zones, the intrinsic function ``Fn::GetAZs`` enables

      template authors to write templates that adapt to the calling user's

      access. That way you don't have to hard-code a full list of Availability

      Zones for a specified region.



      :param region: The name of the region for which you want to get the Availability Zones. You can use the AWS::Region pseudo parameter to specify the region in which the stack is created. Specifying an empty string is equivalent to specifying AWS::Region.
      :type region: string *(optional)*
      :return: a token represented as a string array
      :rtype: string[]


   .. py:staticmethod:: importValue(sharedValueToImport) -> string

      The intrinsic function ``Fn::ImportValue`` returns the value of an output

      exported by another stack. You typically use this function to create

      cross-stack references. In the following example template snippets, Stack A

      exports VPC security group values and Stack B imports them.



      :param sharedValueToImport: The stack output value that you want to import.
      :type sharedValueToImport: string
      :return: a token represented as a string
      :rtype: string


   .. py:staticmethod:: join(delimiter, listOfValues) -> string

      The intrinsic function ``Fn::Join`` appends a set of values into a single

      value, separated by the specified delimiter. If a delimiter is the empty

      string, the set of values are concatenated with no delimiter.



      :param delimiter: The value you want to occur between fragments. The delimiter will occur between fragments only. It will not terminate the final value.
      :type delimiter: string
      :param listOfValues: The list of values you want combined.
      :type listOfValues: string[]
      :return: a token represented as a string
      :rtype: string


   .. py:staticmethod:: select(index, array) -> string

      The intrinsic function ``Fn::Select`` returns a single object from a list of objects by index.



      :param index: The index of the object to retrieve. This must be a value from zero to N-1, where N represents the number of elements in the array.
      :type index: number
      :param array: The list of objects to select from. This list must not be null, nor can it have null entries.
      :type array: string[]
      :return: a token represented as a string
      :rtype: string


   .. py:staticmethod:: split(delimiter, source) -> string[]

      To split a string into a list of string values so that you can select an element from the

      resulting string list, use the ``Fn::Split`` intrinsic function. Specify the location of splits

      with a delimiter, such as , (a comma). After you split a string, use the ``Fn::Select`` function

      to pick a specific element.



      :param delimiter: A string value that determines where the source string is divided.
      :type delimiter: string
      :param source: The string value that you want to split.
      :type source: string
      :return: a token represented as a string array
      :rtype: string[]


   .. py:staticmethod:: sub(body, [variables]) -> string

      The intrinsic function ``Fn::Sub`` substitutes variables in an input string

      with values that you specify. In your templates, you can use this function

      to construct commands or outputs that include values that aren't available

      until you create or update a stack.



      :param body: A string with variables that AWS CloudFormation substitutes with their associated values at runtime. Write variables as ${MyVarName}. Variables can be template parameter names, resource logical IDs, resource attributes, or a variable in a key-value map. If you specify only template parameter names, resource logical IDs, and resource attributes, don't specify a key-value map.
      :type body: string
      :param variables: The name of a variable that you included in the String parameter. The value that AWS CloudFormation substitutes for the associated variable name at runtime.
      :type variables: string => string *(optional)*
      :return: a token represented as a string
      :rtype: string


   .. py:method:: conditionEachMemberEquals(listOfStrings, value) -> @aws-cdk/cdk.IConditionExpression

      Returns true if a specified string matches all values in a list.



      :param listOfStrings: A list of strings, such as "A", "B", "C".
      :type listOfStrings: string[]
      :param value: A string, such as "A", that you want to compare against a list of strings.
      :type value: string
      :return: an FnCondition token
      :rtype: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 


   .. py:method:: conditionEachMemberIn(stringsToCheck, stringsToMatch) -> @aws-cdk/cdk.IConditionExpression

      Returns true if each member in a list of strings matches at least one value

      in a second list of strings.



      :param stringsToCheck: A list of strings, such as "A", "B", "C". AWS CloudFormation checks whether each member in the strings_to_check parameter is in the strings_to_match parameter.
      :type stringsToCheck: string[]
      :param stringsToMatch: A list of strings, such as "A", "B", "C". Each member in the strings_to_match parameter is compared against the members of the strings_to_check parameter.
      :type stringsToMatch: string
      :return: an FnCondition token
      :rtype: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 


   .. py:method:: refAll(parameterType) -> string[]

      Returns all values for a specified parameter type.



      :param parameterType: An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or AWS::EC2::VPC::Id. For more information, see Parameters in the AWS CloudFormation User Guide.
      :type parameterType: string
      :return: a token represented as a string array
      :rtype: string[]


   .. py:method:: valueOf(parameterOrLogicalId, attribute) -> string

      Returns an attribute value or list of values for a specific parameter and

      attribute.



      :param parameterOrLogicalId: The name of a parameter for which you want to retrieve attribute values. The parameter must be declared in the Parameters section of the template.
      :type parameterOrLogicalId: string
      :param attribute: The name of an attribute from which you want to retrieve a value.
      :type attribute: string
      :return: a token represented as a string
      :rtype: string


   .. py:method:: valueOfAll(parameterType, attribute) -> string[]

      Returns a list of all attribute values for a given parameter type and

      attribute.



      :param parameterType: An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or AWS::EC2::VPC::Id. For more information, see Parameters in the AWS CloudFormation User Guide.
      :type parameterType: string
      :param attribute: The name of an attribute from which you want to retrieve a value. For more information about attributes, see Supported Attributes.
      :type attribute: string
      :return: a token represented as a string array
      :rtype: string[]


HashedAddressingScheme
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: HashedAddressingScheme()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.HashedAddressingScheme;

      .. code-tab:: javascript

         const { HashedAddressingScheme } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { HashedAddressingScheme } from '@aws-cdk/cdk';



   Renders a hashed ID for a resource.

   

   In order to make sure logical IDs are unique and stable, we hash the resource

   construct tree path (i.e. toplevel/secondlevel/.../myresource) and add it as

   a suffix to the path components joined without a separator (CloudFormation

   IDs only allow alphanumeric characters).

   

   The result will be:

   

      <path.join('')><md5(path.join('/')>

        "human"      "hash"

   

   If the "human" part of the ID exceeds 240 characters, we simply trim it so

   the total ID doesn't exceed CloudFormation's 255 character limit.

   

   We only take 8 characters from the md5 hash (0.000005 chance of collision).

   

   Special cases:

   

   - If the path only contains a single component (i.e. it's a top-level

      resource), we won't add the hash to it. The hash is not needed for

      disamiguation and also, it allows for a more straightforward migration an

      existing CloudFormation template to a CDK stack without logical ID changes

      (or renames).

   - For aesthetic reasons, if the last components of the path are the same

      (i.e. `L1/L2/Pipeline/Pipeline`), they will be de-duplicated to make the

      resulting human portion of the ID more pleasing: `L1L2Pipeline<HASH>`

      instead of `L1L2PipelinePipeline<HASH>`

   - If a component is named "Default" it will be omitted from the path. This

      allows refactoring higher level abstractions around constructs without affecting

      the IDs of already deployed resources.

   - If a component is named "Resource" it will be omitted from the user-visible

      path, but included in the hash. This reduces visual noise in the human readable

      part of the identifier.



   :implements: :py:class:`~@aws-cdk/cdk.IAddressingScheme`\ 

   .. py:method:: allocateAddress(addressComponents) -> string

      *Implements* :py:meth:`@aws-cdk/cdk.IAddressingScheme.allocateAddress`

      Return the logical ID for the given list of Construct names on the path.



      :param addressComponents: 
      :type addressComponents: string[]
      :rtype: string


IAddressingScheme (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IAddressingScheme

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.IAddressingScheme;

      .. code-tab:: javascript

         // IAddressingScheme is an interface

      .. code-tab:: typescript

         import { IAddressingScheme } from '@aws-cdk/cdk';



   Interface for classes that implementation logical ID assignment strategies





   .. py:method:: allocateAddress(addressComponents) -> string

      Return the logical ID for the given list of Construct names on the path.



      :param addressComponents: 
      :type addressComponents: string[]
      :rtype: string
      :abstract: Yes


IAspect (interface)
^^^^^^^^^^^^^^^^^^^

.. py:class:: IAspect

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.IAspect;

      .. code-tab:: javascript

         // IAspect is an interface

      .. code-tab:: typescript

         import { IAspect } from '@aws-cdk/cdk';



   Represents an Aspect





   .. py:method:: visit(node)

      All aspects can visit an IConstruct



      :param node: 
      :type node: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
      :abstract: Yes


IConditionExpression (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IConditionExpression

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.IConditionExpression;

      .. code-tab:: javascript

         // IConditionExpression is an interface

      .. code-tab:: typescript

         import { IConditionExpression } from '@aws-cdk/cdk';



   Represents a CloudFormation element that can be used within a Condition.

   

   You can use intrinsic functions, such as ``Fn.conditionIf``,

   ``Fn.conditionEquals``, and ``Fn.conditionNot``, to conditionally create

   stack resources. These conditions are evaluated based on input parameters

   that you declare when you create or update a stack. After you define all your

   conditions, you can associate them with resources or resource properties in

   the Resources and Outputs sections of a template.

   

   You define all conditions in the Conditions section of a template except for

   ``Fn.conditionIf`` conditions. You can use the ``Fn.conditionIf`` condition

   in the metadata attribute, update policy attribute, and property values in

   the Resources section and Outputs sections of a template.

   

   You might use conditions when you want to reuse a template that can create

   resources in different contexts, such as a test environment versus a

   production environment. In your template, you can add an EnvironmentType

   input parameter, which accepts either prod or test as inputs. For the

   production environment, you might include Amazon EC2 instances with certain

   capabilities; however, for the test environment, you want to use less

   capabilities to save costs. With conditions, you can define which resources

   are created and how they're configured for each environment type.





   .. py:method:: resolve(context) -> any

      Returns a JSON node that represents this condition expression



      :param context: 
      :type context: :py:class:`~@aws-cdk/cdk.ResolveContext`\ 
      :rtype: any
      :abstract: Yes


IConstruct (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IConstruct

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.IConstruct;

      .. code-tab:: javascript

         // IConstruct is an interface

      .. code-tab:: typescript

         import { IConstruct } from '@aws-cdk/cdk';



   Represents a construct.



   :extends: :py:class:`~@aws-cdk/cdk.IDependable`\ 


   .. py:attribute:: node

      The construct node in the scope tree.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.IDependable <@aws-cdk/cdk.IDependable.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


IDependable (interface)
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IDependable

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.IDependable;

      .. code-tab:: javascript

         // IDependable is an interface

      .. code-tab:: typescript

         import { IDependable } from '@aws-cdk/cdk';



   A set of constructs that can be depended upon

   

   This interface can be used to take an (ordering) dependency on a set of

   constructs. An ordering dependency implies that the resources represented by

   those constructs are deployed before the resources depending ON them are

   deployed.





   .. py:attribute:: dependencyRoots

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


ITaggable (interface)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ITaggable

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ITaggable;

      .. code-tab:: javascript

         // ITaggable is an interface

      .. code-tab:: typescript

         import { ITaggable } from '@aws-cdk/cdk';





   .. py:attribute:: tags

      TagManager to set, remove and format tags



      :type: :py:class:`~@aws-cdk/cdk.TagManager`\  *(readonly)*


Include
^^^^^^^

.. py:class:: Include(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Include;

      .. code-tab:: javascript

         const { Include } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Include } from '@aws-cdk/cdk';



   Includes a CloudFormation template into a stack. All elements of the template will be merged into

   the current stack, together with any elements created programmatically.



   :extends: :py:class:`~@aws-cdk/cdk.StackElement`\ 
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: The ID of this construct
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.IncludeProps`\ 

   .. py:method:: toCloudFormation() -> json

      *Implements* :py:meth:`@aws-cdk/cdk.StackElement.toCloudFormation`

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged

      at the root level to ensure there are no identity conflicts.

      

      For example, a Resource class will return something like:

      {

         Resources: {

           [this.logicalId]: {

             Type: this.resourceType,

             Properties: this.props,

             Condition: this.condition

           }

         }

      }



      :rtype: json


   .. py:attribute:: template

      The included template.



      :type: json *(readonly)*


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.prepare>`

      Automatically detect references in this StackElement



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack



      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of



      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.Stack`\ 


IncludeProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IncludeProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.IncludeProps;

      .. code-tab:: javascript

         // IncludeProps is an interface

      .. code-tab:: typescript

         import { IncludeProps } from '@aws-cdk/cdk';





   .. py:attribute:: template

      The CloudFormation template to include in the stack (as is).



      :type: json


LogicalIDs
^^^^^^^^^^

.. py:class:: LogicalIDs(namingScheme)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.LogicalIDs;

      .. code-tab:: javascript

         const { LogicalIDs } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { LogicalIDs } from '@aws-cdk/cdk';



   Class that keeps track of the logical IDs that are assigned to resources

   

   Supports renaming the generated IDs.



   :param namingScheme: 
   :type namingScheme: :py:class:`~@aws-cdk/cdk.IAddressingScheme`\ 

   .. py:method:: assertAllRenamesApplied()

      Throw an error if not all renames have been used

      

      This is to assure that users didn't make typoes when registering renames.





   .. py:method:: getLogicalId(stackElement) -> string

      Return the logical ID for the given stack element



      :param stackElement: 
      :type stackElement: :py:class:`~@aws-cdk/cdk.StackElement`\ 
      :rtype: string


   .. py:method:: renameLogical(oldId, newId)

      Rename a logical ID from an old ID to a new ID



      :param oldId: 
      :type oldId: string
      :param newId: 
      :type newId: string


   .. py:attribute:: namingScheme

      :type: :py:class:`~@aws-cdk/cdk.IAddressingScheme`\  *(readonly)*


Mapping
^^^^^^^

.. py:class:: Mapping(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Mapping;

      .. code-tab:: javascript

         const { Mapping } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Mapping } from '@aws-cdk/cdk';



   Represents a CloudFormation mapping.



   :extends: :py:class:`~@aws-cdk/cdk.Referenceable`\ 
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.MappingProps`\ 

   .. py:method:: findInMap(key1, key2) -> string

      :param key1: 
      :type key1: string
      :param key2: 
      :type key2: string
      :return: A reference to a value in the map based on the two keys.
      :rtype: string


   .. py:method:: setValue(key1, key2, value)

      Sets a value in the map based on the two keys.



      :param key1: 
      :type key1: string
      :param key2: 
      :type key2: string
      :param value: 
      :type value: any


   .. py:method:: toCloudFormation() -> json

      *Implements* :py:meth:`@aws-cdk/cdk.StackElement.toCloudFormation`

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged

      at the root level to ensure there are no identity conflicts.

      

      For example, a Resource class will return something like:

      {

         Resources: {

           [this.logicalId]: {

             Type: this.resourceType,

             Properties: this.props,

             Condition: this.condition

           }

         }

      }



      :rtype: json


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.prepare>`

      Automatically detect references in this StackElement



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack



      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of



      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.Stack`\ 


MappingProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: MappingProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.MappingProps;

      .. code-tab:: javascript

         // MappingProps is an interface

      .. code-tab:: typescript

         import { MappingProps } from '@aws-cdk/cdk';





   .. py:attribute:: mapping

      :type: string => string => any *(optional)*


MetadataEntry (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: MetadataEntry

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.MetadataEntry;

      .. code-tab:: javascript

         // MetadataEntry is an interface

      .. code-tab:: typescript

         import { MetadataEntry } from '@aws-cdk/cdk';



   An metadata entry in the construct.





   .. py:attribute:: trace

      A stack trace for when the entry was created.



      :type: string[]


   .. py:attribute:: type

      The type of the metadata entry.



      :type: string


   .. py:attribute:: data

      The data.



      :type: any *(optional)*


Output
^^^^^^

.. py:class:: Output(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Output;

      .. code-tab:: javascript

         const { Output } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Output } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.StackElement`\ 
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: Output properties.
   :type props: :py:class:`~@aws-cdk/cdk.OutputProps`\  *(optional)*

   .. py:method:: makeImportValue() -> any

      Returns an FnImportValue bound to this export name.



      :rtype: any


   .. py:method:: obtainExportName() -> string

      Allocate an export name for this `Output` if not already done.



      :rtype: string


   .. py:method:: toCloudFormation() -> json

      *Implements* :py:meth:`@aws-cdk/cdk.StackElement.toCloudFormation`

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged

      at the root level to ensure there are no identity conflicts.

      

      For example, a Resource class will return something like:

      {

         Resources: {

           [this.logicalId]: {

             Type: this.resourceType,

             Properties: this.props,

             Condition: this.condition

           }

         }

      }



      :rtype: json


   .. py:attribute:: ref

      :type: string *(readonly)*


   .. py:attribute:: value

      The value of the property returned by the aws cloudformation describe-stacks command.

      The value of an output can include literals, parameter references, pseudo-parameters,

      a mapping value, or intrinsic functions.



      :type: any *(readonly)*


   .. py:attribute:: condition

      A condition from the "Conditions" section to associate with this output

      value. If the condition evaluates to `false`, this output value will not

      be included in the stack.



      :type: :py:class:`~@aws-cdk/cdk.Condition`\  *(optional)* *(readonly)*


   .. py:attribute:: description

      A String type that describes the output value.

      The description can be a maximum of 4 K in length.



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: export

      The name of the resource output to be exported for a cross-stack reference.

      By default, the logical ID of the Output element is used as it's export name.

      

      May be undefined if the Output hasn't been exported yet.



      :type: string *(optional)*


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.prepare>`

      Automatically detect references in this StackElement



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack



      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of



      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.Stack`\ 


OutputProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: OutputProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.OutputProps;

      .. code-tab:: javascript

         // OutputProps is an interface

      .. code-tab:: typescript

         import { OutputProps } from '@aws-cdk/cdk';





   .. py:attribute:: condition

      A condition from the "Conditions" section to associate with this output

      value. If the condition evaluates to `false`, this output value will not

      be included in the stack.



      :type: :py:class:`~@aws-cdk/cdk.Condition`\  *(optional)*


   .. py:attribute:: description

      A String type that describes the output value.

      The description can be a maximum of 4 K in length.



      :type: string *(optional)*


   .. py:attribute:: disableExport

      Disables the automatic allocation of an export name for this output.

      

      This prohibits exporting this value, either by specifying `export` or

      by calling `makeImportValue()`.



      :type: boolean *(optional)*
      :default: false


   .. py:attribute:: export

      The name used to export the value of this output across stacks.

      

      To import the value from another stack, use `FnImportValue(export)`. You

      can create an import value token by calling `output.makeImportValue()`.



      :type: string *(optional)*
      :default: Automatically allocate a name when `makeImportValue()`  is
called.


   .. py:attribute:: value

      The value of the property returned by the aws cloudformation describe-stacks command.

      The value of an output can include literals, parameter references, pseudo-parameters,

      a mapping value, or intrinsic functions.



      :type: any *(optional)*


Parameter
^^^^^^^^^

.. py:class:: Parameter(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Parameter;

      .. code-tab:: javascript

         const { Parameter } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Parameter } from '@aws-cdk/cdk';



   Use the optional Parameters section to customize your templates.

   Parameters enable you to input custom values to your template each time you create or

   update a stack.



   :extends: :py:class:`~@aws-cdk/cdk.Referenceable`\ 
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: The parameter properties.
   :type props: :py:class:`~@aws-cdk/cdk.ParameterProps`\ 

   .. py:method:: resolve() -> any

      Allows using parameters as tokens without the need to dereference them.

      This implicitly implements Token, until we make it an interface.



      :rtype: any


   .. py:method:: toCloudFormation() -> json

      *Implements* :py:meth:`@aws-cdk/cdk.StackElement.toCloudFormation`

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged

      at the root level to ensure there are no identity conflicts.

      

      For example, a Resource class will return something like:

      {

         Resources: {

           [this.logicalId]: {

             Type: this.resourceType,

             Properties: this.props,

             Condition: this.condition

           }

         }

      }



      :rtype: json


   .. py:attribute:: value

      A token that represents the actual value of this parameter.



      :type: :py:class:`~@aws-cdk/cdk.Token`\ 


   .. py:attribute:: valueAsList

      The parameter value token represented as a string array.



      :type: string[]


   .. py:attribute:: valueAsString

      The parameter value token represented as a string.



      :type: string


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.prepare>`

      Automatically detect references in this StackElement



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack



      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of



      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.Stack`\ 


ParameterProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ParameterProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ParameterProps;

      .. code-tab:: javascript

         // ParameterProps is an interface

      .. code-tab:: typescript

         import { ParameterProps } from '@aws-cdk/cdk';





   .. py:attribute:: type

      The data type for the parameter (DataType).



      :type: string


   .. py:attribute:: allowedPattern

      A regular expression that represents the patterns to allow for String types.



      :type: string *(optional)*


   .. py:attribute:: allowedValues

      An array containing the list of values allowed for the parameter.



      :type: string[] *(optional)*


   .. py:attribute:: constraintDescription

      A string that explains a constraint when the constraint is violated.

      For example, without a constraint description, a parameter that has an allowed

      pattern of [A-Za-z0-9]+ displays the following error message when the user specifies

      an invalid value:



      :type: string *(optional)*


   .. py:attribute:: default

      A value of the appropriate type for the template to use if no value is specified

      when a stack is created. If you define constraints for the parameter, you must specify

      a value that adheres to those constraints.



      :type: any *(optional)*


   .. py:attribute:: description

      A string of up to 4000 characters that describes the parameter.



      :type: string *(optional)*


   .. py:attribute:: maxLength

      An integer value that determines the largest number of characters you want to allow for String types.



      :type: number *(optional)*


   .. py:attribute:: maxValue

      A numeric value that determines the largest numeric value you want to allow for Number types.



      :type: number *(optional)*


   .. py:attribute:: minLength

      An integer value that determines the smallest number of characters you want to allow for String types.



      :type: number *(optional)*


   .. py:attribute:: minValue

      A numeric value that determines the smallest numeric value you want to allow for Number types.



      :type: number *(optional)*


   .. py:attribute:: noEcho

      Whether to mask the parameter value when anyone makes a call that describes the stack.

      If you set the value to ``true``, the parameter value is masked with asterisks (``*****``).



      :type: boolean *(optional)*


Ref
^^^

.. py:class:: Ref(element)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Ref;

      .. code-tab:: javascript

         const { Ref } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Ref } from '@aws-cdk/cdk';



   A generic, untyped reference to a Stack Element



   :extends: :py:class:`~@aws-cdk/cdk.CfnReference`\ 
   :param element: 
   :type element: :py:class:`~@aws-cdk/cdk.StackElement`\ 

   .. py:method:: consumeFromStack(consumingStack)

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnReference <@aws-cdk/cdk.CfnReference.consumeFromStack>`

      Register a stack this references is being consumed from.



      :param consumingStack: 
      :type consumingStack: :py:class:`~@aws-cdk/cdk.Stack`\ 


   .. py:method:: resolve(context) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.CfnReference <@aws-cdk/cdk.CfnReference.resolve>`

      :param context: 
      :type context: :py:class:`~@aws-cdk/cdk.ResolveContext`\ 
      :rtype: any


   .. py:attribute:: isReference

      *Inherited from* :py:attr:`@aws-cdk/cdk.CfnReference <@aws-cdk/cdk.CfnReference.isReference>`

      Indicate whether this Token represent a "reference"

      

      The Construct tree can be queried for the Reference Tokens that

      are used in it.



      :type: boolean *(optional)* *(readonly)*


   .. py:method:: toJSON() -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toJSON>`

      Turn this Token into JSON

      

      This gets called by JSON.stringify(). We want to prohibit this, because

      it's not possible to do this properly, so we just throw an error here.



      :rtype: any


   .. py:method:: toList() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toList>`

      Return a string list representation of this token

      

      Call this if the Token intrinsically evaluates to a list of strings.

      If so, you can represent the Token in a similar way in the type

      system.

      

      Note that even though the Token is represented as a list of strings, you

      still cannot do any operations on it such as concatenation, indexing,

      or taking its length. The only useful operations you can do to these lists

      is constructing a `FnJoin` or a `FnSelect` on it.



      :rtype: string[]


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toString>`

      Return a reversible string representation of this token

      

      If the Token is initialized with a literal, the stringified value of the

      literal is returned. Otherwise, a special quoted string representation

      of the Token is returned that can be embedded into other strings.

      

      Strings with quoted Tokens in them can be restored back into

      complex values with the Tokens restored by calling `resolve()`

      on the string.



      :rtype: string


   .. py:attribute:: displayName

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.displayName>`

      A human-readable display hint for this Token



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: valueOrFunction

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.valueOrFunction>`

      What this token will evaluate to, literal or function.



      :type: any *(optional)* *(readonly)*


Referenceable
^^^^^^^^^^^^^

.. py:class:: Referenceable(scope, id)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Referenceable;

      .. code-tab:: javascript

         const { Referenceable } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Referenceable } from '@aws-cdk/cdk';



   Base class for referenceable CloudFormation constructs which are not Resources

   

   These constructs are things like Conditions and Parameters, can be

   referenced by taking the `.ref` attribute.

   

   Resource constructs do not inherit from Referenceable because they have their

   own, more specific types returned from the .ref attribute. Also, some

   resources aren't referenceable at all (such as BucketPolicies or GatewayAttachments).



   :extends: :py:class:`~@aws-cdk/cdk.StackElement`\ 
   :abstract: Yes
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string

   .. py:attribute:: ref

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.prepare>`

      Automatically detect references in this StackElement



      *Protected method*



   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.toCloudFormation>`

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged

      at the root level to ensure there are no identity conflicts.

      

      For example, a Resource class will return something like:

      {

         Resources: {

           [this.logicalId]: {

             Type: this.resourceType,

             Properties: this.props,

             Condition: this.condition

           }

         }

      }



      :rtype: json
      :abstract: Yes


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack



      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of



      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.Stack`\ 


RemovalPolicy (enum)
^^^^^^^^^^^^^^^^^^^^

.. py:class:: RemovalPolicy

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.RemovalPolicy;

      .. code-tab:: javascript

         const { RemovalPolicy } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { RemovalPolicy } from '@aws-cdk/cdk';



   .. py:data:: Destroy

   This is the default removal policy for most resources. It means that when the resource

   is removed from the app, it will be physically destroyed.



   .. py:data:: Orphan

   This uses the 'Retain' DeletionPolicy, which will cause the resource to be retained

   in the account, but orphaned from the stack.



   .. py:data:: Forbid

   This will apply the 'Retain' DeletionPolicy and also add metadata for the toolkit

   to apply a CloudFormation stack policy which forbids the deletion of resource.




RemoveTag
^^^^^^^^^

.. py:class:: RemoveTag(key, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.RemoveTag;

      .. code-tab:: javascript

         const { RemoveTag } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { RemoveTag } from '@aws-cdk/cdk';



   The RemoveTag Aspect will handle removing tags from this node and children



   :extends: :py:class:`~@aws-cdk/cdk.TagBase`\ 
   :param key: 
   :type key: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.TagProps`\  *(optional)*

   .. py:method:: applyTag(resource)

      *Implements* :py:meth:`@aws-cdk/cdk.TagBase.applyTag`

      *Protected method*

      :param resource: 
      :type resource: :py:class:`~@aws-cdk/cdk.ITaggable`\ 


   .. py:method:: visit(construct)

      *Inherited from* :py:meth:`@aws-cdk/cdk.TagBase <@aws-cdk/cdk.TagBase.visit>`

      All aspects can visit an IConstruct



      :param construct: 
      :type construct: :py:class:`~@aws-cdk/cdk.IConstruct`\ 


   .. py:attribute:: key

      *Inherited from* :py:attr:`@aws-cdk/cdk.TagBase <@aws-cdk/cdk.TagBase.key>`

      The string key for the tag



      :type: string *(readonly)*


   .. py:attribute:: props

      *Inherited from* :py:attr:`@aws-cdk/cdk.TagBase <@aws-cdk/cdk.TagBase.props>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.TagProps`\  *(readonly)*


ResolveContext (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ResolveContext

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ResolveContext;

      .. code-tab:: javascript

         // ResolveContext is an interface

      .. code-tab:: typescript

         import { ResolveContext } from '@aws-cdk/cdk';



   Current resolution context for tokens





   .. py:attribute:: prefix

      :type: string[]


   .. py:attribute:: scope

      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ 


Resource
^^^^^^^^

.. py:class:: Resource(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Resource;

      .. code-tab:: javascript

         const { Resource } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Resource } from '@aws-cdk/cdk';



   Represents a CloudFormation resource.



   :extends: :py:class:`~@aws-cdk/cdk.Referenceable`\ 
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.ResourceProps`\ 

   .. py:staticmethod:: attribute([customName]) -> any

      A decoration used to create a CloudFormation attribute property.



      :param customName: Custom name for the attribute (default is the name of the property) NOTE: we return "any" here to satistfy jsii, which doesn't support lambdas.
      :type customName: string *(optional)*
      :rtype: any


   .. py:staticmethod:: isResource(construct) -> boolean

      Check whether the given construct is a Resource



      :param construct: 
      :type construct: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
      :rtype: boolean


   .. py:staticmethod:: isTaggable(construct) -> boolean

      Check whether the given construct is Taggable



      :param construct: 
      :type construct: any
      :rtype: boolean


   .. py:method:: addDeletionOverride(path)

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete
      :type path: string


   .. py:method:: addDependsOn(resource)

      Indicates that this resource depends on another resource and cannot be provisioned

      unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`~@aws-cdk/cdk.Resource`\ 


   .. py:method:: addOverride(path, value)

      Adds an override to the synthesized CloudFormation resource. To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types. Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value. Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property
      :type propertyPath: string
      :param value: The value
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      Returns a token for an runtime attribute of this resource.

      Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility

      in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`~@aws-cdk/cdk.CfnReference`\ 


   .. py:method:: renderProperties(properties) -> string => any

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:method:: toCloudFormation() -> json

      *Implements* :py:meth:`@aws-cdk/cdk.StackElement.toCloudFormation`

      Emits CloudFormation for this resource.



      :rtype: json


   .. py:attribute:: options

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`~@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.prepare>`

      Automatically detect references in this StackElement



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack



      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of



      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.Stack`\ 


ResourceOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ResourceOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ResourceOptions;

      .. code-tab:: javascript

         // ResourceOptions is an interface

      .. code-tab:: typescript

         import { ResourceOptions } from '@aws-cdk/cdk';





   .. py:attribute:: condition

      A condition to associate with this resource. This means that only if the condition evaluates to 'true' when the stack

      is deployed, the resource will be included. This is provided to allow CDK projects to produce legacy templates, but noramlly

      there is no need to use it in CDK projects.



      :type: :py:class:`~@aws-cdk/cdk.Condition`\  *(optional)*


   .. py:attribute:: creationPolicy

      Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until

      AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded. To signal a

      resource, you can use the cfn-signal helper script or SignalResource API. AWS CloudFormation publishes valid signals

      to the stack events so that you track the number of signals sent.



      :type: :py:class:`~@aws-cdk/cdk.CreationPolicy`\  *(optional)*


   .. py:attribute:: deletionPolicy

      With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted.

      You specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy

      attribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations

      that lead to resources being removed.



      :type: :py:class:`~@aws-cdk/cdk.DeletionPolicy`\  *(optional)*


   .. py:attribute:: metadata

      Metadata associated with the CloudFormation resource. This is not the same as the construct metadata which can be added

      using construct.addMetadata(), but would not appear in the CloudFormation template automatically.



      :type: string => any *(optional)*


   .. py:attribute:: updatePolicy

      Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup

      resource. AWS CloudFormation invokes one of three update policies depending on the type of change you make or whether a

      scheduled action is associated with the Auto Scaling group.



      :type: :py:class:`~@aws-cdk/cdk.UpdatePolicy`\  *(optional)*


   .. py:attribute:: updateReplacePolicy

      Use the UpdateReplacePolicy attribute to retain or (in some cases) backup the existing physical instance of a resource

      when it is replaced during a stack update operation.



      :type: :py:class:`~@aws-cdk/cdk.DeletionPolicy`\  *(optional)*


ResourceProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ResourceProps;

      .. code-tab:: javascript

         // ResourceProps is an interface

      .. code-tab:: typescript

         import { ResourceProps } from '@aws-cdk/cdk';





   .. py:attribute:: type

      CloudFormation resource type.



      :type: string


   .. py:attribute:: properties

      CloudFormation properties.



      :type: any *(optional)*


ResourceSignal (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ResourceSignal

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ResourceSignal;

      .. code-tab:: javascript

         // ResourceSignal is an interface

      .. code-tab:: typescript

         import { ResourceSignal } from '@aws-cdk/cdk';



   When AWS CloudFormation creates the associated resource, configures the number of required success signals and

   the length of time that AWS CloudFormation waits for those signals.





   .. py:attribute:: count

      The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE.

      If the resource receives a failure signal or doesn't receive the specified number of signals before the timeout period

      expires, the resource creation fails and AWS CloudFormation rolls the stack back.



      :type: number *(optional)*


   .. py:attribute:: timeout

      The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property.

      The timeout period starts after AWS CloudFormation starts creating the resource, and the timeout expires no sooner

      than the time you specify but can occur shortly thereafter. The maximum time that you can specify is 12 hours.



      :type: string *(optional)*


Root
^^^^

.. py:class:: Root()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Root;

      .. code-tab:: javascript

         const { Root } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Root } from '@aws-cdk/cdk';



   Represents the root of a construct tree.

   No scope and no name.



   :extends: :py:class:`~@aws-cdk/cdk.Construct`\ 

   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


Rule
^^^^

.. py:class:: Rule(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Rule;

      .. code-tab:: javascript

         const { Rule } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Rule } from '@aws-cdk/cdk';



   The Rules that define template constraints in an AWS Service Catalog portfolio describe when

   end users can use the template and which values they can specify for parameters that are declared

   in the AWS CloudFormation template used to create the product they are attempting to use. Rules

   are useful for preventing end users from inadvertently specifying an incorrect value.

   For example, you can add a rule to verify whether end users specified a valid subnet in a

   given VPC or used m1.small instance types for test environments. AWS CloudFormation uses

   rules to validate parameter values before it creates the resources for the product.

   

   A rule can include a RuleCondition property and must include an Assertions property.

   For each rule, you can define only one rule condition; you can define one or more asserts within the Assertions property.

   You define a rule condition and assertions by using rule-specific intrinsic functions.

   https://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html


   :extends: :py:class:`~@aws-cdk/cdk.Referenceable`\ 
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: The rule props.
   :type props: :py:class:`~@aws-cdk/cdk.RuleProps`\  *(optional)*

   .. py:method:: addAssertion(condition, description)

      Adds an assertion to the rule.



      :param condition: The expression to evaluation.
      :type condition: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 
      :param description: The description of the assertion.
      :type description: string


   .. py:method:: toCloudFormation() -> json

      *Implements* :py:meth:`@aws-cdk/cdk.StackElement.toCloudFormation`

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged

      at the root level to ensure there are no identity conflicts.

      

      For example, a Resource class will return something like:

      {

         Resources: {

           [this.logicalId]: {

             Type: this.resourceType,

             Properties: this.props,

             Condition: this.condition

           }

         }

      }



      :rtype: json


   .. py:attribute:: assertions

      Assertions which define the rule.



      :type: :py:class:`~@aws-cdk/cdk.RuleAssertion`\ [] *(optional)*


   .. py:attribute:: ruleCondition

      If the rule condition evaluates to false, the rule doesn't take effect.

      If the function in the rule condition evaluates to true, expressions in each assert are evaluated and applied.



      :type: :py:class:`~@aws-cdk/cdk.IConditionExpression`\  *(optional)*


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.prepare>`

      Automatically detect references in this StackElement



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack



      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of



      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.Stack`\ 


RuleAssertion (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RuleAssertion

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.RuleAssertion;

      .. code-tab:: javascript

         // RuleAssertion is an interface

      .. code-tab:: typescript

         import { RuleAssertion } from '@aws-cdk/cdk';



   A rule assertion.





   .. py:attribute:: assert

      The assertion.



      :type: :py:class:`~@aws-cdk/cdk.IConditionExpression`\ 


   .. py:attribute:: assertDescription

      The assertion description.



      :type: string


RuleProps (interface)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RuleProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.RuleProps;

      .. code-tab:: javascript

         // RuleProps is an interface

      .. code-tab:: typescript

         import { RuleProps } from '@aws-cdk/cdk';



   A rule can include a RuleCondition property and must include an Assertions property.

   For each rule, you can define only one rule condition; you can define one or more asserts within the Assertions property.

   You define a rule condition and assertions by using rule-specific intrinsic functions.

   

   You can use the following rule-specific intrinsic functions to define rule conditions and assertions:

   

     Fn::And

     Fn::Contains

     Fn::EachMemberEquals

     Fn::EachMemberIn

     Fn::Equals

     Fn::If

     Fn::Not

     Fn::Or

     Fn::RefAll

     Fn::ValueOf

     Fn::ValueOfAll

   

   https://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html





   .. py:attribute:: assertions

      Assertions which define the rule.



      :type: :py:class:`~@aws-cdk/cdk.RuleAssertion`\ [] *(optional)*


   .. py:attribute:: ruleCondition

      If the rule condition evaluates to false, the rule doesn't take effect.

      If the function in the rule condition evaluates to true, expressions in each assert are evaluated and applied.



      :type: :py:class:`~@aws-cdk/cdk.IConditionExpression`\  *(optional)*


SSMParameterProvider
^^^^^^^^^^^^^^^^^^^^

.. py:class:: SSMParameterProvider(context, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.SSMParameterProvider;

      .. code-tab:: javascript

         const { SSMParameterProvider } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { SSMParameterProvider } from '@aws-cdk/cdk';



   Context provider that will read values from the SSM parameter store in the indicated account and region



   :param context: 
   :type context: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.SSMParameterProviderProps`\ 

   .. py:method:: parameterValue([defaultValue]) -> any

      Return the SSM parameter string with the indicated key



      :param defaultValue: 
      :type defaultValue: string *(optional)*
      :rtype: any


SSMParameterProviderProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: SSMParameterProviderProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.SSMParameterProviderProps;

      .. code-tab:: javascript

         // SSMParameterProviderProps is an interface

      .. code-tab:: typescript

         import { SSMParameterProviderProps } from '@aws-cdk/cdk';





   .. py:attribute:: parameterName

      The name of the parameter to lookup



      :type: string


Secret
^^^^^^

.. py:class:: Secret([valueOrFunction, [displayName]])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Secret;

      .. code-tab:: javascript

         const { Secret } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Secret } from '@aws-cdk/cdk';



   A token that represents a value that's expected to be a secret, like

   passwords and keys.

   

   It is recommended to use the `SecretParameter` construct in order to import

   secret values from the SSM Parameter Store instead of storing them in your

   code.

   

   However, you can also just pass in values, like any other token: `new Secret('bla')`



   :extends: :py:class:`~@aws-cdk/cdk.Token`\ 
   :param valueOrFunction: What this token will evaluate to, literal or function.
   :type valueOrFunction: any *(optional)*
   :param displayName: A human-readable display hint for this Token
   :type displayName: string *(optional)*

   .. py:method:: resolve(_context) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.resolve>`

      :param _context: 
      :type _context: :py:class:`~@aws-cdk/cdk.ResolveContext`\ 
      :return: The resolved value for this token.
      :rtype: any


   .. py:method:: toJSON() -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toJSON>`

      Turn this Token into JSON

      

      This gets called by JSON.stringify(). We want to prohibit this, because

      it's not possible to do this properly, so we just throw an error here.



      :rtype: any


   .. py:method:: toList() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toList>`

      Return a string list representation of this token

      

      Call this if the Token intrinsically evaluates to a list of strings.

      If so, you can represent the Token in a similar way in the type

      system.

      

      Note that even though the Token is represented as a list of strings, you

      still cannot do any operations on it such as concatenation, indexing,

      or taking its length. The only useful operations you can do to these lists

      is constructing a `FnJoin` or a `FnSelect` on it.



      :rtype: string[]


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toString>`

      Return a reversible string representation of this token

      

      If the Token is initialized with a literal, the stringified value of the

      literal is returned. Otherwise, a special quoted string representation

      of the Token is returned that can be embedded into other strings.

      

      Strings with quoted Tokens in them can be restored back into

      complex values with the Tokens restored by calling `resolve()`

      on the string.



      :rtype: string


   .. py:attribute:: displayName

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.displayName>`

      A human-readable display hint for this Token



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: isReference

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.isReference>`

      Indicate whether this Token represent a "reference"

      

      The Construct tree can be queried for the Reference Tokens that

      are used in it.



      :type: boolean *(optional)* *(readonly)*


   .. py:attribute:: valueOrFunction

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.valueOrFunction>`

      What this token will evaluate to, literal or function.



      :type: any *(optional)* *(readonly)*


SecretParameter
^^^^^^^^^^^^^^^

.. py:class:: SecretParameter(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.SecretParameter;

      .. code-tab:: javascript

         const { SecretParameter } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { SecretParameter } from '@aws-cdk/cdk';



   Defines a secret value resolved from the Systems Manager (SSM) Parameter

   Store during deployment. This is useful for referencing values that you do

   not wish to include in your code base, such as secrets, passwords and keys.

   

   This construct will add a CloudFormation parameter to your template bound to

   an SSM parameter (of type "AWS::SSM::Parameter::Value<String>"). Deployment

   will fail if the value doesn't exist in the target environment.

   

   Important: For values other than secrets, prefer to use the

   `SSMParameterProvider` which resolves SSM parameter in design-time, and

   ensures that stack deployments are deterministic.



   :extends: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.SecretParameterProps`\ 

   .. py:attribute:: value

      The value of the secret parameter.



      :type: :py:class:`~@aws-cdk/cdk.Secret`\ 


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


SecretParameterProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: SecretParameterProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.SecretParameterProps;

      .. code-tab:: javascript

         // SecretParameterProps is an interface

      .. code-tab:: typescript

         import { SecretParameterProps } from '@aws-cdk/cdk';





   .. py:attribute:: ssmParameter

      The name of the SSM parameter where the secret value is stored.



      :type: string


   .. py:attribute:: allowedPattern

      A regular expression that represents the patterns to allow for String types.



      :type: string *(optional)*


   .. py:attribute:: allowedValues

      An array containing the list of values allowed for the parameter.



      :type: string[] *(optional)*


   .. py:attribute:: constraintDescription

      A string that explains a constraint when the constraint is violated.

      For example, without a constraint description, a parameter that has an allowed

      pattern of [A-Za-z0-9]+ displays the following error message when the user specifies

      an invalid value:



      :type: string *(optional)*


   .. py:attribute:: description

      A string of up to 4000 characters that describes the parameter.



      :type: string *(optional)*
      :default: No description


   .. py:attribute:: maxLength

      An integer value that determines the largest number of characters you want to allow for String types.



      :type: number *(optional)*


   .. py:attribute:: minLength

      An integer value that determines the smallest number of characters you want to allow for String types.



      :type: number *(optional)*


Stack
^^^^^

.. py:class:: Stack([scope, [name, [props]]])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Stack;

      .. code-tab:: javascript

         const { Stack } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Stack } from '@aws-cdk/cdk';



   A root construct which represents a single CloudFormation stack.



   :extends: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param scope: Parent of this stack, usually a Program instance.
   :type scope: :py:class:`~@aws-cdk/cdk.App`\  *(optional)*
   :param name: The name of the CloudFormation stack. Defaults to "Stack".
   :type name: string *(optional)*
   :param props: Stack properties.
   :type props: :py:class:`~@aws-cdk/cdk.StackProps`\  *(optional)*

   .. py:staticmethod:: annotatePhysicalName(construct, [physicalName])

      Adds a metadata annotation "aws:cdk:physical-name" to the construct if physicalName

      is non-null. This can be used later by tools and aspects to determine if resources

      have been created with physical names.



      :param construct: 
      :type construct: :py:class:`~@aws-cdk/cdk.Construct`\ 
      :param physicalName: 
      :type physicalName: string *(optional)*


   .. py:staticmethod:: find(scope) -> @aws-cdk/cdk.Stack

      Traverses the tree and looks up for the Stack root.



      :param scope: A construct in the tree
      :type scope: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
      :return: The Stack object (throws if the node is not part of a Stack-rooted tree)
      :rtype: :py:class:`~@aws-cdk/cdk.Stack`\ 


   .. py:staticmethod:: isStack(construct) -> boolean

      Return whether the given object is a Stack.

      

      We do attribute detection since we can't reliably use 'instanceof'.



      :param construct: 
      :type construct: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
      :rtype: boolean


   .. py:staticmethod:: tryFind(scope) -> @aws-cdk/cdk.Stack

      Traverses the tree and looks up for the Stack root.



      :param scope: A construct in the tree
      :type scope: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
      :return: The Stack object, or undefined if no stack was found.
      :rtype: :py:class:`~@aws-cdk/cdk.Stack`\  *(optional)*


   .. py:method:: addDependency(stack)

      Add a dependency between this stack and another stack



      :param stack: 
      :type stack: :py:class:`~@aws-cdk/cdk.Stack`\ 


   .. py:method:: dependencies() -> @aws-cdk/cdk.Stack[]

      Return the stacks this stack depends on



      :rtype: :py:class:`~@aws-cdk/cdk.Stack`\ []


   .. py:method:: findResource(path) -> @aws-cdk/cdk.Resource

      Looks up a resource by path.



      :param path: 
      :type path: string
      :return: The Resource or undefined if not found
      :rtype: :py:class:`~@aws-cdk/cdk.Resource`\  *(optional)*


   .. py:method:: formatArn(components) -> string

      Creates an ARN from components.

      

      If `partition`, `region` or `account` are not specified, the stack's

      partition, region and account will be used.

      

      If any component is the empty string, an empty string will be inserted

      into the generated ARN at the location that component corresponds to.

      

      The ARN will be formatted as follows:

      

         arn:{partition}:{service}:{region}:{account}:{resource}{sep}}{resource-name}

      

      The required ARN pieces that are omitted will be taken from the stack that

      the 'scope' is attached to. If all ARN pieces are supplied, the supplied scope

      can be 'undefined'.



      :param components: 
      :type components: :py:class:`~@aws-cdk/cdk.ArnComponents`\ 
      :rtype: string


   .. py:method:: parentApp() -> @aws-cdk/cdk.App

      :rtype: :py:class:`~@aws-cdk/cdk.App`\  *(optional)*


   .. py:method:: parseArn(arn, [sepIfToken, [hasName]]) -> @aws-cdk/cdk.ArnComponents

      Given an ARN, parses it and returns components.

      

      If the ARN is a concrete string, it will be parsed and validated. The

      separator (`sep`) will be set to '/' if the 6th component includes a '/',

      in which case, `resource` will be set to the value before the '/' and

      `resourceName` will be the rest. In case there is no '/', `resource` will

      be set to the 6th components and `resourceName` will be set to the rest

      of the string.

      

      If the ARN includes tokens (or is a token), the ARN cannot be validated,

      since we don't have the actual value yet at the time of this function

      call. You will have to know the separator and the type of ARN. The

      resulting `ArnComponents` object will contain tokens for the

      subexpressions of the ARN, not string literals. In this case this

      function cannot properly parse the complete final resourceName (path) out

      of ARNs that use '/' to both separate the 'resource' from the

      'resourceName' AND to subdivide the resourceName further. For example, in

      S3 ARNs:

      

          arn:aws:s3:::my_corporate_bucket/path/to/exampleobject.png

      

      After parsing the resourceName will not contain

      'path/to/exampleobject.png' but simply 'path'. This is a limitation

      because there is no slicing functionality in CloudFormation templates.



      :param arn: 
      :type arn: string
      :param sepIfToken: 
      :type sepIfToken: string *(optional)*
      :param hasName: Whether there is a name component in the ARN at all. For example, SNS Topics ARNs have the 'resource' component contain the topic name, and no 'resourceName' component.
      :type hasName: boolean *(optional)*
      :return: an ArnComponents object which allows access to the various
         components of the ARN.
      :rtype: :py:class:`~@aws-cdk/cdk.ArnComponents`\ 


   .. py:method:: prepare()

      *Overrides* :py:meth:`@aws-cdk/cdk.Construct.prepare`

      Prepare stack

      

      Find all CloudFormation references and tell them we're consuming them.

      

      Find all dependencies as well and add the appropriate DependsOn fields.



      *Protected method*



   .. py:method:: renameLogical(oldId, newId)

      Rename a generated logical identities



      :param oldId: 
      :type oldId: string
      :param newId: 
      :type newId: string


   .. py:method:: reportMissingContext(key, details)

      Indicate that a context key was expected

      

      Contains instructions on how the key should be supplied.



      :param key: Key that uniquely identifies this missing context.
      :type key: string
      :param details: The set of parameters needed to obtain the context (specific to context provider).
      :type details: :py:class:`@aws-cdk/cx-api.MissingContext`\ 


   .. py:method:: requireAccountId([why]) -> string

      Returns the AWS account ID of this Stack,

      or throws an exception if the account ID is not set in the environment.



      :param why: more information about why is the account ID required
      :type why: string *(optional)*
      :return: the AWS account ID of this Stack
      :rtype: string


   .. py:method:: requireRegion([why]) -> string

      :param why: more information about why region is required.
      :type why: string *(optional)*
      :return: The region in which this stack is deployed. Throws if region is not defined.
      :rtype: string


   .. py:method:: toCloudFormation() -> any

      Returns the CloudFormation template for this stack by traversing

      the tree and invoking toCloudFormation() on all Entity objects.



      :rtype: any


   .. py:attribute:: accountId

      The account in which this stack is defined

      

      Either returns the literal account for this stack if it was specified

      literally upon Stack construction, or a symbolic value that will evaluate

      to the correct account at deployment time.



      :type: string *(readonly)*


   .. py:attribute:: env

      The environment in which this stack is deployed.



      :type: :py:class:`~@aws-cdk/cdk.Environment`\  *(readonly)*


   .. py:attribute:: logicalIds

      Logical ID generation strategy



      :type: :py:class:`~@aws-cdk/cdk.LogicalIDs`\  *(readonly)*


   .. py:attribute:: missingContext

      Lists all missing contextual information.

      This is returned when the stack is synthesized under the 'missing' attribute

      and allows tooling to obtain the context and re-synthesize.



      :type: string => :py:class:`@aws-cdk/cx-api.MissingContext`\  *(readonly)*


   .. py:attribute:: name

      The CloudFormation stack name.



      :type: string *(readonly)*


   .. py:attribute:: notificationArns

      Returns the list of notification Amazon Resource Names (ARNs) for the current stack.



      :type: string[] *(readonly)*


   .. py:attribute:: partition

      The partition in which this stack is defined



      :type: string *(readonly)*


   .. py:attribute:: region

      The region in which this stack is defined

      

      Either returns the literal region for this stack if it was specified

      literally upon Stack construction, or a symbolic value that will evaluate

      to the correct region at deployment time.



      :type: string *(readonly)*


   .. py:attribute:: stackId

      The ID of the stack



      :type: string *(readonly)*


   .. py:attribute:: stackName

      The name of the stack currently being deployed

      

      Only available at deployment time.



      :type: string *(readonly)*


   .. py:attribute:: templateOptions

      Options for CloudFormation template (like version, transform, description).



      :type: :py:class:`~@aws-cdk/cdk.TemplateOptions`\  *(readonly)*


   .. py:attribute:: urlSuffix

      The Amazon domain suffix for the region in which this stack is defined



      :type: string *(readonly)*


   .. py:attribute:: props

      Stack properties.



      :type: :py:class:`~@aws-cdk/cdk.StackProps`\  *(optional)* *(readonly)*


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


StackElement
^^^^^^^^^^^^

.. py:class:: StackElement(scope, id)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.StackElement;

      .. code-tab:: javascript

         const { StackElement } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { StackElement } from '@aws-cdk/cdk';



   An element of a CloudFormation stack.



   :extends: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :abstract: Yes
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string

   .. py:staticmethod:: isStackElement(construct) -> boolean

      Returns `true` if a construct is a stack element (i.e. part of the

      synthesized cloudformation template).

      

      Uses duck-typing instead of `instanceof` to allow stack elements from different

      versions of this library to be included in the same stack.



      :param construct: 
      :type construct: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
      :return: The construct as a stack element or undefined if it is not a stack element.
      :rtype: boolean


   .. py:method:: overrideLogicalId(newLogicalId)

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Overrides* :py:meth:`@aws-cdk/cdk.Construct.prepare`

      Automatically detect references in this StackElement



      *Protected method*



   .. py:method:: toCloudFormation() -> json

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged

      at the root level to ensure there are no identity conflicts.

      

      For example, a Resource class will return something like:

      {

         Resources: {

           [this.logicalId]: {

             Type: this.resourceType,

             Properties: this.props,

             Condition: this.condition

           }

         }

      }



      :rtype: json
      :abstract: Yes


   .. py:attribute:: creationStackTrace

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      Return the path with respect to the stack



      :type: string *(readonly)*


   .. py:attribute:: stack

      The stack this Construct has been made a part of



      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.Stack`\ 


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


StackProps (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: StackProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.StackProps;

      .. code-tab:: javascript

         // StackProps is an interface

      .. code-tab:: typescript

         import { StackProps } from '@aws-cdk/cdk';





   .. py:attribute:: env

      The AWS environment (account/region) where this stack will be deployed.

      

      If not supplied, the `default-account` and `default-region` context parameters will be

      used. If they are undefined, it will not be possible to deploy the stack.



      :type: :py:class:`~@aws-cdk/cdk.Environment`\  *(optional)*


   .. py:attribute:: namingScheme

      Strategy for logical ID generation

      

      Optional. If not supplied, the HashedNamingScheme will be used.



      :type: :py:class:`~@aws-cdk/cdk.IAddressingScheme`\  *(optional)*


StringListOutput
^^^^^^^^^^^^^^^^

.. py:class:: StringListOutput(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.StringListOutput;

      .. code-tab:: javascript

         const { StringListOutput } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { StringListOutput } from '@aws-cdk/cdk';



   An output for a list of strings.

   

   Exports a list of Tokens via an Output variable, and return a list of Tokens

   that selects the imported values for them.



   :extends: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param scope: 
   :type scope: :py:class:`~@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.StringListOutputProps`\ 

   .. py:method:: makeImportValues() -> string[]

      Return an array of imported values for this Output



      :rtype: string[]


   .. py:attribute:: length

      Number of elements in the stringlist



      :type: number *(readonly)*


   .. py:method:: apply(aspect)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.apply>`

      Applies the aspect to this Constructs node



      :param aspect: 
      :type aspect: :py:class:`~@aws-cdk/cdk.IAspect`\ 


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`~@aws-cdk/cdk.ConstructNode`\  *(readonly)*


StringListOutputProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: StringListOutputProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.StringListOutputProps;

      .. code-tab:: javascript

         // StringListOutputProps is an interface

      .. code-tab:: typescript

         import { StringListOutputProps } from '@aws-cdk/cdk';



   Properties for ListOutput





   .. py:attribute:: values

      The list of primitives to export



      :type: any[] *(readonly)*


   .. py:attribute:: condition

      A condition from the "Conditions" section to associate with this output

      value. If the condition evaluates to `false`, this output value will not

      be included in the stack.



      :type: :py:class:`~@aws-cdk/cdk.Condition`\  *(optional)* *(readonly)*


   .. py:attribute:: description

      A String type that describes the output value.

      The description can be a maximum of 4 K in length.



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: disableExport

      Disables the automatic allocation of an export name for this output.



      :type: boolean *(optional)* *(readonly)*
      :default: false, which means that an export name is either explicitly
specified or allocated based on the output's logical ID and stack name.


   .. py:attribute:: export

      The name used to export the value of this output across stacks. To import

      the value from another stack, use `FnImportValue(export)`. You can create

      an import value token by calling `output.makeImportValue()`.



      :type: string *(optional)* *(readonly)*
      :default: The default behavior is to automatically allocate an export name
for outputs based on the stack name and the output's logical ID. To
create an output without an export, set `disableExport: true`.


   .. py:attribute:: separator

      The separator to use to separate stringified values



      :type: string *(optional)* *(readonly)*
      :default: ","


Tag
^^^

.. py:class:: Tag(key, value, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Tag;

      .. code-tab:: javascript

         const { Tag } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Tag } from '@aws-cdk/cdk';



   The Tag Aspect will handle adding a tag to this node and cascading tags to children



   :extends: :py:class:`~@aws-cdk/cdk.TagBase`\ 
   :param key: 
   :type key: string
   :param value: 
   :type value: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.TagProps`\  *(optional)*

   .. py:method:: applyTag(resource)

      *Implements* :py:meth:`@aws-cdk/cdk.TagBase.applyTag`

      *Protected method*

      :param resource: 
      :type resource: :py:class:`~@aws-cdk/cdk.ITaggable`\ 


   .. py:attribute:: value

      The string value of the tag



      :type: string *(readonly)*


   .. py:method:: visit(construct)

      *Inherited from* :py:meth:`@aws-cdk/cdk.TagBase <@aws-cdk/cdk.TagBase.visit>`

      All aspects can visit an IConstruct



      :param construct: 
      :type construct: :py:class:`~@aws-cdk/cdk.IConstruct`\ 


   .. py:attribute:: key

      *Inherited from* :py:attr:`@aws-cdk/cdk.TagBase <@aws-cdk/cdk.TagBase.key>`

      The string key for the tag



      :type: string *(readonly)*


   .. py:attribute:: props

      *Inherited from* :py:attr:`@aws-cdk/cdk.TagBase <@aws-cdk/cdk.TagBase.props>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.TagProps`\  *(readonly)*


TagBase
^^^^^^^

.. py:class:: TagBase(key, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.TagBase;

      .. code-tab:: javascript

         const { TagBase } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { TagBase } from '@aws-cdk/cdk';



   The common functionality for Tag and Remove Tag Aspects



   :implements: :py:class:`~@aws-cdk/cdk.IAspect`\ 
   :abstract: Yes
   :param key: 
   :type key: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.TagProps`\  *(optional)*

   .. py:method:: applyTag(resource)

      *Protected method*

      :param resource: 
      :type resource: :py:class:`~@aws-cdk/cdk.ITaggable`\ 
      :abstract: Yes


   .. py:method:: visit(construct)

      *Implements* :py:meth:`@aws-cdk/cdk.IAspect.visit`

      All aspects can visit an IConstruct



      :param construct: 
      :type construct: :py:class:`~@aws-cdk/cdk.IConstruct`\ 


   .. py:attribute:: key

      The string key for the tag



      :type: string *(readonly)*


   .. py:attribute:: props

      *Protected property*

      :type: :py:class:`~@aws-cdk/cdk.TagProps`\  *(readonly)*


TagManager
^^^^^^^^^^

.. py:class:: TagManager(tagType, resourceTypeName)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.TagManager;

      .. code-tab:: javascript

         const { TagManager } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { TagManager } from '@aws-cdk/cdk';



   TagManager facilitates a common implementation of tagging for Constructs.



   :param tagType: 
   :type tagType: :py:class:`~@aws-cdk/cdk.TagType`\ 
   :param resourceTypeName: 
   :type resourceTypeName: string

   .. py:method:: removeTag(key, [props])

      Removes the specified tag from the array if it exists



      :param key: The key of the tag to remove
      :type key: string
      :param props: 
      :type props: :py:class:`~@aws-cdk/cdk.TagProps`\  *(optional)*


   .. py:method:: renderTags() -> any

      Renders tags into the proper format based on TagType



      :rtype: any


   .. py:method:: setTag(key, value, [props])

      Adds the specified tag to the array of tags



      :param key: The key value of the tag
      :type key: string
      :param value: The value value of the tag
      :type value: string
      :param props: A `TagProps` defaulted to applyToLaunchInstances true
      :type props: :py:class:`~@aws-cdk/cdk.TagProps`\  *(optional)*


   .. py:attribute:: resourceTypeName

      :type: string *(readonly)*


   .. py:attribute:: tagType

      :type: :py:class:`~@aws-cdk/cdk.TagType`\  *(readonly)*


TagProps (interface)
^^^^^^^^^^^^^^^^^^^^

.. py:class:: TagProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.TagProps;

      .. code-tab:: javascript

         // TagProps is an interface

      .. code-tab:: typescript

         import { TagProps } from '@aws-cdk/cdk';



   Properties for a tag





   .. py:attribute:: applyToLaunchedInstances

      Handles AutoScalingGroup PropagateAtLaunch property



      :type: boolean *(optional)*


   .. py:attribute:: excludeResourceTypes

      An array of Resource Types that will not receive this tag

      

      An empty array will allow this tag to be applied to all resources. A

      non-empty array will apply this tag only if the Resource type is not in

      this array.



      :type: string[] *(optional)*
      :default: []


   .. py:attribute:: includeResourceTypes

      An array of Resource Types that will receive this tag

      

      An empty array will match any Resource. A non-empty array will apply this

      tag only to Resource types that are included in this array.



      :type: string[] *(optional)*
      :default: []


   .. py:attribute:: priority

      Higher or equal priority tags will take precedence

      

      Setting priority will enable the user to control tags when they need to not

      follow the default precedence pattern of last applied and closest to the

      construct in the tree.



      :type: number *(optional)*
      :default: 0 for Tag 1 for RemoveTag


TagType (enum)
^^^^^^^^^^^^^^

.. py:class:: TagType

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.TagType;

      .. code-tab:: javascript

         const { TagType } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { TagType } from '@aws-cdk/cdk';



   .. py:data:: Standard

   .. py:data:: AutoScalingGroup

   .. py:data:: Map

   .. py:data:: NotTaggable


TemplateOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: TemplateOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.TemplateOptions;

      .. code-tab:: javascript

         // TemplateOptions is an interface

      .. code-tab:: typescript

         import { TemplateOptions } from '@aws-cdk/cdk';



   CloudFormation template options for a stack.





   .. py:attribute:: description

      Gets or sets the description of this stack.

      If provided, it will be included in the CloudFormation template's "Description" attribute.



      :type: string *(optional)*


   .. py:attribute:: metadata

      Metadata associated with the CloudFormation template.



      :type: string => any *(optional)*


   .. py:attribute:: templateFormatVersion

      Gets or sets the AWSTemplateFormatVersion field of the CloudFormation template.



      :type: string *(optional)*


   .. py:attribute:: transform

      Gets or sets the top-level template transform for this stack (e.g. "AWS::Serverless-2016-10-31").



      :type: string *(optional)*


Token
^^^^^

.. py:class:: Token([valueOrFunction, [displayName]])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.Token;

      .. code-tab:: javascript

         const { Token } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Token } from '@aws-cdk/cdk';



   Represents a special or lazily-evaluated value.

   

   Can be used to delay evaluation of a certain value in case, for example,

   that it requires some context or late-bound data. Can also be used to

   mark values that need special processing at document rendering time.

   

   Tokens can be embedded into strings while retaining their original

   semantics.



   :param valueOrFunction: What this token will evaluate to, literal or function.
   :type valueOrFunction: any *(optional)*
   :param displayName: A human-readable display hint for this Token
   :type displayName: string *(optional)*

   .. py:method:: resolve(_context) -> any

      :param _context: 
      :type _context: :py:class:`~@aws-cdk/cdk.ResolveContext`\ 
      :return: The resolved value for this token.
      :rtype: any


   .. py:method:: toJSON() -> any

      Turn this Token into JSON

      

      This gets called by JSON.stringify(). We want to prohibit this, because

      it's not possible to do this properly, so we just throw an error here.



      :rtype: any


   .. py:method:: toList() -> string[]

      Return a string list representation of this token

      

      Call this if the Token intrinsically evaluates to a list of strings.

      If so, you can represent the Token in a similar way in the type

      system.

      

      Note that even though the Token is represented as a list of strings, you

      still cannot do any operations on it such as concatenation, indexing,

      or taking its length. The only useful operations you can do to these lists

      is constructing a `FnJoin` or a `FnSelect` on it.



      :rtype: string[]


   .. py:method:: toString() -> string

      Return a reversible string representation of this token

      

      If the Token is initialized with a literal, the stringified value of the

      literal is returned. Otherwise, a special quoted string representation

      of the Token is returned that can be embedded into other strings.

      

      Strings with quoted Tokens in them can be restored back into

      complex values with the Tokens restored by calling `resolve()`

      on the string.



      :rtype: string


   .. py:attribute:: displayName

      A human-readable display hint for this Token



      :type: string *(optional)* *(readonly)*


   .. py:attribute:: isReference

      Indicate whether this Token represent a "reference"

      

      The Construct tree can be queried for the Reference Tokens that

      are used in it.



      :type: boolean *(optional)* *(readonly)*


   .. py:attribute:: valueOrFunction

      What this token will evaluate to, literal or function.



      :type: any *(optional)* *(readonly)*


UpdatePolicy (interface)
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: UpdatePolicy

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.UpdatePolicy;

      .. code-tab:: javascript

         // UpdatePolicy is an interface

      .. code-tab:: typescript

         import { UpdatePolicy } from '@aws-cdk/cdk';



   Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup

   resource. AWS CloudFormation invokes one of three update policies depending on the type of change you make or whether a

   scheduled action is associated with the Auto Scaling group.





   .. py:attribute:: autoScalingReplacingUpdate

      Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement,

      AWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation

      can roll back to the old Auto Scaling group and delete the new Auto Scaling group.



      :type: :py:class:`~@aws-cdk/cdk.AutoScalingReplacingUpdate`\  *(optional)*


   .. py:attribute:: autoScalingRollingUpdate

      To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate

      policy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling

      group in batches or all at once.



      :type: :py:class:`~@aws-cdk/cdk.AutoScalingRollingUpdate`\  *(optional)*


   .. py:attribute:: autoScalingScheduledAction

      To specify how AWS CloudFormation handles updates for the MinSize, MaxSize, and DesiredCapacity properties when

      the AWS::AutoScaling::AutoScalingGroup resource has an associated scheduled action, use the AutoScalingScheduledAction

      policy.



      :type: :py:class:`~@aws-cdk/cdk.AutoScalingScheduledAction`\  *(optional)*


   .. py:attribute:: codeDeployLambdaAliasUpdate

      To perform an AWS CodeDeploy deployment when the version changes on an AWS::Lambda::Alias resource,

      use the CodeDeployLambdaAliasUpdate update policy.



      :type: :py:class:`~@aws-cdk/cdk.CodeDeployLambdaAliasUpdate`\  *(optional)*


   .. py:attribute:: useOnlineResharding

      To modify a replication group's shards by adding or removing shards, rather than replacing the entire

      AWS::ElastiCache::ReplicationGroup resource, use the UseOnlineResharding update policy.



      :type: boolean *(optional)*


ValidationError
^^^^^^^^^^^^^^^

.. py:class:: ValidationError(source, message)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ValidationError;

      .. code-tab:: javascript

         const { ValidationError } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ValidationError } from '@aws-cdk/cdk';



   :param source: 
   :type source: :py:class:`~@aws-cdk/cdk.IConstruct`\ 
   :param message: 
   :type message: string

   .. py:attribute:: message

      :type: string *(readonly)*


   .. py:attribute:: source

      :type: :py:class:`~@aws-cdk/cdk.IConstruct`\  *(readonly)*


ValidationResult
^^^^^^^^^^^^^^^^

.. py:class:: ValidationResult([errorMessage, [results]])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ValidationResult;

      .. code-tab:: javascript

         const { ValidationResult } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ValidationResult } from '@aws-cdk/cdk';



   Representation of validation results

   

   Models a tree of validation errors so that we have as much information as possible

   about the failure that occurred.



   :param errorMessage: 
   :type errorMessage: string *(optional)*
   :param results: 
   :type results: :py:class:`~@aws-cdk/cdk.ValidationResults`\  *(optional)*

   .. py:method:: assertSuccess()

      Turn a failed validation into an exception





   .. py:method:: errorTree() -> string

      Return a string rendering of the tree of validation failures



      :rtype: string


   .. py:method:: prefix(message) -> @aws-cdk/cdk.ValidationResult

      Wrap this result with an error message, if it concerns an error



      :param message: 
      :type message: string
      :rtype: :py:class:`~@aws-cdk/cdk.ValidationResult`\ 


   .. py:attribute:: errorMessage

      :type: string *(readonly)*


   .. py:attribute:: isSuccess

      :type: boolean *(readonly)*


   .. py:attribute:: results

      :type: :py:class:`~@aws-cdk/cdk.ValidationResults`\  *(readonly)*


ValidationResults
^^^^^^^^^^^^^^^^^

.. py:class:: ValidationResults([results])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK;

      .. code-tab:: java

         import software.amazon.awscdk.ValidationResults;

      .. code-tab:: javascript

         const { ValidationResults } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ValidationResults } from '@aws-cdk/cdk';



   A collection of validation results



   :param results: 
   :type results: :py:class:`~@aws-cdk/cdk.ValidationResult`\ [] *(optional)*

   .. py:method:: collect(result)

      :param result: 
      :type result: :py:class:`~@aws-cdk/cdk.ValidationResult`\ 


   .. py:method:: errorTreeList() -> string

      :rtype: string


   .. py:method:: wrap(message) -> @aws-cdk/cdk.ValidationResult

      Wrap up all validation results into a single tree node

      

      If there are failures in the collection, add a message, otherwise

      return a success.



      :param message: 
      :type message: string
      :rtype: :py:class:`~@aws-cdk/cdk.ValidationResult`\ 


   .. py:attribute:: isSuccess

      :type: boolean *(readonly)*


   .. py:attribute:: results

      :type: :py:class:`~@aws-cdk/cdk.ValidationResult`\ []


