.. @jsii-pacmak:meta@ {"fingerprint":"sks0F1HuhdwyN8/TrPxOIcb/oQKjz+m/mwZuIaScbso="}

@aws-cdk/cdk
============

.. tabs::

   .. group-tab:: Java

      View in `Maven Central <https://repo1.maven.org/maven2/software/amazon/awscdk/cdk/0.8.1/>`_

      **Apache Buildr**:

      .. code-block:: none

         'software.amazon.awscdk:cdk:jar:0.8.1'

      **Apache Ivy**:

      .. code-block:: xml

         <dependency groupId="software.amazon.awscdk" name="cdk" rev="0.8.1"/>

      **Apache Maven**:

      .. code-block:: xml

         <dependency>
           <groupId>software.amazon.awscdk</groupId>
           <artifactId>cdk</artifactId>
           <version>0.8.1</version>
         </dependency>

      **Gradle / Grails**:

      .. code-block:: none

         compile 'software.amazon.awscdk:cdk:0.8.1'

      **Groovy Grape**:

      .. code-block:: none

         @Grapes(
         @Grab(group='software.amazon.awscdk', module='cdk', version='0.8.1')
         )


   .. group-tab:: JavaScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/cdk/v/0.8.1>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/cdk@0.8.1

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/cdk": "^0.8.1"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/cdk@0.8.1


   .. group-tab:: TypeScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/cdk/v/0.8.1>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/cdk@0.8.1

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/cdk": "^0.8.1"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/cdk@0.8.1



.. mdinclude:: ./__aws-cdk_cdk.README.md

Reference
---------

.. py:module:: @aws-cdk/cdk

AccountPrincipal
^^^^^^^^^^^^^^^^

.. py:class:: AccountPrincipal(accountId)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AccountPrincipal;

      .. code-tab:: javascript

         const { AccountPrincipal } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AccountPrincipal } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.ArnPrincipal`
   :param accountId: 
   :type accountId: any

   .. py:attribute:: accountId

      :type: any *(readonly)*


AccountRootPrincipal
^^^^^^^^^^^^^^^^^^^^

.. py:class:: AccountRootPrincipal()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AccountRootPrincipal;

      .. code-tab:: javascript

         const { AccountRootPrincipal } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AccountRootPrincipal } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.AccountPrincipal`

Anyone
^^^^^^

.. py:class:: Anyone()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Anyone;

      .. code-tab:: javascript

         const { Anyone } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Anyone } from '@aws-cdk/cdk';



   A principal representing all identities in all accounts


   :extends: :py:class:`~@aws-cdk/cdk.PolicyPrincipal`

   .. py:method:: policyFragment() -> @aws-cdk/cdk.PrincipalPolicyFragment

      Return the policy fragment that identifies this principal in a Policy.


      :rtype: :py:class:`~@aws-cdk/cdk.PrincipalPolicyFragment`


   .. py:attribute:: accountId

      Interface compatibility with AccountPrincipal for the purposes of the Lambda library  The Lambda's addPermission() call works differently from regular statements, and will use the value of this property directly if present (which leads to the correct statement ultimately).


      :type: string *(readonly)*


App
^^^

.. py:class:: App([argv])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.App;

      .. code-tab:: javascript

         const { App } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { App } from '@aws-cdk/cdk';



   Represents a CDK program.


   :extends: :py:class:`~@aws-cdk/cdk.Root`
   :param argv: 
   :type argv: string or undefined

   .. py:method:: run() -> string

      Runs the program


      :return: STDOUT
      :rtype: string


   .. py:method:: exec() -> string

      :rtype: string


   .. py:method:: listStacks() -> @aws-cdk/cx-api.StackInfo[]

      Lists all stacks in this app.


      :rtype: :py:class:`@aws-cdk/cx-api.StackInfo`


   .. py:method:: synthesizeStack(stackName) -> @aws-cdk/cx-api.SynthesizedStack

      Synthesize and validate a single stack


      :param stackName: The name of the stack to synthesize
      :type stackName: string
      :rtype: :py:class:`@aws-cdk/cx-api.SynthesizedStack`


   .. py:method:: synthesizeStacks(stackNames) -> @aws-cdk/cx-api.SynthesizedStack[]

      Synthesizes multiple stacks


      :param stackNames: 
      :type stackNames: string
      :rtype: :py:class:`@aws-cdk/cx-api.SynthesizedStack`


   .. py:method:: collectMetadata(stack) -> string => @aws-cdk/cdk.MetadataEntry[]

      Returns metadata for all constructs in the stack.


      :param stack: 
      :type stack: :py:class:`~@aws-cdk/cdk.Stack`
      :rtype: :py:class:`~@aws-cdk/cdk.MetadataEntry`


Arn
^^^

.. py:class:: Arn([valueOrFunction])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Arn;

      .. code-tab:: javascript

         const { Arn } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Arn } from '@aws-cdk/cdk';



   An Amazon Resource Name (ARN). http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html


   :extends: :py:class:`~@aws-cdk/cdk.Token`
   :param valueOrFunction: 
   :type valueOrFunction: any or undefined

   .. py:staticmethod:: fromComponents(components) -> @aws-cdk/cdk.Arn

      Creates an ARN from components. If any component is the empty string, an empty string will be inserted into the generated ARN at the location that component corresponds to.


      :param components: 
      :type components: :py:class:`~@aws-cdk/cdk.ArnComponents`
      :rtype: :py:class:`~@aws-cdk/cdk.Arn`


   .. py:staticmethod:: parse(arn) -> @aws-cdk/cdk.ArnComponents

      Given an ARN, parses it and returns components.  The ARN it will be parsed and validated. The separator (`sep`) will be set to '/' if the 6th component includes a '/', in which case, `resource` will be set to the value before the '/' and `resourceName` will be the rest. In case there is no '/', `resource` will be set to the 6th components and `resourceName` will be set to the rest of the string.


      :param arn: 
      :type arn: string
      :return: an ArnComponents object which allows access to the various
components of the ARN.
      :rtype: :py:class:`~@aws-cdk/cdk.ArnComponents`


   .. py:staticmethod:: parseToken(arn, [sep, [hasName]]) -> @aws-cdk/cdk.ArnComponents

      Given a Token evaluating to ARN, parses it and returns components.  The ARN cannot be validated, since we don't have the actual value yet at the time of this function call. You will have to know the separator and the type of ARN.  The resulting `ArnComponents` object will contain tokens for the subexpressions of the ARN, not string literals.  WARNING: this function cannot properly parse the complete final resourceName (path) out of ARNs that use '/' to both separate the 'resource' from the 'resourceName' AND to subdivide the resourceName further. For example, in S3 ARNs:        arn:aws:s3:::my_corporate_bucket/path/to/exampleobject.png  After parsing the resourceName will not contain 'path/to/exampleobject.png' but simply 'path'. This is a limitation because there is no slicing functionality in CloudFormation templates.


      :param arn: The input token that contains an ARN
      :type arn: :py:class:`~@aws-cdk/cdk.Token`
      :param sep: The separator used to separate resource from resourceName
      :type sep: string or undefined
      :param hasName: Whether there is a name component in the ARN at all. For example, SNS Topics ARNs have the 'resource' component contain the topic name, and no 'resourceName' component.
      :type hasName: boolean or undefined
      :return: an ArnComponents object which allows access to the various
components of the ARN.
      :rtype: :py:class:`~@aws-cdk/cdk.ArnComponents`


ArnComponents (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ArnComponents

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ArnComponents;

      .. code-tab:: javascript

         // ArnComponents is an interface

      .. code-tab:: typescript

         import { ArnComponents } from '@aws-cdk/cdk';





   .. py:attribute:: partition

      The partition that the resource is in. For standard AWS regions, the partition is aws. If you have resources in other partitions, the partition is aws-partitionname. For example, the partition for resources in the China (Beijing) region is aws-cn.


      :type: any or undefined


   .. py:attribute:: service

      The service namespace that identifies the AWS product (for example, 's3', 'iam', 'codepipline').


      :type: any


   .. py:attribute:: region

      The region the resource resides in. Note that the ARNs for some resources do not require a region, so this component might be omitted.


      :type: any or undefined


   .. py:attribute:: account

      The ID of the AWS account that owns the resource, without the hyphens. For example, 123456789012. Note that the ARNs for some resources don't require an account number, so this component might be omitted.


      :type: any or undefined


   .. py:attribute:: resource

      Resource type (e.g. "table", "autoScalingGroup", "certificate"). For some resource types, e.g. S3 buckets, this field defines the bucket name.


      :type: any


   .. py:attribute:: sep

      Separator between resource type and the resource.  Can be either '/' or ':'. Will only be used if path is defined.


      :type: string or undefined


   .. py:attribute:: resourceName

      Resource name or path within the resource (i.e. S3 bucket object key) or a wildcard such as ``"*"``. This is service-dependent.


      :type: any or undefined


ArnPrincipal
^^^^^^^^^^^^

.. py:class:: ArnPrincipal(arn)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ArnPrincipal;

      .. code-tab:: javascript

         const { ArnPrincipal } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ArnPrincipal } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.PolicyPrincipal`
   :param arn: 
   :type arn: any

   .. py:method:: policyFragment() -> @aws-cdk/cdk.PrincipalPolicyFragment

      Return the policy fragment that identifies this principal in a Policy.


      :rtype: :py:class:`~@aws-cdk/cdk.PrincipalPolicyFragment`


   .. py:attribute:: arn

      :type: any *(readonly)*


AutoScalingCreationPolicy (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AutoScalingCreationPolicy

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AutoScalingCreationPolicy;

      .. code-tab:: javascript

         // AutoScalingCreationPolicy is an interface

      .. code-tab:: typescript

         import { AutoScalingCreationPolicy } from '@aws-cdk/cdk';



   For an Auto Scaling group replacement update, specifies how many instances must signal success for the update to succeed.




   .. py:attribute:: minSuccessfulInstancesPercent

      Specifies the percentage of instances in an Auto Scaling replacement update that must signal success for the update to succeed. You can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent. For example, if you update five instances with a minimum successful percentage of 50, three instances must signal success. If an instance doesn't send a signal within the time specified by the Timeout property, AWS CloudFormation assumes that the instance wasn't created.


      :type: number or undefined


AutoScalingReplacingUpdate (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AutoScalingReplacingUpdate

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AutoScalingReplacingUpdate;

      .. code-tab:: javascript

         // AutoScalingReplacingUpdate is an interface

      .. code-tab:: typescript

         import { AutoScalingReplacingUpdate } from '@aws-cdk/cdk';



   Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement, AWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation can roll back to the old Auto Scaling group and delete the new Auto Scaling group.  While AWS CloudFormation creates the new group, it doesn't detach or attach any instances. After successfully creating the new Auto Scaling group, AWS CloudFormation deletes the old Auto Scaling group during the cleanup process.  When you set the WillReplace parameter, remember to specify a matching CreationPolicy. If the minimum number of instances (specified by the MinSuccessfulInstancesPercent property) don't signal success within the Timeout period (specified in the CreationPolicy policy), the replacement update fails and AWS CloudFormation rolls back to the old Auto Scaling group.




   .. py:attribute:: willReplace

      :type: boolean or undefined


AutoScalingRollingUpdate (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AutoScalingRollingUpdate

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AutoScalingRollingUpdate;

      .. code-tab:: javascript

         // AutoScalingRollingUpdate is an interface

      .. code-tab:: typescript

         import { AutoScalingRollingUpdate } from '@aws-cdk/cdk';



   To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate policy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling group in batches or all at once.




   .. py:attribute:: maxBatchSize

      Specifies the maximum number of instances that AWS CloudFormation updates.


      :type: number or undefined


   .. py:attribute:: minInstancesInService

      Specifies the minimum number of instances that must be in service within the Auto Scaling group while AWS CloudFormation updates old instances.


      :type: number or undefined


   .. py:attribute:: minSuccessfulInstancesPercent

      Specifies the percentage of instances in an Auto Scaling rolling update that must signal success for an update to succeed. You can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent. For example, if you update five instances with a minimum successful percentage of 50, three instances must signal success.  If an instance doesn't send a signal within the time specified in the PauseTime property, AWS CloudFormation assumes that the instance wasn't updated.  If you specify this property, you must also enable the WaitOnResourceSignals and PauseTime properties.


      :type: number or undefined


   .. py:attribute:: pauseTime

      The amount of time that AWS CloudFormation pauses after making a change to a batch of instances to give those instances time to start software applications. For example, you might need to specify PauseTime when scaling up the number of instances in an Auto Scaling group.  If you enable the WaitOnResourceSignals property, PauseTime is the amount of time that AWS CloudFormation should wait for the Auto Scaling group to receive the required number of valid signals from added or replaced instances. If the PauseTime is exceeded before the Auto Scaling group receives the required number of signals, the update fails. For best results, specify a time period that gives your applications sufficient time to get started. If the update needs to be rolled back, a short PauseTime can cause the rollback to fail.  Specify PauseTime in the ISO8601 duration format (in the format PT#H#M#S, where each # is the number of hours, minutes, and seconds, respectively). The maximum PauseTime is one hour (PT1H).


      :type: string or undefined


   .. py:attribute:: suspendProcesses

      Specifies the Auto Scaling processes to suspend during a stack update. Suspending processes prevents Auto Scaling from interfering with a stack update. For example, you can suspend alarming so that Auto Scaling doesn't execute scaling policies associated with an alarm. For valid values, see the ScalingProcesses.member.N parameter for the SuspendProcesses action in the Auto Scaling API Reference.


      :type: string or undefined


   .. py:attribute:: waitOnResourceSignals

      Specifies whether the Auto Scaling group waits on signals from new instances during an update. Use this property to ensure that instances have completed installing and configuring applications before the Auto Scaling group update proceeds. AWS CloudFormation suspends the update of an Auto Scaling group after new EC2 instances are launched into the group. AWS CloudFormation must receive a signal from each new instance within the specified PauseTime before continuing the update. To signal the Auto Scaling group, use the cfn-signal helper script or SignalResource API.  To have instances wait for an Elastic Load Balancing health check before they signal success, add a health-check verification by using the cfn-init helper script. For an example, see the verify_instance_health command in the Auto Scaling rolling updates sample template.


      :type: boolean or undefined


AutoScalingScheduledAction (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AutoScalingScheduledAction

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AutoScalingScheduledAction;

      .. code-tab:: javascript

         // AutoScalingScheduledAction is an interface

      .. code-tab:: typescript

         import { AutoScalingScheduledAction } from '@aws-cdk/cdk';



   With scheduled actions, the group size properties of an Auto Scaling group can change at any time. When you update a stack with an Auto Scaling group and scheduled action, AWS CloudFormation always sets the group size property values of your Auto Scaling group to the values that are defined in the AWS::AutoScaling::AutoScalingGroup resource of your template, even if a scheduled action is in effect.  If you do not want AWS CloudFormation to change any of the group size property values when you have a scheduled action in effect, use the AutoScalingScheduledAction update policy to prevent AWS CloudFormation from changing the MinSize, MaxSize, or DesiredCapacity properties unless you have modified these values in your template.\




   .. py:attribute:: ignoreUnmodifiedGroupSizeProperties

      :type: boolean or undefined


AvailabilityZoneProvider
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AvailabilityZoneProvider(context)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AvailabilityZoneProvider;

      .. code-tab:: javascript

         const { AvailabilityZoneProvider } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AvailabilityZoneProvider } from '@aws-cdk/cdk';



   Context provider that will return the availability zones for the current account and region


   :param context: 
   :type context: :py:class:`~@aws-cdk/cdk.Construct`

   .. py:attribute:: availabilityZones

      Return the list of AZs for the current account and region


      :type: string *(readonly)*


AwsAccountId
^^^^^^^^^^^^

.. py:class:: AwsAccountId()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AwsAccountId;

      .. code-tab:: javascript

         const { AwsAccountId } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AwsAccountId } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.PseudoParameter`

AwsDomainSuffix
^^^^^^^^^^^^^^^

.. py:class:: AwsDomainSuffix()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AwsDomainSuffix;

      .. code-tab:: javascript

         const { AwsDomainSuffix } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AwsDomainSuffix } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.PseudoParameter`

AwsNoValue
^^^^^^^^^^

.. py:class:: AwsNoValue()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AwsNoValue;

      .. code-tab:: javascript

         const { AwsNoValue } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AwsNoValue } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.PseudoParameter`

AwsNotificationARNs
^^^^^^^^^^^^^^^^^^^

.. py:class:: AwsNotificationARNs()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AwsNotificationARNs;

      .. code-tab:: javascript

         const { AwsNotificationARNs } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AwsNotificationARNs } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.PseudoParameter`

AwsPartition
^^^^^^^^^^^^

.. py:class:: AwsPartition()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AwsPartition;

      .. code-tab:: javascript

         const { AwsPartition } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AwsPartition } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.PseudoParameter`

AwsRegion
^^^^^^^^^

.. py:class:: AwsRegion()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AwsRegion;

      .. code-tab:: javascript

         const { AwsRegion } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AwsRegion } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.PseudoParameter`

AwsStackId
^^^^^^^^^^

.. py:class:: AwsStackId()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AwsStackId;

      .. code-tab:: javascript

         const { AwsStackId } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AwsStackId } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.PseudoParameter`

AwsStackName
^^^^^^^^^^^^

.. py:class:: AwsStackName()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AwsStackName;

      .. code-tab:: javascript

         const { AwsStackName } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AwsStackName } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.PseudoParameter`

AwsURLSuffix
^^^^^^^^^^^^

.. py:class:: AwsURLSuffix()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.AwsURLSuffix;

      .. code-tab:: javascript

         const { AwsURLSuffix } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { AwsURLSuffix } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.PseudoParameter`

CanonicalUserPrincipal
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CanonicalUserPrincipal(canonicalUserId)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.CanonicalUserPrincipal;

      .. code-tab:: javascript

         const { CanonicalUserPrincipal } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { CanonicalUserPrincipal } from '@aws-cdk/cdk';



   A policy prinicipal for canonicalUserIds - useful for S3 bucket policies that use Origin Access identities.  See https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html  and  https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html  for more details.


   :extends: :py:class:`~@aws-cdk/cdk.PolicyPrincipal`
   :param canonicalUserId: 
   :type canonicalUserId: any

   .. py:method:: policyFragment() -> @aws-cdk/cdk.PrincipalPolicyFragment

      Return the policy fragment that identifies this principal in a Policy.


      :rtype: :py:class:`~@aws-cdk/cdk.PrincipalPolicyFragment`


   .. py:attribute:: canonicalUserId

      :type: any *(readonly)*


Condition
^^^^^^^^^

.. py:class:: Condition(parent, name, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Condition;

      .. code-tab:: javascript

         const { Condition } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Condition } from '@aws-cdk/cdk';



   Represents a CloudFormation condition, for resources which must be conditionally created and the determination must be made at deploy time.


   :extends: :py:class:`~@aws-cdk/cdk.Referenceable`
   :param parent: 
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.ConditionProps` or undefined

   .. py:method:: toCloudFormation() -> json

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged at the root level to ensure there are no identity conflicts.  For example, a Resource class will return something like: {      Resources: {          [this.logicalId]: {              Type: this.resourceType,              Properties: this.props,              Condition: this.condition          }      } }


      :rtype: json


   .. py:attribute:: expression

      The condition statement.


      :type: :py:class:`~@aws-cdk/cdk.FnCondition` or undefined


ConditionProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ConditionProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ConditionProps;

      .. code-tab:: javascript

         // ConditionProps is an interface

      .. code-tab:: typescript

         import { ConditionProps } from '@aws-cdk/cdk';





   .. py:attribute:: expression

      :type: :py:class:`~@aws-cdk/cdk.FnCondition` or undefined


Construct
^^^^^^^^^

.. py:class:: Construct(parent, name)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Construct;

      .. code-tab:: javascript

         const { Construct } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Construct } from '@aws-cdk/cdk';



   Represents the building block of the construct graph. When a construct is created, it is always added as a child


   :param parent: The parent construct
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string

   .. py:method:: toString() -> string

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or undefined
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`~@aws-cdk/cdk.Construct` or undefined


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`~@aws-cdk/cdk.Construct`


   .. py:method:: setContext(key, value)

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any


   .. py:method:: getContext(key) -> any

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any


   .. py:method:: requireContext(key) -> any

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any


   .. py:method:: addMetadata(type, data, [from]) -> @aws-cdk/cdk.Construct

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or undefined
      :rtype: :py:class:`~@aws-cdk/cdk.Construct`


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`~@aws-cdk/cdk.Construct`


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`~@aws-cdk/cdk.Construct`


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`~@aws-cdk/cdk.Construct`


   .. py:method:: validate() -> string[]

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`~@aws-cdk/cdk.ValidationError`


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`~@aws-cdk/cdk.Construct` or undefined
      :rtype: :py:class:`~@aws-cdk/cdk.Construct`


   .. py:method:: required(props, name) -> any

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      :param props: The props bag.
      :type props: any
      :param name: The name of the required property.
      :type name: string
      :rtype: any


   .. py:method:: addChild(child, childName)

      Adds a child construct to this node.


      :param child: The child construct
      :type child: :py:class:`~@aws-cdk/cdk.Construct`
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: lock()

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.




   .. py:method:: unlock()

      Unlocks this costruct and allows mutations (adding children).




   .. py:attribute:: parent

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`~@aws-cdk/cdk.Construct` or undefined *(readonly)*


   .. py:attribute:: name

      The name of this construct


      :type: string *(readonly)*


   .. py:attribute:: children

      All direct children of this construct.


      :type: :py:class:`~@aws-cdk/cdk.Construct` *(readonly)*


   .. py:attribute:: path

      Returns the path of all constructs from root to this construct, in string form.


      :type: string *(readonly)*


   .. py:attribute:: metadata

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`~@aws-cdk/cdk.MetadataEntry` *(readonly)*


ContextProvider
^^^^^^^^^^^^^^^

.. py:class:: ContextProvider(context)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ContextProvider;

      .. code-tab:: javascript

         const { ContextProvider } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ContextProvider } from '@aws-cdk/cdk';



   Base class for the model side of context providers  Instances of this class communicate with context provider plugins in the 'cdk toolkit' via context variables (input), outputting specialized queries for more context variables (output).  ContextProvider needs access to a Construct to hook into the context mechanism.


   :param context: 
   :type context: :py:class:`~@aws-cdk/cdk.Construct`

   .. py:method:: getStringValue(provider, [scope, args, defaultValue]) -> string

      Read a provider value, verifying it's a string


      :param provider: The name of the context provider
      :type provider: string
      :param scope: The scope (e.g. account/region) for the value
      :type scope: string or undefined
      :param args: Any arguments
      :type args: string
      :param defaultValue: The value to return if there is no value defined for this context key
      :type defaultValue: string
      :rtype: string


   .. py:method:: getStringListValue(provider, [scope, args, defaultValue]) -> string[]

      Read a provider value, verifying it's a list


      :param provider: The name of the context provider
      :type provider: string
      :param scope: The scope (e.g. account/region) for the value
      :type scope: string or undefined
      :param args: Any arguments
      :type args: string
      :param defaultValue: The value to return if there is no value defined for this context key
      :type defaultValue: string
      :rtype: string


   .. py:method:: accountRegionScope(providerDescription) -> string[]

      Helper function to wrap up account and region into a scope tuple


      :param providerDescription: 
      :type providerDescription: string
      :rtype: string or undefined


CreationPolicy (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CreationPolicy

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.CreationPolicy;

      .. code-tab:: javascript

         // CreationPolicy is an interface

      .. code-tab:: typescript

         import { CreationPolicy } from '@aws-cdk/cdk';



   Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded. To signal a resource, you can use the cfn-signal helper script or SignalResource API. AWS CloudFormation publishes valid signals to the stack events so that you track the number of signals sent.  The creation policy is invoked only when AWS CloudFormation creates the associated resource. Currently, the only AWS CloudFormation resources that support creation policies are AWS::AutoScaling::AutoScalingGroup, AWS::EC2::Instance, and AWS::CloudFormation::WaitCondition.  Use the CreationPolicy attribute when you want to wait on resource configuration actions before stack creation proceeds. For example, if you install and configure software applications on an EC2 instance, you might want those applications to be running before proceeding. In such cases, you can add a CreationPolicy attribute to the instance, and then send a success signal to the instance after the applications are installed and configured. For a detailed example, see Deploying Applications on Amazon EC2 with AWS CloudFormation.




   .. py:attribute:: autoScalingCreationPolicy

      For an Auto Scaling group replacement update, specifies how many instances must signal success for the update to succeed.


      :type: :py:class:`~@aws-cdk/cdk.AutoScalingCreationPolicy` or undefined


   .. py:attribute:: resourceSignal

      When AWS CloudFormation creates the associated resource, configures the number of required success signals and the length of time that AWS CloudFormation waits for those signals.


      :type: :py:class:`~@aws-cdk/cdk.ResourceSignal` or undefined


DeletionPolicy (enum)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: DeletionPolicy

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.DeletionPolicy;

      .. code-tab:: javascript

         const { DeletionPolicy } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { DeletionPolicy } from '@aws-cdk/cdk';



   With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. You specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy attribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations that lead to resources being removed.


   .. py:data:: Delete

   .. py:data:: Retain

   .. py:data:: Snapshot


Environment (interface)
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: Environment

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Environment;

      .. code-tab:: javascript

         // Environment is an interface

      .. code-tab:: typescript

         import { Environment } from '@aws-cdk/cdk';



   The deployment environment for a stack.




   .. py:attribute:: account

      The AWS account ID for this environment. If not specified, the context parameter `default-account` is used.


      :type: string or undefined


   .. py:attribute:: region

      The AWS region for this environment. If not specified, the context parameter `default-region` is used.


      :type: string or undefined


FederatedPrincipal
^^^^^^^^^^^^^^^^^^

.. py:class:: FederatedPrincipal(federated, conditions, [assumeRoleAction])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FederatedPrincipal;

      .. code-tab:: javascript

         const { FederatedPrincipal } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FederatedPrincipal } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.PolicyPrincipal`
   :param federated: 
   :type federated: any
   :param conditions: 
   :type conditions: any
   :param assumeRoleAction: 
   :type assumeRoleAction: string or undefined

   .. py:method:: policyFragment() -> @aws-cdk/cdk.PrincipalPolicyFragment

      Return the policy fragment that identifies this principal in a Policy.


      :rtype: :py:class:`~@aws-cdk/cdk.PrincipalPolicyFragment`


   .. py:attribute:: federated

      :type: any *(readonly)*


   .. py:attribute:: conditions

      :type: any *(readonly)*


   .. py:attribute:: assumeRoleAction

      :type: string *(readonly)*


Fn
^^

.. py:class:: Fn(name, value)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Fn;

      .. code-tab:: javascript

         const { Fn } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Fn } from '@aws-cdk/cdk';



   CloudFormation intrinsic functions. http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html


   :extends: :py:class:`~@aws-cdk/cdk.Token`
   :param name: 
   :type name: string
   :param value: 
   :type value: any

FnAnd
^^^^^

.. py:class:: FnAnd(*condition)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnAnd;

      .. code-tab:: javascript

         const { FnAnd } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnAnd } from '@aws-cdk/cdk';



   Returns true if all the specified conditions evaluate to true, or returns false if any one   of the conditions evaluates to false. ``Fn::And`` acts as an AND operator. The minimum number of conditions that you can include is 2, and the maximum is 10.


   :extends: :py:class:`~@aws-cdk/cdk.FnCondition`
   :param \*condition: 
   :type \*condition: :py:class:`~@aws-cdk/cdk.FnCondition`

FnBase64
^^^^^^^^

.. py:class:: FnBase64(data)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnBase64;

      .. code-tab:: javascript

         const { FnBase64 } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnBase64 } from '@aws-cdk/cdk';



   The intrinsic function ``Fn::Base64`` returns the Base64 representation of the input string. This function is typically used to pass encoded data to Amazon EC2 instances by way of the UserData property.


   :extends: :py:class:`~@aws-cdk/cdk.Fn`
   :param data: The string value you want to convert to Base64.
   :type data: any

FnCidr
^^^^^^

.. py:class:: FnCidr(ipBlock, count, [sizeMask])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnCidr;

      .. code-tab:: javascript

         const { FnCidr } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnCidr } from '@aws-cdk/cdk';



   The intrinsic function ``Fn::Cidr`` returns the specified Cidr address block.


   :extends: :py:class:`~@aws-cdk/cdk.Fn`
   :param ipBlock: The user-specified default Cidr address block.
   :type ipBlock: any
   :param count: The number of subnets' Cidr block wanted. Count can be 1 to 256.
   :type count: any
   :param sizeMask: The digit covered in the subnet.
   :type sizeMask: any or undefined

FnConcat
^^^^^^^^

.. py:class:: FnConcat(*listOfValues)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnConcat;

      .. code-tab:: javascript

         const { FnConcat } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnConcat } from '@aws-cdk/cdk';



   Alias for ``FnJoin('', listOfValues)``.


   :extends: :py:class:`~@aws-cdk/cdk.FnJoin`
   :param \*listOfValues: The list of values to concatenate.
   :type \*listOfValues: any

FnCondition
^^^^^^^^^^^

.. py:class:: FnCondition(name, value)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnCondition;

      .. code-tab:: javascript

         const { FnCondition } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnCondition } from '@aws-cdk/cdk';



   You can use intrinsic functions, such as ``Fn::If``, ``Fn::Equals``, and ``Fn::Not``, to conditionally create stack resources. These conditions are evaluated based on input parameters that you declare when you create or update a stack. After you define all your conditions, you can associate them with resources or resource properties in the Resources and Outputs sections of a template.  You define all conditions in the Conditions section of a template except for ``Fn::If`` conditions. You can use the ``Fn::If`` condition in the metadata attribute, update policy attribute, and property values in the Resources section and Outputs sections of a template.  You might use conditions when you want to reuse a template that can create resources in different contexts, such as a test environment versus a production environment. In your template, you can add an EnvironmentType input parameter, which accepts either prod or test as inputs. For the production environment, you might include Amazon EC2 instances with certain capabilities; however, for the test environment, you want to use less capabilities to save costs. With conditions, you can define which resources are created and how they're configured for each environment type.


   :extends: :py:class:`~@aws-cdk/cdk.Fn`
   :param name: 
   :type name: string
   :param value: 
   :type value: any

FnContains
^^^^^^^^^^

.. py:class:: FnContains(listOfStrings, value)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnContains;

      .. code-tab:: javascript

         const { FnContains } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnContains } from '@aws-cdk/cdk';



   Returns true if a specified string matches at least one value in a list of strings.


   :extends: :py:class:`~@aws-cdk/cdk.FnCondition`
   :param listOfStrings: A list of strings, such as "A", "B", "C".
   :type listOfStrings: any
   :param value: A string, such as "A", that you want to compare against a list of strings.
   :type value: string

FnEachMemberEquals
^^^^^^^^^^^^^^^^^^

.. py:class:: FnEachMemberEquals(listOfStrings, value)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnEachMemberEquals;

      .. code-tab:: javascript

         const { FnEachMemberEquals } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnEachMemberEquals } from '@aws-cdk/cdk';



   Returns true if a specified string matches all values in a list.


   :extends: :py:class:`~@aws-cdk/cdk.FnCondition`
   :param listOfStrings: A list of strings, such as "A", "B", "C".
   :type listOfStrings: any
   :param value: A string, such as "A", that you want to compare against a list of strings.
   :type value: string

FnEachMemberIn
^^^^^^^^^^^^^^

.. py:class:: FnEachMemberIn(stringsToCheck, stringsToMatch)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnEachMemberIn;

      .. code-tab:: javascript

         const { FnEachMemberIn } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnEachMemberIn } from '@aws-cdk/cdk';



   Returns true if each member in a list of strings matches at least one value in a second list of strings.


   :extends: :py:class:`~@aws-cdk/cdk.FnCondition`
   :param stringsToCheck: A list of strings, such as "A", "B", "C". AWS CloudFormation checks whether each member in the strings_to_check parameter is in the strings_to_match parameter.
   :type stringsToCheck: any
   :param stringsToMatch: A list of strings, such as "A", "B", "C". Each member in the strings_to_match parameter is compared against the members of the strings_to_check parameter.
   :type stringsToMatch: any

FnEquals
^^^^^^^^

.. py:class:: FnEquals(lhs, rhs)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnEquals;

      .. code-tab:: javascript

         const { FnEquals } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnEquals } from '@aws-cdk/cdk';



   Compares if two values are equal. Returns true if the two values are equal or false if they aren't.


   :extends: :py:class:`~@aws-cdk/cdk.FnCondition`
   :param lhs: A value of any type that you want to compare.
   :type lhs: any
   :param rhs: A value of any type that you want to compare.
   :type rhs: any

FnFindInMap
^^^^^^^^^^^

.. py:class:: FnFindInMap(mapName, topLevelKey, secondLevelKey)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnFindInMap;

      .. code-tab:: javascript

         const { FnFindInMap } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnFindInMap } from '@aws-cdk/cdk';



   The intrinsic function ``Fn::FindInMap`` returns the value corresponding to keys in a two-level map that is declared in the Mappings section.


   :extends: :py:class:`~@aws-cdk/cdk.Fn`
   :param mapName: The logical name of a mapping declared in the Mappings section that contains the keys and values.
   :type mapName: string
   :param topLevelKey: The top-level key name. Its value is a list of key-value pairs.
   :type topLevelKey: any
   :param secondLevelKey: The second-level key name, which is set to one of the keys from the list assigned to TopLevelKey.
   :type secondLevelKey: any

FnGetAZs
^^^^^^^^

.. py:class:: FnGetAZs([region])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnGetAZs;

      .. code-tab:: javascript

         const { FnGetAZs } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnGetAZs } from '@aws-cdk/cdk';



   The intrinsic function ``Fn::GetAZs`` returns an array that lists Availability Zones for a specified region. Because customers have access to different Availability Zones, the intrinsic function ``Fn::GetAZs`` enables template authors to write templates that adapt to the calling user's access. That way you don't have to hard-code a full list of Availability Zones for a specified region.


   :extends: :py:class:`~@aws-cdk/cdk.Fn`
   :param region: The name of the region for which you want to get the Availability Zones. You can use the AWS::Region pseudo parameter to specify the region in which the stack is created. Specifying an empty string is equivalent to specifying AWS::Region.
   :type region: string or undefined

FnGetAtt
^^^^^^^^

.. py:class:: FnGetAtt(logicalNameOfResource, attributeName)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnGetAtt;

      .. code-tab:: javascript

         const { FnGetAtt } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnGetAtt } from '@aws-cdk/cdk';



   The ``Fn::GetAtt`` intrinsic function returns the value of an attribute from a resource in the template.


   :extends: :py:class:`~@aws-cdk/cdk.Fn`
   :param logicalNameOfResource: The logical name (also called logical ID) of the resource that contains the attribute that you want.
   :type logicalNameOfResource: string
   :param attributeName: The name of the resource-specific attribute whose value you want. See the resource's reference page for details about the attributes available for that resource type.
   :type attributeName: string

FnIf
^^^^

.. py:class:: FnIf(condition, valueIfTrue, valueIfFalse)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnIf;

      .. code-tab:: javascript

         const { FnIf } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnIf } from '@aws-cdk/cdk';



   Returns one value if the specified condition evaluates to true and another value if the specified condition evaluates to false. Currently, AWS CloudFormation supports the ``Fn::If`` intrinsic function in the metadata attribute, update policy attribute, and property values in the Resources section and Outputs sections of a template. You can use the AWS::NoValue pseudo parameter as a return value to remove the corresponding property.


   :extends: :py:class:`~@aws-cdk/cdk.FnCondition`
   :param condition: A reference to a condition in the Conditions section. Use the condition's name to reference it.
   :type condition: string
   :param valueIfTrue: A value to be returned if the specified condition evaluates to true.
   :type valueIfTrue: any
   :param valueIfFalse: A value to be returned if the specified condition evaluates to false.
   :type valueIfFalse: any

FnImportValue
^^^^^^^^^^^^^

.. py:class:: FnImportValue(sharedValueToImport)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnImportValue;

      .. code-tab:: javascript

         const { FnImportValue } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnImportValue } from '@aws-cdk/cdk';



   The intrinsic function ``Fn::ImportValue`` returns the value of an output exported by another stack. You typically use this function to create cross-stack references. In the following example template snippets, Stack A exports VPC security group values and Stack B imports them.


   :extends: :py:class:`~@aws-cdk/cdk.Fn`
   :param sharedValueToImport: The stack output value that you want to import.
   :type sharedValueToImport: string

FnJoin
^^^^^^

.. py:class:: FnJoin(delimiter, listOfValues)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnJoin;

      .. code-tab:: javascript

         const { FnJoin } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnJoin } from '@aws-cdk/cdk';



   The intrinsic function ``Fn::Join`` appends a set of values into a single value, separated by the specified delimiter. If a delimiter is the empty string, the set of values are concatenated with no delimiter.


   :extends: :py:class:`~@aws-cdk/cdk.Fn`
   :param delimiter: The value you want to occur between fragments. The delimiter will occur between fragments only. It will not terminate the final value.
   :type delimiter: string
   :param listOfValues: The list of values you want combined.
   :type listOfValues: any

FnNot
^^^^^

.. py:class:: FnNot(condition)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnNot;

      .. code-tab:: javascript

         const { FnNot } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnNot } from '@aws-cdk/cdk';



   Returns true for a condition that evaluates to false or returns false for a condition that evaluates to true. ``Fn::Not`` acts as a NOT operator.


   :extends: :py:class:`~@aws-cdk/cdk.FnCondition`
   :param condition: A condition such as ``Fn::Equals`` that evaluates to true or false.
   :type condition: :py:class:`~@aws-cdk/cdk.FnCondition`

FnOr
^^^^

.. py:class:: FnOr(*condition)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnOr;

      .. code-tab:: javascript

         const { FnOr } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnOr } from '@aws-cdk/cdk';



   Returns true if any one of the specified conditions evaluate to true, or returns false if all of the conditions evaluates to false. ``Fn::Or`` acts as an OR operator. The minimum number of conditions that you can include is 2, and the maximum is 10.


   :extends: :py:class:`~@aws-cdk/cdk.FnCondition`
   :param \*condition: A condition that evaluates to true or false.
   :type \*condition: :py:class:`~@aws-cdk/cdk.FnCondition`

FnRefAll
^^^^^^^^

.. py:class:: FnRefAll(parameterType)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnRefAll;

      .. code-tab:: javascript

         const { FnRefAll } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnRefAll } from '@aws-cdk/cdk';



   Returns all values for a specified parameter type.


   :extends: :py:class:`~@aws-cdk/cdk.FnCondition`
   :param parameterType: An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or AWS::EC2::VPC::Id. For more information, see Parameters in the AWS CloudFormation User Guide.
   :type parameterType: string

FnSelect
^^^^^^^^

.. py:class:: FnSelect(index, array)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnSelect;

      .. code-tab:: javascript

         const { FnSelect } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnSelect } from '@aws-cdk/cdk';



   The intrinsic function ``Fn::Select`` returns a single object from a list of objects by index.


   :extends: :py:class:`~@aws-cdk/cdk.Fn`
   :param index: The index of the object to retrieve. This must be a value from zero to N-1, where N represents the number of elements in the array.
   :type index: number
   :param array: The list of objects to select from. This list must not be null, nor can it have null entries.
   :type array: any

FnSplit
^^^^^^^

.. py:class:: FnSplit(delimiter, source)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnSplit;

      .. code-tab:: javascript

         const { FnSplit } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnSplit } from '@aws-cdk/cdk';



   To split a string into a list of string values so that you can select an element from the resulting string list, use the ``Fn::Split`` intrinsic function. Specify the location of splits with a delimiter, such as , (a comma). After you split a string, use the ``Fn::Select`` function to pick a specific element.


   :extends: :py:class:`~@aws-cdk/cdk.Fn`
   :param delimiter: A string value that determines where the source string is divided.
   :type delimiter: string
   :param source: The string value that you want to split.
   :type source: any

FnSub
^^^^^

.. py:class:: FnSub(body, [variables])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnSub;

      .. code-tab:: javascript

         const { FnSub } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnSub } from '@aws-cdk/cdk';



   The intrinsic function ``Fn::Sub`` substitutes variables in an input string with values that you specify. In your templates, you can use this function to construct commands or outputs that include values that aren't available until you create or update a stack.


   :extends: :py:class:`~@aws-cdk/cdk.Fn`
   :param body: A string with variables that AWS CloudFormation substitutes with their associated values at runtime. Write variables as ${MyVarName}. Variables can be template parameter names, resource logical IDs, resource attributes, or a variable in a key-value map. If you specify only template parameter names, resource logical IDs, and resource attributes, don't specify a key-value map.
   :type body: string
   :param variables: The name of a variable that you included in the String parameter. The value that AWS CloudFormation substitutes for the associated variable name at runtime.
   :type variables: any or undefined

FnValueOf
^^^^^^^^^

.. py:class:: FnValueOf(parameterOrLogicalId, attribute)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnValueOf;

      .. code-tab:: javascript

         const { FnValueOf } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnValueOf } from '@aws-cdk/cdk';



   Returns an attribute value or list of values for a specific parameter and attribute.


   :extends: :py:class:`~@aws-cdk/cdk.FnCondition`
   :param parameterOrLogicalId: The name of a parameter for which you want to retrieve attribute values. The parameter must be declared in the Parameters section of the template.
   :type parameterOrLogicalId: string
   :param attribute: The name of an attribute from which you want to retrieve a value.
   :type attribute: string

FnValueOfAll
^^^^^^^^^^^^

.. py:class:: FnValueOfAll(parameterType, attribute)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.FnValueOfAll;

      .. code-tab:: javascript

         const { FnValueOfAll } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { FnValueOfAll } from '@aws-cdk/cdk';



   Returns a list of all attribute values for a given parameter type and attribute.


   :extends: :py:class:`~@aws-cdk/cdk.FnCondition`
   :param parameterType: An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or AWS::EC2::VPC::Id. For more information, see Parameters in the AWS CloudFormation User Guide.
   :type parameterType: string
   :param attribute: The name of an attribute from which you want to retrieve a value. For more information about attributes, see Supported Attributes.
   :type attribute: string

HashedAddressingScheme
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: HashedAddressingScheme()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.HashedAddressingScheme;

      .. code-tab:: javascript

         const { HashedAddressingScheme } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { HashedAddressingScheme } from '@aws-cdk/cdk';



   Renders a hashed ID for a resource.  In order to make sure logical IDs are unique and stable, we hash the resource construct tree path (i.e. toplevel/secondlevel/.../myresource) and add it as a suffix to the path components joined without a separator (CloudFormation IDs only allow alphanumeric characters).  The result will be:       <path.join('')><md5(path.join('/')>          "human"          "hash"  If the "human" part of the ID exceeds 240 characters, we simply trim it so the total ID doesn't exceed CloudFormation's 255 character limit.  We only take 8 characters from the md5 hash (0.000005 chance of collision).  Special cases:  - If the path only contains a single component (i.e. it's a top-level    resource), we won't add the hash to it. The hash is not needed for    disamiguation and also, it allows for a more straightforward migration an    existing CloudFormation template to a CDK stack without logical ID changes    (or renames). - For aesthetic reasons, if the last components of the path are the same    (i.e. `L1/L2/Pipeline/Pipeline`), they will be de-duplicated to make the    resulting human portion of the ID more pleasing: `L1L2Pipeline<HASH>`    instead of `L1L2PipelinePipeline<HASH>` - If a component is named "Default" it will be omitted from the path. This    allows refactoring higher level abstractions around constructs without affecting    the IDs of already deployed resources. - If a component is named "Resource" it will be omitted from the user-visible    path, but included in the hash. This reduces visual noise in the human readable    part of the identifier.


   :implements: :py:class:`~@aws-cdk/cdk.IAddressingScheme`

   .. py:method:: allocateAddress(addressComponents) -> string

      Return the logical ID for the given list of Construct names on the path.


      :param addressComponents: 
      :type addressComponents: string
      :rtype: string


IAddressingScheme (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IAddressingScheme

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.IAddressingScheme;

      .. code-tab:: javascript

         // IAddressingScheme is an interface

      .. code-tab:: typescript

         import { IAddressingScheme } from '@aws-cdk/cdk';



   Interface for classes that implementation logical ID assignment strategies




   .. py:method:: allocateAddress(addressComponents) -> string

      Return the logical ID for the given list of Construct names on the path.


      :param addressComponents: 
      :type addressComponents: string
      :rtype: string


IDependable (interface)
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IDependable

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.IDependable;

      .. code-tab:: javascript

         // IDependable is an interface

      .. code-tab:: typescript

         import { IDependable } from '@aws-cdk/cdk';



   Represents a construct that can be "depended on" via `addDependency`.




   .. py:attribute:: dependencyElements

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`~@aws-cdk/cdk.IDependable` *(readonly)*


Include
^^^^^^^

.. py:class:: Include(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Include;

      .. code-tab:: javascript

         const { Include } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Include } from '@aws-cdk/cdk';



   Includes a CloudFormation template into a stack. All elements of the template will be merged into the current stack, together with any elements created programmatically.


   :extends: :py:class:`~@aws-cdk/cdk.StackElement`
   :param parent: The parent construct of this template
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.IncludeProps`

   .. py:method:: toCloudFormation() -> json

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged at the root level to ensure there are no identity conflicts.  For example, a Resource class will return something like: {      Resources: {          [this.logicalId]: {              Type: this.resourceType,              Properties: this.props,              Condition: this.condition          }      } }


      :rtype: json


   .. py:attribute:: template

      The included template.


      :type: json *(readonly)*


IncludeProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IncludeProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.IncludeProps;

      .. code-tab:: javascript

         // IncludeProps is an interface

      .. code-tab:: typescript

         import { IncludeProps } from '@aws-cdk/cdk';





   .. py:attribute:: template

      The CloudFormation template to include in the stack (as is).


      :type: json


LogicalIDs
^^^^^^^^^^

.. py:class:: LogicalIDs(namingScheme)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.LogicalIDs;

      .. code-tab:: javascript

         const { LogicalIDs } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { LogicalIDs } from '@aws-cdk/cdk';



   Class that keeps track of the logical IDs that are assigned to resources  Supports renaming the generated IDs.


   :param namingScheme: 
   :type namingScheme: :py:class:`~@aws-cdk/cdk.IAddressingScheme`

   .. py:method:: renameLogical(oldId, newId)

      Rename a logical ID from an old ID to a new ID


      :param oldId: 
      :type oldId: string
      :param newId: 
      :type newId: string


   .. py:method:: getLogicalId(stackElement) -> string

      Return the logical ID for the given stack element


      :param stackElement: 
      :type stackElement: :py:class:`~@aws-cdk/cdk.StackElement`
      :rtype: string


   .. py:method:: assertAllRenamesApplied()

      Throw an error if not all renames have been used  This is to assure that users didn't make typoes when registering renames.




Mapping
^^^^^^^

.. py:class:: Mapping(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Mapping;

      .. code-tab:: javascript

         const { Mapping } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Mapping } from '@aws-cdk/cdk';



   Represents a CloudFormation mapping.


   :extends: :py:class:`~@aws-cdk/cdk.Referenceable`
   :param parent: 
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.MappingProps`

   .. py:method:: setValue(key1, key2, value)

      Sets a value in the map based on the two keys.


      :param key1: 
      :type key1: string
      :param key2: 
      :type key2: string
      :param value: 
      :type value: any


   .. py:method:: findInMap(key1, key2) -> @aws-cdk/cdk.FnFindInMap

      :param key1: 
      :type key1: any
      :param key2: 
      :type key2: any
      :return: A reference to a value in the map based on the two keys.
      :rtype: :py:class:`~@aws-cdk/cdk.FnFindInMap`


   .. py:method:: toCloudFormation() -> json

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged at the root level to ensure there are no identity conflicts.  For example, a Resource class will return something like: {      Resources: {          [this.logicalId]: {              Type: this.resourceType,              Properties: this.props,              Condition: this.condition          }      } }


      :rtype: json


MappingProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: MappingProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.MappingProps;

      .. code-tab:: javascript

         // MappingProps is an interface

      .. code-tab:: typescript

         import { MappingProps } from '@aws-cdk/cdk';





   .. py:attribute:: mapping

      :type: any or undefined


MetadataEntry (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: MetadataEntry

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.MetadataEntry;

      .. code-tab:: javascript

         // MetadataEntry is an interface

      .. code-tab:: typescript

         import { MetadataEntry } from '@aws-cdk/cdk';



   An metadata entry in the construct.




   .. py:attribute:: type

      The type of the metadata entry.


      :type: string


   .. py:attribute:: data

      The data.


      :type: any or undefined


   .. py:attribute:: trace

      A stack trace for when the entry was created.


      :type: string


Output
^^^^^^

.. py:class:: Output(parent, name, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Output;

      .. code-tab:: javascript

         const { Output } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Output } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.StackElement`
   :param parent: The parent construct.
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string
   :param props: Output properties.
   :type props: :py:class:`~@aws-cdk/cdk.OutputProps` or undefined

   .. py:method:: makeImportValue() -> @aws-cdk/cdk.FnImportValue

      Returns an FnImportValue bound to this export name.


      :rtype: :py:class:`~@aws-cdk/cdk.FnImportValue`


   .. py:method:: toCloudFormation() -> json

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged at the root level to ensure there are no identity conflicts.  For example, a Resource class will return something like: {      Resources: {          [this.logicalId]: {              Type: this.resourceType,              Properties: this.props,              Condition: this.condition          }      } }


      :rtype: json


   .. py:attribute:: description

      A String type that describes the output value. The description can be a maximum of 4 K in length.


      :type: string or undefined *(readonly)*


   .. py:attribute:: value

      The value of the property returned by the aws cloudformation describe-stacks command. The value of an output can include literals, parameter references, pseudo-parameters, a mapping value, or intrinsic functions.


      :type: any or undefined *(readonly)*


   .. py:attribute:: export

      The name of the resource output to be exported for a cross-stack reference. By default, the logical ID of the Output element is used as it's export name.


      :type: string or undefined *(readonly)*


   .. py:attribute:: condition

      A condition from the "Conditions" section to associate with this output value. If the condition evaluates to `false`, this output value will not be included in the stack.


      :type: :py:class:`~@aws-cdk/cdk.Condition` or undefined *(readonly)*


   .. py:attribute:: ref

      :type: :py:class:`~@aws-cdk/cdk.Token` *(readonly)*


OutputProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: OutputProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.OutputProps;

      .. code-tab:: javascript

         // OutputProps is an interface

      .. code-tab:: typescript

         import { OutputProps } from '@aws-cdk/cdk';





   .. py:attribute:: description

      A String type that describes the output value. The description can be a maximum of 4 K in length.


      :type: string or undefined


   .. py:attribute:: value

      The value of the property returned by the aws cloudformation describe-stacks command. The value of an output can include literals, parameter references, pseudo-parameters, a mapping value, or intrinsic functions.


      :type: any or undefined


   .. py:attribute:: export

      The name used to export the value of this output across stacks. To import the value from another stack, use `FnImportValue(export)`. You can create an import value token by calling `output.makeImportValue()`.


      :type: string or undefined


   .. py:attribute:: disableExport

      Disables the automatic allocation of an export name for this output.


      :type: boolean or undefined


   .. py:attribute:: condition

      A condition from the "Conditions" section to associate with this output value. If the condition evaluates to `false`, this output value will not be included in the stack.


      :type: :py:class:`~@aws-cdk/cdk.Condition` or undefined


Parameter
^^^^^^^^^

.. py:class:: Parameter(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Parameter;

      .. code-tab:: javascript

         const { Parameter } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Parameter } from '@aws-cdk/cdk';



   Use the optional Parameters section to customize your templates. Parameters enable you to input custom values to your template each time you create or update a stack.


   :extends: :py:class:`~@aws-cdk/cdk.Referenceable`
   :param parent: The parent construct.
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string
   :param props: The parameter properties.
   :type props: :py:class:`~@aws-cdk/cdk.ParameterProps`

   .. py:method:: toCloudFormation() -> json

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged at the root level to ensure there are no identity conflicts.  For example, a Resource class will return something like: {      Resources: {          [this.logicalId]: {              Type: this.resourceType,              Properties: this.props,              Condition: this.condition          }      } }


      :rtype: json


   .. py:method:: resolve() -> any

      Allows using parameters as tokens without the need to dereference them. This implicitly implements Token, until we make it an interface.


      :rtype: any


   .. py:attribute:: value

      A token that represents the actual value of this parameter.


      :type: :py:class:`~@aws-cdk/cdk.Token`


ParameterProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ParameterProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ParameterProps;

      .. code-tab:: javascript

         // ParameterProps is an interface

      .. code-tab:: typescript

         import { ParameterProps } from '@aws-cdk/cdk';





   .. py:attribute:: type

      The data type for the parameter (DataType).


      :type: string


   .. py:attribute:: default

      A value of the appropriate type for the template to use if no value is specified when a stack is created. If you define constraints for the parameter, you must specify a value that adheres to those constraints.


      :type: any or undefined


   .. py:attribute:: allowedPattern

      A regular expression that represents the patterns to allow for String types.


      :type: string or undefined


   .. py:attribute:: allowedValues

      An array containing the list of values allowed for the parameter.


      :type: string or undefined


   .. py:attribute:: constraintDescription

      A string that explains a constraint when the constraint is violated. For example, without a constraint description, a parameter that has an allowed pattern of [A-Za-z0-9]+ displays the following error message when the user specifies an invalid value:


      :type: string or undefined


   .. py:attribute:: description

      A string of up to 4000 characters that describes the parameter.


      :type: string or undefined


   .. py:attribute:: maxLength

      An integer value that determines the largest number of characters you want to allow for String types.


      :type: number or undefined


   .. py:attribute:: maxValue

      A numeric value that determines the largest numeric value you want to allow for Number types.


      :type: number or undefined


   .. py:attribute:: minLength

      An integer value that determines the smallest number of characters you want to allow for String types.


      :type: number or undefined


   .. py:attribute:: minValue

      A numeric value that determines the smallest numeric value you want to allow for Number types.


      :type: number or undefined


   .. py:attribute:: noEcho

      Whether to mask the parameter value when anyone makes a call that describes the stack. If you set the value to ``true``, the parameter value is masked with asterisks (``*****``).


      :type: boolean or undefined


PolicyDocument
^^^^^^^^^^^^^^

.. py:class:: PolicyDocument([baseDocument])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.PolicyDocument;

      .. code-tab:: javascript

         const { PolicyDocument } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { PolicyDocument } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.Token`
   :param baseDocument: 
   :type baseDocument: any or undefined

   .. py:method:: resolve() -> any

      :rtype: any


   .. py:method:: addStatement(statement) -> @aws-cdk/cdk.PolicyDocument

      :param statement: 
      :type statement: :py:class:`~@aws-cdk/cdk.PolicyStatement`
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyDocument`


   .. py:attribute:: isEmpty

      :type: boolean *(readonly)*


   .. py:attribute:: statementCount

      The number of statements already added to this policy. Can be used, for example, to generate uniuqe "sid"s within the policy.


      :type: number *(readonly)*


PolicyPrincipal
^^^^^^^^^^^^^^^

.. py:class:: PolicyPrincipal()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.PolicyPrincipal;

      .. code-tab:: javascript

         const { PolicyPrincipal } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { PolicyPrincipal } from '@aws-cdk/cdk';



   Represents an IAM principal.


   :abstract: Yes

   .. py:method:: policyFragment() -> @aws-cdk/cdk.PrincipalPolicyFragment

      Return the policy fragment that identifies this principal in a Policy.


      :rtype: :py:class:`~@aws-cdk/cdk.PrincipalPolicyFragment`
      :abstract: Yes


   .. py:attribute:: assumeRoleAction

      When this Principal is used in an AssumeRole policy, the action to use.


      :type: string *(readonly)*


PolicyStatement
^^^^^^^^^^^^^^^

.. py:class:: PolicyStatement([effect])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.PolicyStatement;

      .. code-tab:: javascript

         const { PolicyStatement } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { PolicyStatement } from '@aws-cdk/cdk';



   Represents a statement in an IAM policy document.


   :extends: :py:class:`~@aws-cdk/cdk.Token`
   :param effect: 
   :type effect: :py:class:`~@aws-cdk/cdk.PolicyStatementEffect` or undefined

   .. py:method:: addAction(action) -> @aws-cdk/cdk.PolicyStatement

      :param action: 
      :type action: string
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addActions(*actions) -> @aws-cdk/cdk.PolicyStatement

      :param \*actions: 
      :type \*actions: string
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addPrincipal(principal) -> @aws-cdk/cdk.PolicyStatement

      :param principal: 
      :type principal: :py:class:`~@aws-cdk/cdk.PolicyPrincipal`
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addAwsPrincipal(arn) -> @aws-cdk/cdk.PolicyStatement

      :param arn: 
      :type arn: any
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addAwsAccountPrincipal(accountId) -> @aws-cdk/cdk.PolicyStatement

      :param accountId: 
      :type accountId: any
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addServicePrincipal(service) -> @aws-cdk/cdk.PolicyStatement

      :param service: 
      :type service: any
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addFederatedPrincipal(federated, conditions) -> @aws-cdk/cdk.PolicyStatement

      :param federated: 
      :type federated: any
      :param conditions: 
      :type conditions: any
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addAccountRootPrincipal() -> @aws-cdk/cdk.PolicyStatement

      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addResource(resource) -> @aws-cdk/cdk.PolicyStatement

      :param resource: 
      :type resource: any
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addAllResources() -> @aws-cdk/cdk.PolicyStatement

      Adds a ``"*"`` resource to this statement.


      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addResources(*resources) -> @aws-cdk/cdk.PolicyStatement

      :param \*resources: 
      :type \*resources: any
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: describe(sid) -> @aws-cdk/cdk.PolicyStatement

      :param sid: 
      :type sid: any
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: allow() -> @aws-cdk/cdk.PolicyStatement

      Sets the permission effect to deny access to resources.


      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: deny() -> @aws-cdk/cdk.PolicyStatement

      Sets the permission effect to allow access to resources.


      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addCondition(key, value) -> @aws-cdk/cdk.PolicyStatement

      Add a condition to the Policy


      :param key: 
      :type key: string
      :param value: 
      :type value: any
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: addConditions(conditions) -> @aws-cdk/cdk.PolicyStatement

      Add multiple conditions to the Policy


      :param conditions: 
      :type conditions: any
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: setCondition(key, value) -> @aws-cdk/cdk.PolicyStatement

      Add a condition to the Policy.


      :param key: 
      :type key: string
      :param value: 
      :type value: any
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: limitToAccount(accountId) -> @aws-cdk/cdk.PolicyStatement

      :param accountId: 
      :type accountId: any
      :rtype: :py:class:`~@aws-cdk/cdk.PolicyStatement`


   .. py:method:: resolve() -> any

      :rtype: any


   .. py:method:: toJson() -> any

      :rtype: any


   .. py:attribute:: hasPrincipal

      Indicates if this permission has a "Principal" section.


      :type: boolean *(readonly)*


   .. py:attribute:: hasResource

      Indicates if this permission as at least one resource associated with it.


      :type: boolean *(readonly)*


   .. py:attribute:: isOnlyStarResource

      Indicates if this permission has only a ``"*"`` resource associated with it.


      :type: boolean *(readonly)*


PolicyStatementEffect (enum)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: PolicyStatementEffect

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.PolicyStatementEffect;

      .. code-tab:: javascript

         const { PolicyStatementEffect } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { PolicyStatementEffect } from '@aws-cdk/cdk';



   .. py:data:: Allow

   .. py:data:: Deny


PrincipalPolicyFragment
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: PrincipalPolicyFragment(principalJson, [conditions])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.PrincipalPolicyFragment;

      .. code-tab:: javascript

         const { PrincipalPolicyFragment } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { PrincipalPolicyFragment } from '@aws-cdk/cdk';



   A collection of the fields in a PolicyStatement that can be used to identify a principal.  This consists of the JSON used in the "Principal" field, and optionally a set of "Condition"s that need to be applied to the policy.


   :param principalJson: 
   :type principalJson: any
   :param conditions: 
   :type conditions: any or undefined

   .. py:attribute:: principalJson

      :type: any *(readonly)*


   .. py:attribute:: conditions

      :type: any *(readonly)*


Program
^^^^^^^

.. py:class:: Program([argv])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Program;

      .. code-tab:: javascript

         const { Program } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Program } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.App`
   :param argv: 
   :type argv: string or undefined

PseudoParameter
^^^^^^^^^^^^^^^

.. py:class:: PseudoParameter(name)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.PseudoParameter;

      .. code-tab:: javascript

         const { PseudoParameter } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { PseudoParameter } from '@aws-cdk/cdk';



   :extends: :py:class:`~@aws-cdk/cdk.Token`
   :param name: 
   :type name: string

Referenceable
^^^^^^^^^^^^^

.. py:class:: Referenceable(parent, name)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Referenceable;

      .. code-tab:: javascript

         const { Referenceable } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Referenceable } from '@aws-cdk/cdk';



   A construct, which is part of a stack and can be referenced using it's logical ID using the CloudFormation intrinsic function { Ref: ID }.


   :extends: :py:class:`~@aws-cdk/cdk.StackElement`
   :abstract: Yes
   :param parent: The parent construct
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string

   .. py:attribute:: ref

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: :py:class:`~@aws-cdk/cdk.Token` *(readonly)*


RemovalPolicy (enum)
^^^^^^^^^^^^^^^^^^^^

.. py:class:: RemovalPolicy

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.RemovalPolicy;

      .. code-tab:: javascript

         const { RemovalPolicy } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { RemovalPolicy } from '@aws-cdk/cdk';



   .. py:data:: Destroy

   .. py:data:: Orphan

   .. py:data:: Forbid


Resource
^^^^^^^^

.. py:class:: Resource(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Resource;

      .. code-tab:: javascript

         const { Resource } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Resource } from '@aws-cdk/cdk';



   Represents a CloudFormation resource.


   :extends: :py:class:`~@aws-cdk/cdk.Referenceable`
   :param parent: 
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.ResourceProps`

   .. py:staticmethod:: attribute([customName]) -> any

      A decoration used to create a CloudFormation attribute property.


      :param customName: Custom name for the attribute (default is the name of the property) NOTE: we return "any" here to satistfy jsii, which doesn't support lambdas.
      :type customName: string or undefined
      :rtype: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.Token

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`~@aws-cdk/cdk.Token`


   .. py:method:: addDependency(*other)

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`~@aws-cdk/cdk.IDependable`


   .. py:method:: toCloudFormation() -> json

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:method:: renderProperties() -> string => any

      :rtype: any


   .. py:attribute:: options

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`~@aws-cdk/cdk.ResourceOptions` *(readonly)*


   .. py:attribute:: resourceType

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      AWS resource properties


      :type: any *(readonly)*


ResourceOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ResourceOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ResourceOptions;

      .. code-tab:: javascript

         // ResourceOptions is an interface

      .. code-tab:: typescript

         import { ResourceOptions } from '@aws-cdk/cdk';





   .. py:attribute:: condition

      A condition to associate with this resource. This means that only if the condition evaluates to 'true' when the stack is deployed, the resource will be included. This is provided to allow CDK projects to produce legacy templates, but noramlly there is no need to use it in CDK projects.


      :type: :py:class:`~@aws-cdk/cdk.Condition` or undefined


   .. py:attribute:: creationPolicy

      Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded. To signal a resource, you can use the cfn-signal helper script or SignalResource API. AWS CloudFormation publishes valid signals to the stack events so that you track the number of signals sent.


      :type: :py:class:`~@aws-cdk/cdk.CreationPolicy` or undefined


   .. py:attribute:: deletionPolicy

      With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted. You specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy attribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations that lead to resources being removed.


      :type: :py:class:`~@aws-cdk/cdk.DeletionPolicy` or undefined


   .. py:attribute:: updatePolicy

      Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup resource. AWS CloudFormation invokes one of three update policies depending on the type of change you make or whether a scheduled action is associated with the Auto Scaling group.


      :type: :py:class:`~@aws-cdk/cdk.UpdatePolicy` or undefined


   .. py:attribute:: metadata

      Metadata associated with the CloudFormation resource. This is not the same as the construct metadata which can be added using construct.addMetadata(), but would not appear in the CloudFormation template automatically.


      :type: any or undefined


ResourceProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ResourceProps;

      .. code-tab:: javascript

         // ResourceProps is an interface

      .. code-tab:: typescript

         import { ResourceProps } from '@aws-cdk/cdk';





   .. py:attribute:: type

      CloudFormation resource type.


      :type: string


   .. py:attribute:: properties

      CloudFormation properties.


      :type: any or undefined


ResourceSignal (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ResourceSignal

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ResourceSignal;

      .. code-tab:: javascript

         // ResourceSignal is an interface

      .. code-tab:: typescript

         import { ResourceSignal } from '@aws-cdk/cdk';



   When AWS CloudFormation creates the associated resource, configures the number of required success signals and the length of time that AWS CloudFormation waits for those signals.




   .. py:attribute:: count

      The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE. If the resource receives a failure signal or doesn't receive the specified number of signals before the timeout period expires, the resource creation fails and AWS CloudFormation rolls the stack back.


      :type: number or undefined


   .. py:attribute:: timeout

      The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property. The timeout period starts after AWS CloudFormation starts creating the resource, and the timeout expires no sooner than the time you specify but can occur shortly thereafter. The maximum time that you can specify is 12 hours.


      :type: string or undefined


Root
^^^^

.. py:class:: Root()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Root;

      .. code-tab:: javascript

         const { Root } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Root } from '@aws-cdk/cdk';



   Represents the root of a construct tree. No parent and no name.


   :extends: :py:class:`~@aws-cdk/cdk.Construct`

Rule
^^^^

.. py:class:: Rule(parent, name, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Rule;

      .. code-tab:: javascript

         const { Rule } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Rule } from '@aws-cdk/cdk';



   The Rules that define template constraints in an AWS Service Catalog portfolio describe when end users can use the template and which values they can specify for parameters that are declared in the AWS CloudFormation template used to create the product they are attempting to use. Rules are useful for preventing end users from inadvertently specifying an incorrect value. For example, you can add a rule to verify whether end users specified a valid subnet in a given VPC or used m1.small instance types for test environments. AWS CloudFormation uses rules to validate parameter values before it creates the resources for the product.  A rule can include a RuleCondition property and must include an Assertions property. For each rule, you can define only one rule condition; you can define one or more asserts within the Assertions property. You define a rule condition and assertions by using rule-specific intrinsic functions.
   https://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html


   :extends: :py:class:`~@aws-cdk/cdk.Referenceable`
   :param parent: The parent construct.
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string
   :param props: The rule props.
   :type props: :py:class:`~@aws-cdk/cdk.RuleProps` or undefined

   .. py:method:: addAssertion(condition, description)

      Adds an assertion to the rule.


      :param condition: The expression to evaluation.
      :type condition: :py:class:`~@aws-cdk/cdk.FnCondition`
      :param description: The description of the assertion.
      :type description: string


   .. py:method:: toCloudFormation() -> json

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged at the root level to ensure there are no identity conflicts.  For example, a Resource class will return something like: {      Resources: {          [this.logicalId]: {              Type: this.resourceType,              Properties: this.props,              Condition: this.condition          }      } }


      :rtype: json


   .. py:attribute:: ruleCondition

      If the rule condition evaluates to false, the rule doesn't take effect. If the function in the rule condition evaluates to true, expressions in each assert are evaluated and applied.


      :type: :py:class:`~@aws-cdk/cdk.FnCondition` or undefined


   .. py:attribute:: assertions

      Assertions which define the rule.


      :type: :py:class:`~@aws-cdk/cdk.RuleAssertion` or undefined


RuleAssertion (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RuleAssertion

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.RuleAssertion;

      .. code-tab:: javascript

         // RuleAssertion is an interface

      .. code-tab:: typescript

         import { RuleAssertion } from '@aws-cdk/cdk';



   A rule assertion.




   .. py:attribute:: assert

      The assertion.


      :type: :py:class:`~@aws-cdk/cdk.FnCondition`


   .. py:attribute:: assertDescription

      The assertion description.


      :type: string


RuleProps (interface)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RuleProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.RuleProps;

      .. code-tab:: javascript

         // RuleProps is an interface

      .. code-tab:: typescript

         import { RuleProps } from '@aws-cdk/cdk';



   A rule can include a RuleCondition property and must include an Assertions property. For each rule, you can define only one rule condition; you can define one or more asserts within the Assertions property. You define a rule condition and assertions by using rule-specific intrinsic functions.  You can use the following rule-specific intrinsic functions to define rule conditions and assertions:    Fn::And   Fn::Contains   Fn::EachMemberEquals   Fn::EachMemberIn   Fn::Equals   Fn::If   Fn::Not   Fn::Or   Fn::RefAll   Fn::ValueOf   Fn::ValueOfAll  https://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html




   .. py:attribute:: ruleCondition

      If the rule condition evaluates to false, the rule doesn't take effect. If the function in the rule condition evaluates to true, expressions in each assert are evaluated and applied.


      :type: :py:class:`~@aws-cdk/cdk.Token` or undefined


   .. py:attribute:: assertions

      Assertions which define the rule.


      :type: :py:class:`~@aws-cdk/cdk.RuleAssertion` or undefined


SSMParameterProvider
^^^^^^^^^^^^^^^^^^^^

.. py:class:: SSMParameterProvider(context)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.SSMParameterProvider;

      .. code-tab:: javascript

         const { SSMParameterProvider } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { SSMParameterProvider } from '@aws-cdk/cdk';



   Context provider that will read values from the SSM parameter store in the indicated account and region


   :param context: 
   :type context: :py:class:`~@aws-cdk/cdk.Construct`

   .. py:method:: getString(parameterName) -> any

      Return the SSM parameter string with the indicated key


      :param parameterName: 
      :type parameterName: string
      :rtype: any


Secret
^^^^^^

.. py:class:: Secret([valueOrFunction])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Secret;

      .. code-tab:: javascript

         const { Secret } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Secret } from '@aws-cdk/cdk';



   A token that represents a value that's expected to be a secret, like passwords and keys.  It is recommended to use the `SecretParameter` construct in order to import secret values from the SSM Parameter Store instead of storing them in your code.  However, you can also just pass in values, like any other token: `new Secret('bla')`


   :extends: :py:class:`~@aws-cdk/cdk.Token`
   :param valueOrFunction: 
   :type valueOrFunction: any or undefined

SecretParameter
^^^^^^^^^^^^^^^

.. py:class:: SecretParameter(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.SecretParameter;

      .. code-tab:: javascript

         const { SecretParameter } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { SecretParameter } from '@aws-cdk/cdk';



   Defines a secret value resolved from the Systems Manager (SSM) Parameter Store during deployment. This is useful for referencing values that you do not wish to include in your code base, such as secrets, passwords and keys.  This construct will add a CloudFormation parameter to your template bound to an SSM parameter (of type "AWS::SSM::Parameter::Value<String>"). Deployment will fail if the value doesn't exist in the target environment.  Important: For values other than secrets, prefer to use the `SSMParameterProvider` which resolves SSM parameter in design-time, and ensures that stack deployments are deterministic.


   :extends: :py:class:`~@aws-cdk/cdk.Construct`
   :param parent: 
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.SecretProps`

   .. py:method:: resolve() -> any

      :rtype: any


   .. py:attribute:: value

      A token for the secret value.


      :type: :py:class:`~@aws-cdk/cdk.Token`


SecretProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: SecretProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.SecretProps;

      .. code-tab:: javascript

         // SecretProps is an interface

      .. code-tab:: typescript

         import { SecretProps } from '@aws-cdk/cdk';





   .. py:attribute:: ssmParameter

      The name of the SSM parameter where the secret value is stored.


      :type: string


   .. py:attribute:: description

      A string of up to 4000 characters that describes the parameter.


      :type: string or undefined


   .. py:attribute:: allowedPattern

      A regular expression that represents the patterns to allow for String types.


      :type: string or undefined


   .. py:attribute:: allowedValues

      An array containing the list of values allowed for the parameter.


      :type: string or undefined


   .. py:attribute:: constraintDescription

      A string that explains a constraint when the constraint is violated. For example, without a constraint description, a parameter that has an allowed pattern of [A-Za-z0-9]+ displays the following error message when the user specifies an invalid value:


      :type: string or undefined


   .. py:attribute:: maxLength

      An integer value that determines the largest number of characters you want to allow for String types.


      :type: number or undefined


   .. py:attribute:: minLength

      An integer value that determines the smallest number of characters you want to allow for String types.


      :type: number or undefined


ServicePrincipal
^^^^^^^^^^^^^^^^

.. py:class:: ServicePrincipal(service)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ServicePrincipal;

      .. code-tab:: javascript

         const { ServicePrincipal } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ServicePrincipal } from '@aws-cdk/cdk';



   An IAM principal that represents an AWS service (i.e. sqs.amazonaws.com).


   :extends: :py:class:`~@aws-cdk/cdk.PolicyPrincipal`
   :param service: 
   :type service: any

   .. py:method:: policyFragment() -> @aws-cdk/cdk.PrincipalPolicyFragment

      Return the policy fragment that identifies this principal in a Policy.


      :rtype: :py:class:`~@aws-cdk/cdk.PrincipalPolicyFragment`


   .. py:attribute:: service

      :type: any *(readonly)*


Stack
^^^^^

.. py:class:: Stack([parent, [name, [props]]])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Stack;

      .. code-tab:: javascript

         const { Stack } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Stack } from '@aws-cdk/cdk';



   A root construct which represents a single CloudFormation stack.


   :extends: :py:class:`~@aws-cdk/cdk.Construct`
   :param parent: Parent of this stack, usually a Program instance.
   :type parent: :py:class:`~@aws-cdk/cdk.App` or undefined
   :param name: 
   :type name: string or undefined
   :param props: Stack properties.
   :type props: :py:class:`~@aws-cdk/cdk.StackProps` or undefined

   .. py:staticmethod:: find(node) -> @aws-cdk/cdk.Stack

      Traverses the tree and looks up for the Stack root.


      :param node: A construct in the tree
      :type node: :py:class:`~@aws-cdk/cdk.Construct`
      :return: The Stack object (throws if the node is not part of a Stack-rooted tree)
      :rtype: :py:class:`~@aws-cdk/cdk.Stack`


   .. py:staticmethod:: annotatePhysicalName(construct, [physicalName])

      Adds a metadata annotation "aws:cdk:physical-name" to the construct if physicalName is non-null. This can be used later by tools and aspects to determine if resources have been created with physical names.


      :param construct: 
      :type construct: :py:class:`~@aws-cdk/cdk.Construct`
      :param physicalName: 
      :type physicalName: string or undefined


   .. py:method:: findResource(path) -> @aws-cdk/cdk.Resource

      Looks up a resource by path.


      :param path: 
      :type path: string
      :return: The Resource or undefined if not found
      :rtype: :py:class:`~@aws-cdk/cdk.Resource` or undefined


   .. py:method:: toCloudFormation() -> any

      Returns the CloudFormation template for this stack by traversing the tree and invoking toCloudFormation() on all Entity objects.


      :rtype: any


   .. py:method:: requireRegion([why]) -> string

      :param why: more information about why region is required.
      :type why: string or undefined
      :return: The region in which this stack is deployed. Throws if region is not defined.
      :rtype: string


   .. py:method:: reportMissingContext(key, details)

      Indicate that a context key was expected  Contains instructions on how the key should be supplied.


      :param key: Key that uniquely identifies this missing context.
      :type key: string
      :param details: The set of parameters needed to obtain the context (specific to context provider).
      :type details: :py:class:`@aws-cdk/cx-api.MissingContext`


   .. py:method:: renameLogical(oldId, newId)

      Rename a generated logical identities


      :param oldId: 
      :type oldId: string
      :param newId: 
      :type newId: string


   .. py:attribute:: missingContext

      Lists all missing contextual information. This is returned when the stack is synthesized under the 'missing' attribute and allows tooling to obtain the context and re-synthesize.


      :type: :py:class:`@aws-cdk/cx-api.MissingContext` *(readonly)*


   .. py:attribute:: env

      The environment in which this stack is deployed.


      :type: :py:class:`~@aws-cdk/cdk.Environment` *(readonly)*


   .. py:attribute:: isStack

      Used to determine if this construct is a stack.


      :type: boolean *(readonly)*


   .. py:attribute:: logicalIds

      Logical ID generation strategy


      :type: :py:class:`~@aws-cdk/cdk.LogicalIDs` *(readonly)*


   .. py:attribute:: templateOptions

      Options for CloudFormation template (like version, transform, description).


      :type: :py:class:`~@aws-cdk/cdk.TemplateOptions` *(readonly)*


StackElement
^^^^^^^^^^^^

.. py:class:: StackElement(parent, name)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.StackElement;

      .. code-tab:: javascript

         const { StackElement } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { StackElement } from '@aws-cdk/cdk';



   An element of a CloudFormation stack.


   :extends: :py:class:`~@aws-cdk/cdk.Construct`
   :implements: :py:class:`~@aws-cdk/cdk.IDependable`
   :abstract: Yes
   :param parent: The parent construct
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string

   .. py:method:: toCloudFormation() -> json

      Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged at the root level to ensure there are no identity conflicts.  For example, a Resource class will return something like: {      Resources: {          [this.logicalId]: {              Type: this.resourceType,              Properties: this.props,              Condition: this.condition          }      } }


      :rtype: json
      :abstract: Yes


   .. py:attribute:: logicalId

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stack

      The stack this Construct has been made a part of


      :type: :py:class:`~@aws-cdk/cdk.Stack`


   .. py:attribute:: creationStackTrace

      :type: string *(readonly)*


   .. py:attribute:: stackPath

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: dependencyElements

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`~@aws-cdk/cdk.IDependable` *(readonly)*


StackProps (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: StackProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.StackProps;

      .. code-tab:: javascript

         // StackProps is an interface

      .. code-tab:: typescript

         import { StackProps } from '@aws-cdk/cdk';





   .. py:attribute:: env

      The AWS environment (account/region) where this stack will be deployed.  If not supplied, the `default-account` and `default-region` context parameters will be used. If they are undefined, it will not be possible to deploy the stack.


      :type: :py:class:`~@aws-cdk/cdk.Environment` or undefined


   .. py:attribute:: namingScheme

      Strategy for logical ID generation  Optional. If not supplied, the HashedNamingScheme will be used.


      :type: :py:class:`~@aws-cdk/cdk.IAddressingScheme` or undefined


StringListOutput
^^^^^^^^^^^^^^^^

.. py:class:: StringListOutput(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.StringListOutput;

      .. code-tab:: javascript

         const { StringListOutput } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { StringListOutput } from '@aws-cdk/cdk';



   An output for a list of strings.  Exports a list of Tokens via an Output variable, and return a list of Tokens that selects the imported values for them.


   :extends: :py:class:`~@aws-cdk/cdk.Construct`
   :param parent: 
   :type parent: :py:class:`~@aws-cdk/cdk.Construct`
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/cdk.StringListOutputProps`

   .. py:method:: makeImportValues() -> @aws-cdk/cdk.Token[]

      Return an array of imported values for this Output


      :rtype: :py:class:`~@aws-cdk/cdk.Token`


   .. py:attribute:: length

      Number of elements in the stringlist


      :type: number *(readonly)*


StringListOutputProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: StringListOutputProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.StringListOutputProps;

      .. code-tab:: javascript

         // StringListOutputProps is an interface

      .. code-tab:: typescript

         import { StringListOutputProps } from '@aws-cdk/cdk';



   Properties for ListOutput




   .. py:attribute:: description

      A String type that describes the output value. The description can be a maximum of 4 K in length.


      :type: string or undefined *(readonly)*


   .. py:attribute:: values

      The list of primitives to export


      :type: any *(readonly)*


   .. py:attribute:: separator

      The separator to use to separate stringified values


      :type: string or undefined *(readonly)*


   .. py:attribute:: export

      The name used to export the value of this output across stacks. To import the value from another stack, use `FnImportValue(export)`. You can create an import value token by calling `output.makeImportValue()`.


      :type: string or undefined *(readonly)*


   .. py:attribute:: disableExport

      Disables the automatic allocation of an export name for this output.


      :type: boolean or undefined *(readonly)*


   .. py:attribute:: condition

      A condition from the "Conditions" section to associate with this output value. If the condition evaluates to `false`, this output value will not be included in the stack.


      :type: :py:class:`~@aws-cdk/cdk.Condition` or undefined *(readonly)*


Tag (interface)
^^^^^^^^^^^^^^^

.. py:class:: Tag

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Tag;

      .. code-tab:: javascript

         // Tag is an interface

      .. code-tab:: typescript

         import { Tag } from '@aws-cdk/cdk';





   .. py:attribute:: key

      :type: string or :py:class:`~@aws-cdk/cdk.Token`


   .. py:attribute:: value

      :type: string or :py:class:`~@aws-cdk/cdk.Token`


TemplateOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: TemplateOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.TemplateOptions;

      .. code-tab:: javascript

         // TemplateOptions is an interface

      .. code-tab:: typescript

         import { TemplateOptions } from '@aws-cdk/cdk';



   CloudFormation template options for a stack.




   .. py:attribute:: description

      Gets or sets the description of this stack. If provided, it will be included in the CloudFormation template's "Description" attribute.


      :type: string or undefined


   .. py:attribute:: templateFormatVersion

      Gets or sets the AWSTemplateFormatVersion field of the CloudFormation template.


      :type: string or undefined


   .. py:attribute:: transform

      Gets or sets the top-level template transform for this stack (e.g. "AWS::Serverless-2016-10-31").


      :type: string or undefined


   .. py:attribute:: metadata

      Metadata associated with the CloudFormation template.


      :type: any or undefined


Token
^^^^^

.. py:class:: Token([valueOrFunction])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.Token;

      .. code-tab:: javascript

         const { Token } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { Token } from '@aws-cdk/cdk';



   Represents a lazy-evaluated value. Can be used to delay evaluation of a certain value in case, for example, that it requires some context or late-bound data.


   :param valueOrFunction: 
   :type valueOrFunction: any or undefined

   .. py:method:: resolve() -> any

      :return: The resolved value for this token.
      :rtype: any


UpdatePolicy (interface)
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: UpdatePolicy

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.UpdatePolicy;

      .. code-tab:: javascript

         // UpdatePolicy is an interface

      .. code-tab:: typescript

         import { UpdatePolicy } from '@aws-cdk/cdk';



   Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup resource. AWS CloudFormation invokes one of three update policies depending on the type of change you make or whether a scheduled action is associated with the Auto Scaling group.




   .. py:attribute:: autoScalingReplacingUpdate

      Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement, AWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation can roll back to the old Auto Scaling group and delete the new Auto Scaling group.


      :type: :py:class:`~@aws-cdk/cdk.AutoScalingReplacingUpdate` or undefined


   .. py:attribute:: autoScalingRollingUpdate

      To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate policy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling group in batches or all at once.


      :type: :py:class:`~@aws-cdk/cdk.AutoScalingRollingUpdate` or undefined


   .. py:attribute:: autoScalingScheduledAction

      To specify how AWS CloudFormation handles updates for the MinSize, MaxSize, and DesiredCapacity properties when the AWS::AutoScaling::AutoScalingGroup resource has an associated scheduled action, use the AutoScalingScheduledAction policy.


      :type: :py:class:`~@aws-cdk/cdk.AutoScalingScheduledAction` or undefined


ValidationError
^^^^^^^^^^^^^^^

.. py:class:: ValidationError(source, message)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ValidationError;

      .. code-tab:: javascript

         const { ValidationError } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ValidationError } from '@aws-cdk/cdk';



   :param source: 
   :type source: :py:class:`~@aws-cdk/cdk.Construct`
   :param message: 
   :type message: string

   .. py:attribute:: source

      :type: :py:class:`~@aws-cdk/cdk.Construct` *(readonly)*


   .. py:attribute:: message

      :type: string *(readonly)*


ValidationResult
^^^^^^^^^^^^^^^^

.. py:class:: ValidationResult([errorMessage, [results]])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ValidationResult;

      .. code-tab:: javascript

         const { ValidationResult } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ValidationResult } from '@aws-cdk/cdk';



   Representation of validation results  Models a tree of validation errors so that we have as much information as possible about the failure that occurred.


   :param errorMessage: 
   :type errorMessage: string or undefined
   :param results: 
   :type results: :py:class:`~@aws-cdk/cdk.ValidationResults` or undefined

   .. py:method:: assertSuccess()

      Turn a failed validation into an exception




   .. py:method:: errorTree() -> string

      Return a string rendering of the tree of validation failures


      :rtype: string


   .. py:method:: prefix(message) -> @aws-cdk/cdk.ValidationResult

      Wrap this result with an error message, if it concerns an error


      :param message: 
      :type message: string
      :rtype: :py:class:`~@aws-cdk/cdk.ValidationResult`


   .. py:attribute:: errorMessage

      :type: string *(readonly)*


   .. py:attribute:: results

      :type: :py:class:`~@aws-cdk/cdk.ValidationResults` *(readonly)*


   .. py:attribute:: isSuccess

      :type: boolean *(readonly)*


ValidationResults
^^^^^^^^^^^^^^^^^

.. py:class:: ValidationResults([results])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: java

         import software.amazon.awscdk.ValidationResults;

      .. code-tab:: javascript

         const { ValidationResults } = require('@aws-cdk/cdk');

      .. code-tab:: typescript

         import { ValidationResults } from '@aws-cdk/cdk';



   A collection of validation results


   :param results: 
   :type results: :py:class:`~@aws-cdk/cdk.ValidationResult` or undefined

   .. py:method:: collect(result)

      :param result: 
      :type result: :py:class:`~@aws-cdk/cdk.ValidationResult`


   .. py:method:: errorTreeList() -> string

      :rtype: string


   .. py:method:: wrap(message) -> @aws-cdk/cdk.ValidationResult

      Wrap up all validation results into a single tree node  If there are failures in the collection, add a message, otherwise return a success.


      :param message: 
      :type message: string
      :rtype: :py:class:`~@aws-cdk/cdk.ValidationResult`


   .. py:attribute:: results

      :type: :py:class:`~@aws-cdk/cdk.ValidationResult`


   .. py:attribute:: isSuccess

      :type: boolean *(readonly)*


