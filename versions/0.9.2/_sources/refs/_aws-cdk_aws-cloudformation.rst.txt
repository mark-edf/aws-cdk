.. @jsii-pacmak:meta@ {"fingerprint":"OxxL7TVTUgnM9OKe/LOouhrid/d9Qg6yPnHXr0zN8n0="}

@aws-cdk/aws-cloudformation
===========================

.. mdinclude:: ./__aws-cdk_aws-cloudformation.README.md

Reference
---------

.. tabs::

   .. group-tab:: C#

      View in `Nuget <https://www.nuget.org/packages/Amazon.CDK.AWS.CloudFormation/0.9.2>`_

      **csproj**:

      .. code-block:: xml

         <PackageReference Include="Amazon.CDK.AWS.CloudFormation" Version="0.9.2" />

      **dotnet**:

      .. code-block:: console

         dotnet add package Amazon.CDK.AWS.CloudFormation --version 0.9.2

      **packages.config**:

      .. code-block:: xml

         <package id="Amazon.CDK.AWS.CloudFormation" version="0.9.2" />


   .. group-tab:: Java

      View in `Maven Central <https://repo1.maven.org/maven2/software/amazon/awscdk/cloudformation/0.9.2/>`_

      **Apache Buildr**:

      .. code-block:: none

         'software.amazon.awscdk:cloudformation:jar:0.9.2'

      **Apache Ivy**:

      .. code-block:: xml

         <dependency groupId="software.amazon.awscdk" name="cloudformation" rev="0.9.2"/>

      **Apache Maven**:

      .. code-block:: xml

         <dependency>
           <groupId>software.amazon.awscdk</groupId>
           <artifactId>cloudformation</artifactId>
           <version>0.9.2</version>
         </dependency>

      **Gradle / Grails**:

      .. code-block:: none

         compile 'software.amazon.awscdk:cloudformation:0.9.2'

      **Groovy Grape**:

      .. code-block:: none

         @Grapes(
         @Grab(group='software.amazon.awscdk', module='cloudformation', version='0.9.2')
         )


   .. group-tab:: JavaScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-cloudformation/v/0.9.2>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-cloudformation@0.9.2

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-cloudformation": "^0.9.2"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-cloudformation@0.9.2


   .. group-tab:: TypeScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-cloudformation/v/0.9.2>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-cloudformation@0.9.2

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-cloudformation": "^0.9.2"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-cloudformation@0.9.2



.. py:module:: @aws-cdk/aws-cloudformation

CloudFormationAction
^^^^^^^^^^^^^^^^^^^^

.. py:class:: CloudFormationAction(parent, id, props, [configuration])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.CloudFormationAction;

      .. code-tab:: javascript

         const { CloudFormationAction } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { CloudFormationAction } from '@aws-cdk/aws-cloudformation';



   Base class for Actions that execute CloudFormation


   :extends: :py:class:`@aws-cdk/aws-codepipeline-api.DeployAction`\ 
   :abstract: Yes
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationCommonProps`\ 
   :param configuration: 
   :type configuration: any or ``undefined``

   .. py:attribute:: artifact

      Output artifact containing the CloudFormation call response  Only present if configured by passing `outputFileName`.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\  or ``undefined``


   .. py:method:: addChild(child, name)

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: 
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param name: 
      :type name: string


   .. py:method:: addInputArtifact(artifact) -> @aws-cdk/aws-codepipeline-api.Action

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addInputArtifact>`

      *Protected method*

      :param artifact: 
      :type artifact: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Action`\ 


   .. py:method:: addOutputArtifact(name) -> @aws-cdk/aws-codepipeline-api.Artifact

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addOutputArtifact>`

      *Protected method*

      :param name: 
      :type name: string
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 


   .. py:method:: onStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.onStateChange>`

      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :rtype: string[]


   .. py:attribute:: category

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.category>`

      The category of the action. The category defines which action type the owner (the entity that performs the action) performs.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ActionCategory`\  *(readonly)*


   .. py:attribute:: inputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.inputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: outputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.outputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: owner

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.owner>`

      :type: string *(readonly)*


   .. py:attribute:: provider

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.provider>`

      The service provider that the action calls.


      :type: string *(readonly)*


   .. py:attribute:: version

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.version>`

      :type: string *(readonly)*


   .. py:attribute:: configuration

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.configuration>`

      The action's configuration. These are key-value pairs that specify input values for an action. For more information, see the AWS CodePipeline User Guide.  http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: runOrder

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.runOrder>`

      The order in which AWS CodePipeline runs this action. For more information, see the AWS CodePipeline User Guide.  https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: number


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


CloudFormationCapabilities (enum)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CloudFormationCapabilities

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.CloudFormationCapabilities;

      .. code-tab:: javascript

         const { CloudFormationCapabilities } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { CloudFormationCapabilities } from '@aws-cdk/aws-cloudformation';



   Capabilities that affect whether CloudFormation is allowed to change IAM resources


   .. py:data:: IAM

   Capability to create anonymous IAM resources  Pass this capability if you're only creating anonymous resources.


   .. py:data:: NamedIAM

   Capability to create named IAM resources.  Pass this capability if you're creating IAM resources that have physical names.  `CloudFormationCapabilities.NamedIAM` implies `CloudFormationCapabilities.IAM`; you don't have to pass both.



CloudFormationCommonProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CloudFormationCommonProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.CloudFormationCommonProps;

      .. code-tab:: javascript

         // CloudFormationCommonProps is an interface

      .. code-tab:: typescript

         import { CloudFormationCommonProps } from '@aws-cdk/aws-cloudformation';



   Properties common to all CloudFormation actions


   :extends: :py:class:`@aws-cdk/aws-codepipeline-api.CommonActionProps`\ 


   .. py:attribute:: stackName

      The name of the stack to apply this action to


      :type: string *(abstract)*


   .. py:attribute:: outputArtifactName

      The name of the output artifact to generate  Only applied if `outputFileName` is set as well.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: outputFileName

      A name for the filename in the output artifact to store the AWS CloudFormation call's result.  The file will contain the result of the call to AWS CloudFormation (for example the call to UpdateStack or CreateChangeSet).  AWS CodePipeline adds the file to the output artifact after performing the specified action.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: stage

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.CommonActionProps <@aws-cdk/aws-codepipeline-api.CommonActionProps.stage>`

      The Pipeline Stage to add this Action to.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\  *(abstract)*


CloudFormationDeploymentAction
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CloudFormationDeploymentAction(parent, id, props, [configuration])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.CloudFormationDeploymentAction;

      .. code-tab:: javascript

         const { CloudFormationDeploymentAction } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { CloudFormationDeploymentAction } from '@aws-cdk/aws-cloudformation';



   Base class for all CloudFormation actions that execute or stage deployments.


   :extends: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationAction`\ 
   :abstract: Yes
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps`\ 
   :param configuration: 
   :type configuration: any or ``undefined``

   .. py:method:: addToRolePolicy(statement)

      Add statement to the service role assumed by CloudFormation while executing this action.


      :param statement: 
      :type statement: :py:class:`@aws-cdk/cdk.PolicyStatement`\ 


   .. py:attribute:: role

      :type: :py:class:`@aws-cdk/aws-iam.Role`\  *(readonly)*


   .. py:attribute:: artifact

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationAction <@aws-cdk/aws-cloudformation.CloudFormationAction.artifact>`

      Output artifact containing the CloudFormation call response  Only present if configured by passing `outputFileName`.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\  or ``undefined``


   .. py:method:: addChild(child, name)

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: 
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param name: 
      :type name: string


   .. py:method:: addInputArtifact(artifact) -> @aws-cdk/aws-codepipeline-api.Action

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addInputArtifact>`

      *Protected method*

      :param artifact: 
      :type artifact: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Action`\ 


   .. py:method:: addOutputArtifact(name) -> @aws-cdk/aws-codepipeline-api.Artifact

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addOutputArtifact>`

      *Protected method*

      :param name: 
      :type name: string
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 


   .. py:method:: onStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.onStateChange>`

      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :rtype: string[]


   .. py:attribute:: category

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.category>`

      The category of the action. The category defines which action type the owner (the entity that performs the action) performs.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ActionCategory`\  *(readonly)*


   .. py:attribute:: inputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.inputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: outputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.outputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: owner

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.owner>`

      :type: string *(readonly)*


   .. py:attribute:: provider

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.provider>`

      The service provider that the action calls.


      :type: string *(readonly)*


   .. py:attribute:: version

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.version>`

      :type: string *(readonly)*


   .. py:attribute:: configuration

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.configuration>`

      The action's configuration. These are key-value pairs that specify input values for an action. For more information, see the AWS CodePipeline User Guide.  http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: runOrder

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.runOrder>`

      The order in which AWS CodePipeline runs this action. For more information, see the AWS CodePipeline User Guide.  https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: number


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


CloudFormationDeploymentActionCommonProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CloudFormationDeploymentActionCommonProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.CloudFormationDeploymentActionCommonProps;

      .. code-tab:: javascript

         // CloudFormationDeploymentActionCommonProps is an interface

      .. code-tab:: typescript

         import { CloudFormationDeploymentActionCommonProps } from '@aws-cdk/aws-cloudformation';



   Properties common to CloudFormation actions that stage deployments


   :extends: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationCommonProps`\ 


   .. py:attribute:: capabilities

      Acknowledge certain changes made as part of deployment  For stacks that contain certain resources, explicit acknowledgement that AWS CloudFormation might create or update those resources. For example, you must specify CAPABILITY_IAM if your stack template contains AWS Identity and Access Management (IAM) resources. For more information, see [Acknowledging IAM Resources in AWS CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).


      :type: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationCapabilities`\ [] or ``undefined`` *(abstract)*


   .. py:attribute:: fullPermissions

      Whether to grant full permissions to CloudFormation while deploying this template.  Setting this to `true` affects the defaults for `role` and `capabilities`, if you don't specify any alternatives.  The default role that will be created for you will have full (i.e., `*`) permissions on all resources, and the deployment will have named IAM capabilities (i.e., able to create all IAM resources).  This is a shorthand that you can use if you fully trust the templates that are deployed in this pipeline. If you want more fine-grained permissions, use `addToRolePolicy` and `capabilities` to control what the CloudFormation deployment is allowed to do.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: parameterOverrides

      Additional template parameters.  Template parameters specified here take precedence over template parameters found in the artifact specified by the `templateConfiguration` property.  We recommend that you use the template configuration file to specify most of your parameter values. Use parameter overrides to specify only dynamic parameter values (values that are unknown until you run the pipeline).  All parameter names must be present in the stack template.  Note: the entire object cannot be more than 1kB.


      :type: string => (any or ``undefined``) or ``undefined`` *(abstract)*


   .. py:attribute:: role

      IAM role to assume when deploying changes.  If not specified, a fresh role is created. The role is created with zero permissions unless `trustTemplate` is true, in which case the role will have full permissions.


      :type: :py:class:`@aws-cdk/aws-iam.Role`\  or ``undefined`` *(abstract)*


   .. py:attribute:: templateConfiguration

      Input artifact to use for template parameters values and stack policy.  The template configuration file should contain a JSON object that should look like this: `{ "Parameters": {...}, "Tags": {...}, "StackPolicy": {... }}`. For more information, see [AWS CloudFormation Artifacts](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-cfn-artifacts.html).  Note that if you include sensitive information, such as passwords, restrict access to this file.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ArtifactPath`\  or ``undefined`` *(abstract)*


   .. py:attribute:: stackName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.stackName>`

      The name of the stack to apply this action to


      :type: string *(abstract)*


   .. py:attribute:: outputArtifactName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.outputArtifactName>`

      The name of the output artifact to generate  Only applied if `outputFileName` is set as well.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: outputFileName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.outputFileName>`

      A name for the filename in the output artifact to store the AWS CloudFormation call's result.  The file will contain the result of the call to AWS CloudFormation (for example the call to UpdateStack or CreateChangeSet).  AWS CodePipeline adds the file to the output artifact after performing the specified action.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: stage

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.CommonActionProps <@aws-cdk/aws-codepipeline-api.CommonActionProps.stage>`

      The Pipeline Stage to add this Action to.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\  *(abstract)*


CreateReplaceChangeSet
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CreateReplaceChangeSet(parent, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.CreateReplaceChangeSet;

      .. code-tab:: javascript

         const { CreateReplaceChangeSet } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { CreateReplaceChangeSet } from '@aws-cdk/aws-cloudformation';



   CodePipeline action to prepare a change set.  Creates the change set if it doesn't exist based on the stack name and template that you submit. If the change set exists, AWS CloudFormation deletes it, and then creates a new one.


   :extends: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-cloudformation.CreateReplaceChangeSetProps`\ 

   .. py:attribute:: artifact

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationAction <@aws-cdk/aws-cloudformation.CloudFormationAction.artifact>`

      Output artifact containing the CloudFormation call response  Only present if configured by passing `outputFileName`.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\  or ``undefined``


   .. py:method:: addToRolePolicy(statement)

      *Inherited from* :py:meth:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction <@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction.addToRolePolicy>`

      Add statement to the service role assumed by CloudFormation while executing this action.


      :param statement: 
      :type statement: :py:class:`@aws-cdk/cdk.PolicyStatement`\ 


   .. py:attribute:: role

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction <@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction.role>`

      :type: :py:class:`@aws-cdk/aws-iam.Role`\  *(readonly)*


   .. py:method:: addChild(child, name)

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: 
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param name: 
      :type name: string


   .. py:method:: addInputArtifact(artifact) -> @aws-cdk/aws-codepipeline-api.Action

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addInputArtifact>`

      *Protected method*

      :param artifact: 
      :type artifact: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Action`\ 


   .. py:method:: addOutputArtifact(name) -> @aws-cdk/aws-codepipeline-api.Artifact

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addOutputArtifact>`

      *Protected method*

      :param name: 
      :type name: string
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 


   .. py:method:: onStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.onStateChange>`

      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :rtype: string[]


   .. py:attribute:: category

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.category>`

      The category of the action. The category defines which action type the owner (the entity that performs the action) performs.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ActionCategory`\  *(readonly)*


   .. py:attribute:: inputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.inputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: outputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.outputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: owner

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.owner>`

      :type: string *(readonly)*


   .. py:attribute:: provider

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.provider>`

      The service provider that the action calls.


      :type: string *(readonly)*


   .. py:attribute:: version

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.version>`

      :type: string *(readonly)*


   .. py:attribute:: configuration

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.configuration>`

      The action's configuration. These are key-value pairs that specify input values for an action. For more information, see the AWS CodePipeline User Guide.  http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: runOrder

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.runOrder>`

      The order in which AWS CodePipeline runs this action. For more information, see the AWS CodePipeline User Guide.  https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: number


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


CreateReplaceChangeSetProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CreateReplaceChangeSetProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.CreateReplaceChangeSetProps;

      .. code-tab:: javascript

         // CreateReplaceChangeSetProps is an interface

      .. code-tab:: typescript

         import { CreateReplaceChangeSetProps } from '@aws-cdk/aws-cloudformation';



   Properties for the CreateReplaceChangeSet action.


   :extends: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps`\ 


   .. py:attribute:: changeSetName

      Name of the change set to create or update.


      :type: string *(abstract)*


   .. py:attribute:: templatePath

      Input artifact with the ChangeSet's CloudFormation template


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ArtifactPath`\  *(abstract)*


   .. py:attribute:: stackName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.stackName>`

      The name of the stack to apply this action to


      :type: string *(abstract)*


   .. py:attribute:: outputArtifactName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.outputArtifactName>`

      The name of the output artifact to generate  Only applied if `outputFileName` is set as well.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: outputFileName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.outputFileName>`

      A name for the filename in the output artifact to store the AWS CloudFormation call's result.  The file will contain the result of the call to AWS CloudFormation (for example the call to UpdateStack or CreateChangeSet).  AWS CodePipeline adds the file to the output artifact after performing the specified action.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: capabilities

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.capabilities>`

      Acknowledge certain changes made as part of deployment  For stacks that contain certain resources, explicit acknowledgement that AWS CloudFormation might create or update those resources. For example, you must specify CAPABILITY_IAM if your stack template contains AWS Identity and Access Management (IAM) resources. For more information, see [Acknowledging IAM Resources in AWS CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).


      :type: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationCapabilities`\ [] or ``undefined`` *(abstract)*


   .. py:attribute:: fullPermissions

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.fullPermissions>`

      Whether to grant full permissions to CloudFormation while deploying this template.  Setting this to `true` affects the defaults for `role` and `capabilities`, if you don't specify any alternatives.  The default role that will be created for you will have full (i.e., `*`) permissions on all resources, and the deployment will have named IAM capabilities (i.e., able to create all IAM resources).  This is a shorthand that you can use if you fully trust the templates that are deployed in this pipeline. If you want more fine-grained permissions, use `addToRolePolicy` and `capabilities` to control what the CloudFormation deployment is allowed to do.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: parameterOverrides

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.parameterOverrides>`

      Additional template parameters.  Template parameters specified here take precedence over template parameters found in the artifact specified by the `templateConfiguration` property.  We recommend that you use the template configuration file to specify most of your parameter values. Use parameter overrides to specify only dynamic parameter values (values that are unknown until you run the pipeline).  All parameter names must be present in the stack template.  Note: the entire object cannot be more than 1kB.


      :type: string => (any or ``undefined``) or ``undefined`` *(abstract)*


   .. py:attribute:: role

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.role>`

      IAM role to assume when deploying changes.  If not specified, a fresh role is created. The role is created with zero permissions unless `trustTemplate` is true, in which case the role will have full permissions.


      :type: :py:class:`@aws-cdk/aws-iam.Role`\  or ``undefined`` *(abstract)*


   .. py:attribute:: templateConfiguration

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.templateConfiguration>`

      Input artifact to use for template parameters values and stack policy.  The template configuration file should contain a JSON object that should look like this: `{ "Parameters": {...}, "Tags": {...}, "StackPolicy": {... }}`. For more information, see [AWS CloudFormation Artifacts](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-cfn-artifacts.html).  Note that if you include sensitive information, such as passwords, restrict access to this file.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ArtifactPath`\  or ``undefined`` *(abstract)*


   .. py:attribute:: stage

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.CommonActionProps <@aws-cdk/aws-codepipeline-api.CommonActionProps.stage>`

      The Pipeline Stage to add this Action to.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\  *(abstract)*


CreateUpdateProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CreateUpdateProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.CreateUpdateProps;

      .. code-tab:: javascript

         // CreateUpdateProps is an interface

      .. code-tab:: typescript

         import { CreateUpdateProps } from '@aws-cdk/aws-cloudformation';



   Properties for the CreateUpdate action


   :extends: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps`\ 


   .. py:attribute:: templatePath

      Input artifact with the CloudFormation template to deploy


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ArtifactPath`\  *(abstract)*


   .. py:attribute:: replaceOnFailure

      Replace the stack if it's in a failed state.  If this is set to true and the stack is in a failed state (one of ROLLBACK_COMPLETE, ROLLBACK_FAILED, CREATE_FAILED, DELETE_FAILED, or UPDATE_ROLLBACK_FAILED), AWS CloudFormation deletes the stack and then creates a new stack.  If this is not set to true and the stack is in a failed state, the deployment fails.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: stackName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.stackName>`

      The name of the stack to apply this action to


      :type: string *(abstract)*


   .. py:attribute:: outputArtifactName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.outputArtifactName>`

      The name of the output artifact to generate  Only applied if `outputFileName` is set as well.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: outputFileName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.outputFileName>`

      A name for the filename in the output artifact to store the AWS CloudFormation call's result.  The file will contain the result of the call to AWS CloudFormation (for example the call to UpdateStack or CreateChangeSet).  AWS CodePipeline adds the file to the output artifact after performing the specified action.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: capabilities

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.capabilities>`

      Acknowledge certain changes made as part of deployment  For stacks that contain certain resources, explicit acknowledgement that AWS CloudFormation might create or update those resources. For example, you must specify CAPABILITY_IAM if your stack template contains AWS Identity and Access Management (IAM) resources. For more information, see [Acknowledging IAM Resources in AWS CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).


      :type: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationCapabilities`\ [] or ``undefined`` *(abstract)*


   .. py:attribute:: fullPermissions

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.fullPermissions>`

      Whether to grant full permissions to CloudFormation while deploying this template.  Setting this to `true` affects the defaults for `role` and `capabilities`, if you don't specify any alternatives.  The default role that will be created for you will have full (i.e., `*`) permissions on all resources, and the deployment will have named IAM capabilities (i.e., able to create all IAM resources).  This is a shorthand that you can use if you fully trust the templates that are deployed in this pipeline. If you want more fine-grained permissions, use `addToRolePolicy` and `capabilities` to control what the CloudFormation deployment is allowed to do.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: parameterOverrides

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.parameterOverrides>`

      Additional template parameters.  Template parameters specified here take precedence over template parameters found in the artifact specified by the `templateConfiguration` property.  We recommend that you use the template configuration file to specify most of your parameter values. Use parameter overrides to specify only dynamic parameter values (values that are unknown until you run the pipeline).  All parameter names must be present in the stack template.  Note: the entire object cannot be more than 1kB.


      :type: string => (any or ``undefined``) or ``undefined`` *(abstract)*


   .. py:attribute:: role

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.role>`

      IAM role to assume when deploying changes.  If not specified, a fresh role is created. The role is created with zero permissions unless `trustTemplate` is true, in which case the role will have full permissions.


      :type: :py:class:`@aws-cdk/aws-iam.Role`\  or ``undefined`` *(abstract)*


   .. py:attribute:: templateConfiguration

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.templateConfiguration>`

      Input artifact to use for template parameters values and stack policy.  The template configuration file should contain a JSON object that should look like this: `{ "Parameters": {...}, "Tags": {...}, "StackPolicy": {... }}`. For more information, see [AWS CloudFormation Artifacts](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-cfn-artifacts.html).  Note that if you include sensitive information, such as passwords, restrict access to this file.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ArtifactPath`\  or ``undefined`` *(abstract)*


   .. py:attribute:: stage

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.CommonActionProps <@aws-cdk/aws-codepipeline-api.CommonActionProps.stage>`

      The Pipeline Stage to add this Action to.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\  *(abstract)*


CreateUpdateStack
^^^^^^^^^^^^^^^^^

.. py:class:: CreateUpdateStack(parent, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.CreateUpdateStack;

      .. code-tab:: javascript

         const { CreateUpdateStack } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { CreateUpdateStack } from '@aws-cdk/aws-cloudformation';



   CodePipeline action to deploy a stack.  Creates the stack if the specified stack doesn't exist. If the stack exists, AWS CloudFormation updates the stack. Use this action to update existing stacks.  AWS CodePipeline won't replace the stack, and will fail deployment if the stack is in a failed state. Use `ReplaceOnFailure` for an action that will delete and recreate the stack to try and recover from failed states.  Use this action to automatically replace failed stacks without recovering or troubleshooting them. You would typically choose this mode for testing.


   :extends: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-cloudformation.CreateUpdateProps`\ 

   .. py:attribute:: artifact

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationAction <@aws-cdk/aws-cloudformation.CloudFormationAction.artifact>`

      Output artifact containing the CloudFormation call response  Only present if configured by passing `outputFileName`.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\  or ``undefined``


   .. py:method:: addToRolePolicy(statement)

      *Inherited from* :py:meth:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction <@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction.addToRolePolicy>`

      Add statement to the service role assumed by CloudFormation while executing this action.


      :param statement: 
      :type statement: :py:class:`@aws-cdk/cdk.PolicyStatement`\ 


   .. py:attribute:: role

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction <@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction.role>`

      :type: :py:class:`@aws-cdk/aws-iam.Role`\  *(readonly)*


   .. py:method:: addChild(child, name)

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: 
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param name: 
      :type name: string


   .. py:method:: addInputArtifact(artifact) -> @aws-cdk/aws-codepipeline-api.Action

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addInputArtifact>`

      *Protected method*

      :param artifact: 
      :type artifact: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Action`\ 


   .. py:method:: addOutputArtifact(name) -> @aws-cdk/aws-codepipeline-api.Artifact

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addOutputArtifact>`

      *Protected method*

      :param name: 
      :type name: string
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 


   .. py:method:: onStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.onStateChange>`

      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :rtype: string[]


   .. py:attribute:: category

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.category>`

      The category of the action. The category defines which action type the owner (the entity that performs the action) performs.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ActionCategory`\  *(readonly)*


   .. py:attribute:: inputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.inputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: outputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.outputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: owner

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.owner>`

      :type: string *(readonly)*


   .. py:attribute:: provider

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.provider>`

      The service provider that the action calls.


      :type: string *(readonly)*


   .. py:attribute:: version

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.version>`

      :type: string *(readonly)*


   .. py:attribute:: configuration

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.configuration>`

      The action's configuration. These are key-value pairs that specify input values for an action. For more information, see the AWS CodePipeline User Guide.  http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: runOrder

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.runOrder>`

      The order in which AWS CodePipeline runs this action. For more information, see the AWS CodePipeline User Guide.  https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: number


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


CustomResource
^^^^^^^^^^^^^^

.. py:class:: CustomResource(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.CustomResource;

      .. code-tab:: javascript

         const { CustomResource } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { CustomResource } from '@aws-cdk/aws-cloudformation';



   Custom resource that is implemented using a Lambda  As a custom resource author, you should be publishing a subclass of this class that hides the choice of provider, and accepts a strongly-typed properties object with the properties your provider accepts.


   :extends: :py:class:`~@aws-cdk/aws-cloudformation.cloudformation.CustomResource`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-cloudformation.CustomResourceProps`\ 

   .. py:method:: renderProperties() -> string => any

      *Overrides* :py:meth:`@aws-cdk/aws-cloudformation.cloudformation.CustomResource.renderProperties`

      Override renderProperties to mix in the user-defined properties


      *Protected method*

      :rtype: string => (any or ``undefined``)


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: string *(readonly)*


   .. py:method:: addDependency(*other)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependency>`

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`@aws-cdk/cdk.IDependable`\ 


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CloudFormationToken

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: dependencyElements

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.dependencyElements>`

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`@aws-cdk/cdk.IDependable`\ [] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of


      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Stack`\ 


CustomResourceProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CustomResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.CustomResourceProps;

      .. code-tab:: javascript

         // CustomResourceProps is an interface

      .. code-tab:: typescript

         import { CustomResourceProps } from '@aws-cdk/aws-cloudformation';



   Properties to provide a Lambda-backed custom resource




   .. py:attribute:: lambdaProvider

      The Lambda provider that implements this custom resource.  We recommend using a lambda.SingletonFunction for this.  Optional, exactly one of lamdaProvider or topicProvider must be set.


      :type: :py:class:`@aws-cdk/aws-lambda.FunctionRef`\  or ``undefined`` *(abstract)*


   .. py:attribute:: properties

      Properties to pass to the Lambda


      :type: string => (any or ``undefined``) or ``undefined`` *(abstract)*


   .. py:attribute:: topicProvider

      The SNS Topic for the provider that implements this custom resource.  Optional, exactly one of lamdaProvider or topicProvider must be set.


      :type: :py:class:`@aws-cdk/aws-sns.TopicRef`\  or ``undefined`` *(abstract)*


DeleteStackOnly
^^^^^^^^^^^^^^^

.. py:class:: DeleteStackOnly(parent, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.DeleteStackOnly;

      .. code-tab:: javascript

         const { DeleteStackOnly } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { DeleteStackOnly } from '@aws-cdk/aws-cloudformation';



   CodePipeline action to delete a stack.  Deletes a stack. If you specify a stack that doesn't exist, the action completes successfully without deleting a stack.


   :extends: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-cloudformation.DeleteStackOnlyProps`\ 

   .. py:attribute:: artifact

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationAction <@aws-cdk/aws-cloudformation.CloudFormationAction.artifact>`

      Output artifact containing the CloudFormation call response  Only present if configured by passing `outputFileName`.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\  or ``undefined``


   .. py:method:: addToRolePolicy(statement)

      *Inherited from* :py:meth:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction <@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction.addToRolePolicy>`

      Add statement to the service role assumed by CloudFormation while executing this action.


      :param statement: 
      :type statement: :py:class:`@aws-cdk/cdk.PolicyStatement`\ 


   .. py:attribute:: role

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction <@aws-cdk/aws-cloudformation.CloudFormationDeploymentAction.role>`

      :type: :py:class:`@aws-cdk/aws-iam.Role`\  *(readonly)*


   .. py:method:: addChild(child, name)

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: 
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param name: 
      :type name: string


   .. py:method:: addInputArtifact(artifact) -> @aws-cdk/aws-codepipeline-api.Action

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addInputArtifact>`

      *Protected method*

      :param artifact: 
      :type artifact: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Action`\ 


   .. py:method:: addOutputArtifact(name) -> @aws-cdk/aws-codepipeline-api.Artifact

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addOutputArtifact>`

      *Protected method*

      :param name: 
      :type name: string
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 


   .. py:method:: onStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.onStateChange>`

      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :rtype: string[]


   .. py:attribute:: category

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.category>`

      The category of the action. The category defines which action type the owner (the entity that performs the action) performs.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ActionCategory`\  *(readonly)*


   .. py:attribute:: inputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.inputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: outputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.outputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: owner

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.owner>`

      :type: string *(readonly)*


   .. py:attribute:: provider

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.provider>`

      The service provider that the action calls.


      :type: string *(readonly)*


   .. py:attribute:: version

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.version>`

      :type: string *(readonly)*


   .. py:attribute:: configuration

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.configuration>`

      The action's configuration. These are key-value pairs that specify input values for an action. For more information, see the AWS CodePipeline User Guide.  http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: runOrder

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.runOrder>`

      The order in which AWS CodePipeline runs this action. For more information, see the AWS CodePipeline User Guide.  https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: number


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


DeleteStackOnlyProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: DeleteStackOnlyProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.DeleteStackOnlyProps;

      .. code-tab:: javascript

         // DeleteStackOnlyProps is an interface

      .. code-tab:: typescript

         import { DeleteStackOnlyProps } from '@aws-cdk/aws-cloudformation';



   Properties for the DeleteOnly action


   :extends: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps`\ 


   .. py:attribute:: stackName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.stackName>`

      The name of the stack to apply this action to


      :type: string *(abstract)*


   .. py:attribute:: outputArtifactName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.outputArtifactName>`

      The name of the output artifact to generate  Only applied if `outputFileName` is set as well.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: outputFileName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.outputFileName>`

      A name for the filename in the output artifact to store the AWS CloudFormation call's result.  The file will contain the result of the call to AWS CloudFormation (for example the call to UpdateStack or CreateChangeSet).  AWS CodePipeline adds the file to the output artifact after performing the specified action.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: capabilities

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.capabilities>`

      Acknowledge certain changes made as part of deployment  For stacks that contain certain resources, explicit acknowledgement that AWS CloudFormation might create or update those resources. For example, you must specify CAPABILITY_IAM if your stack template contains AWS Identity and Access Management (IAM) resources. For more information, see [Acknowledging IAM Resources in AWS CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).


      :type: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationCapabilities`\ [] or ``undefined`` *(abstract)*


   .. py:attribute:: fullPermissions

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.fullPermissions>`

      Whether to grant full permissions to CloudFormation while deploying this template.  Setting this to `true` affects the defaults for `role` and `capabilities`, if you don't specify any alternatives.  The default role that will be created for you will have full (i.e., `*`) permissions on all resources, and the deployment will have named IAM capabilities (i.e., able to create all IAM resources).  This is a shorthand that you can use if you fully trust the templates that are deployed in this pipeline. If you want more fine-grained permissions, use `addToRolePolicy` and `capabilities` to control what the CloudFormation deployment is allowed to do.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: parameterOverrides

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.parameterOverrides>`

      Additional template parameters.  Template parameters specified here take precedence over template parameters found in the artifact specified by the `templateConfiguration` property.  We recommend that you use the template configuration file to specify most of your parameter values. Use parameter overrides to specify only dynamic parameter values (values that are unknown until you run the pipeline).  All parameter names must be present in the stack template.  Note: the entire object cannot be more than 1kB.


      :type: string => (any or ``undefined``) or ``undefined`` *(abstract)*


   .. py:attribute:: role

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.role>`

      IAM role to assume when deploying changes.  If not specified, a fresh role is created. The role is created with zero permissions unless `trustTemplate` is true, in which case the role will have full permissions.


      :type: :py:class:`@aws-cdk/aws-iam.Role`\  or ``undefined`` *(abstract)*


   .. py:attribute:: templateConfiguration

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps <@aws-cdk/aws-cloudformation.CloudFormationDeploymentActionCommonProps.templateConfiguration>`

      Input artifact to use for template parameters values and stack policy.  The template configuration file should contain a JSON object that should look like this: `{ "Parameters": {...}, "Tags": {...}, "StackPolicy": {... }}`. For more information, see [AWS CloudFormation Artifacts](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-cfn-artifacts.html).  Note that if you include sensitive information, such as passwords, restrict access to this file.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ArtifactPath`\  or ``undefined`` *(abstract)*


   .. py:attribute:: stage

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.CommonActionProps <@aws-cdk/aws-codepipeline-api.CommonActionProps.stage>`

      The Pipeline Stage to add this Action to.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\  *(abstract)*


ExecuteChangeSet
^^^^^^^^^^^^^^^^

.. py:class:: ExecuteChangeSet(parent, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.ExecuteChangeSet;

      .. code-tab:: javascript

         const { ExecuteChangeSet } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { ExecuteChangeSet } from '@aws-cdk/aws-cloudformation';



   CodePipeline action to execute a prepared change set.


   :extends: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationAction`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-cloudformation.ExecuteChangeSetProps`\ 

   .. py:attribute:: artifact

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationAction <@aws-cdk/aws-cloudformation.CloudFormationAction.artifact>`

      Output artifact containing the CloudFormation call response  Only present if configured by passing `outputFileName`.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\  or ``undefined``


   .. py:method:: addChild(child, name)

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: 
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param name: 
      :type name: string


   .. py:method:: addInputArtifact(artifact) -> @aws-cdk/aws-codepipeline-api.Action

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addInputArtifact>`

      *Protected method*

      :param artifact: 
      :type artifact: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Action`\ 


   .. py:method:: addOutputArtifact(name) -> @aws-cdk/aws-codepipeline-api.Artifact

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addOutputArtifact>`

      *Protected method*

      :param name: 
      :type name: string
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 


   .. py:method:: onStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.onStateChange>`

      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :rtype: string[]


   .. py:attribute:: category

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.category>`

      The category of the action. The category defines which action type the owner (the entity that performs the action) performs.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ActionCategory`\  *(readonly)*


   .. py:attribute:: inputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.inputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: outputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.outputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: owner

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.owner>`

      :type: string *(readonly)*


   .. py:attribute:: provider

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.provider>`

      The service provider that the action calls.


      :type: string *(readonly)*


   .. py:attribute:: version

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.version>`

      :type: string *(readonly)*


   .. py:attribute:: configuration

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.configuration>`

      The action's configuration. These are key-value pairs that specify input values for an action. For more information, see the AWS CodePipeline User Guide.  http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: runOrder

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.runOrder>`

      The order in which AWS CodePipeline runs this action. For more information, see the AWS CodePipeline User Guide.  https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: number


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


ExecuteChangeSetProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ExecuteChangeSetProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.ExecuteChangeSetProps;

      .. code-tab:: javascript

         // ExecuteChangeSetProps is an interface

      .. code-tab:: typescript

         import { ExecuteChangeSetProps } from '@aws-cdk/aws-cloudformation';



   Properties for the ExecuteChangeSet action.


   :extends: :py:class:`~@aws-cdk/aws-cloudformation.CloudFormationCommonProps`\ 


   .. py:attribute:: changeSetName

      Name of the change set to execute.


      :type: string *(abstract)*


   .. py:attribute:: stackName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.stackName>`

      The name of the stack to apply this action to


      :type: string *(abstract)*


   .. py:attribute:: outputArtifactName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.outputArtifactName>`

      The name of the output artifact to generate  Only applied if `outputFileName` is set as well.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: outputFileName

      *Inherited from* :py:attr:`@aws-cdk/aws-cloudformation.CloudFormationCommonProps <@aws-cdk/aws-cloudformation.CloudFormationCommonProps.outputFileName>`

      A name for the filename in the output artifact to store the AWS CloudFormation call's result.  The file will contain the result of the call to AWS CloudFormation (for example the call to UpdateStack or CreateChangeSet).  AWS CodePipeline adds the file to the output artifact after performing the specified action.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: stage

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.CommonActionProps <@aws-cdk/aws-codepipeline-api.CommonActionProps.stage>`

      The Pipeline Stage to add this Action to.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\  *(abstract)*


WaitConditionData
^^^^^^^^^^^^^^^^^

.. py:class:: WaitConditionData([valueOrFunction, [displayName]])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.WaitConditionData;

      .. code-tab:: javascript

         const { WaitConditionData } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { WaitConditionData } from '@aws-cdk/aws-cloudformation';



   :extends: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 
   :param valueOrFunction: What this token will evaluate to, literal or function.
   :type valueOrFunction: any or ``undefined``
   :param displayName: A human-readable display hint for this Token
   :type displayName: string or ``undefined``

   .. py:method:: concat([left, [right]]) -> @aws-cdk/cdk.Token

      *Inherited from* :py:meth:`@aws-cdk/cdk.CloudFormationToken <@aws-cdk/cdk.CloudFormationToken.concat>`

      Return a concated version of this Token in a string context  The default implementation of this combines strings, but specialized implements of Token can return a more appropriate value.


      :param left: 
      :type left: any or ``undefined``
      :param right: 
      :type right: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Token`\ 


   .. py:method:: resolve() -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.resolve>`

      :return: The resolved value for this token.
      :rtype: any or ``undefined``


   .. py:method:: toJSON() -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toJSON>`

      Turn this Token into JSON  This gets called by JSON.stringify(). We want to prohibit this, because it's not possible to do this properly, so we just throw an error here.


      :rtype: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.toString>`

      Return a reversible string representation of this token  If the Token is initialized with a literal, the stringified value of the literal is returned. Otherwise, a special quoted string representation of the Token is returned that can be embedded into other strings.  Strings with quoted Tokens in them can be restored back into complex values with the Tokens restored by calling `resolve()` on the string.


      :rtype: string


   .. py:attribute:: displayName

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.displayName>`

      A human-readable display hint for this Token


      :type: string or ``undefined`` *(readonly)*


   .. py:attribute:: valueOrFunction

      *Inherited from* :py:attr:`@aws-cdk/cdk.Token <@aws-cdk/cdk.Token.valueOrFunction>`

      What this token will evaluate to, literal or function.


      :type: any or ``undefined`` *(readonly)*



cloudformation
^^^^^^^^^^^^^^
.. py:module:: @aws-cdk/aws-cloudformation.cloudformation

CustomResource
~~~~~~~~~~~~~~

.. py:class:: CustomResource(parent, name, properties)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.cloudformation.CustomResource;

      .. code-tab:: javascript

         const { cloudformation.CustomResource } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { cloudformation.CustomResource } from '@aws-cdk/aws-cloudformation';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param parent: the ``cdk.Construct`` this ``CustomResource`` is a part of
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: the name of the resource in the ``cdk.Construct`` tree
   :type name: string
   :param properties: the properties of this ``CustomResource``
   :type properties: :py:class:`~@aws-cdk/aws-cloudformation.cloudformation.CustomResourceProps`\ 

   .. py:method:: renderProperties() -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.Resource.renderProperties`

      *Protected method*

      :rtype: string => (any or ``undefined``)


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.


      :type: string *(readonly)* *(static)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: string *(readonly)*


   .. py:method:: addDependency(*other)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependency>`

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`@aws-cdk/cdk.IDependable`\ 


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CloudFormationToken

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: dependencyElements

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.dependencyElements>`

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`@aws-cdk/cdk.IDependable`\ [] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of


      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Stack`\ 


CustomResourceProps (interface)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:class:: CustomResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.cloudformation.CustomResourceProps;

      .. code-tab:: javascript

         // cloudformation.CustomResourceProps is an interface

      .. code-tab:: typescript

         import { cloudformation.CustomResourceProps } from '@aws-cdk/aws-cloudformation';





   .. py:attribute:: serviceToken

      ``AWS::CloudFormation::CustomResource.ServiceToken``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html#cfn-customresource-servicetoken


      :type: string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\  *(abstract)*


StackResource
~~~~~~~~~~~~~

.. py:class:: StackResource(parent, name, properties)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.cloudformation.StackResource;

      .. code-tab:: javascript

         const { cloudformation.StackResource } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { cloudformation.StackResource } from '@aws-cdk/aws-cloudformation';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param parent: the ``cdk.Construct`` this ``StackResource`` is a part of
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: the name of the resource in the ``cdk.Construct`` tree
   :type name: string
   :param properties: the properties of this ``StackResource``
   :type properties: :py:class:`~@aws-cdk/aws-cloudformation.cloudformation.StackResourceProps`\ 

   .. py:method:: renderProperties() -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.Resource.renderProperties`

      *Protected method*

      :rtype: string => (any or ``undefined``)


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.


      :type: string *(readonly)* *(static)*


   .. py:attribute:: stackId

      :type: string *(readonly)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: string *(readonly)*


   .. py:method:: addDependency(*other)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependency>`

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`@aws-cdk/cdk.IDependable`\ 


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CloudFormationToken

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: dependencyElements

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.dependencyElements>`

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`@aws-cdk/cdk.IDependable`\ [] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of


      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Stack`\ 


StackResourceProps (interface)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:class:: StackResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.cloudformation.StackResourceProps;

      .. code-tab:: javascript

         // cloudformation.StackResourceProps is an interface

      .. code-tab:: typescript

         import { cloudformation.StackResourceProps } from '@aws-cdk/aws-cloudformation';





   .. py:attribute:: templateUrl

      ``AWS::CloudFormation::Stack.TemplateURL``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stack.html#cfn-cloudformation-stack-templateurl


      :type: string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\  *(abstract)*


   .. py:attribute:: notificationArns

      ``AWS::CloudFormation::Stack.NotificationARNs``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stack.html#cfn-cloudformation-stack-notificationarns


      :type: :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or (string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\ )[] or ``undefined`` *(abstract)*


   .. py:attribute:: parameters

      ``AWS::CloudFormation::Stack.Parameters``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stack.html#cfn-cloudformation-stack-parameters


      :type: :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or string => (string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\ ) or ``undefined`` *(abstract)*


   .. py:attribute:: tags

      ``AWS::CloudFormation::Stack.Tags``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stack.html#cfn-cloudformation-stack-tags


      :type: :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or (:py:class:`@aws-cdk/cdk.CloudFormationToken`\  or :py:class:`@aws-cdk/cdk.Tag`\ )[] or ``undefined`` *(abstract)*


   .. py:attribute:: timeoutInMinutes

      ``AWS::CloudFormation::Stack.TimeoutInMinutes``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stack.html#cfn-cloudformation-stack-timeoutinminutes


      :type: number or :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or ``undefined`` *(abstract)*


WaitConditionHandleResource
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:class:: WaitConditionHandleResource(parent, name)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.cloudformation.WaitConditionHandleResource;

      .. code-tab:: javascript

         const { cloudformation.WaitConditionHandleResource } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { cloudformation.WaitConditionHandleResource } from '@aws-cdk/aws-cloudformation';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param parent: the ``cdk.Construct`` this ``WaitConditionHandleResource`` is a part of
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: the name of the resource in the ``cdk.Construct`` tree
   :type name: string

   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.


      :type: string *(readonly)* *(static)*


   .. py:attribute:: waitConditionHandleUrl

      :type: string *(readonly)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: string *(readonly)*


   .. py:method:: addDependency(*other)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependency>`

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`@aws-cdk/cdk.IDependable`\ 


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CloudFormationToken

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 


   .. py:method:: renderProperties() -> string => any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.renderProperties>`

      *Protected method*

      :rtype: string => (any or ``undefined``)


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: dependencyElements

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.dependencyElements>`

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`@aws-cdk/cdk.IDependable`\ [] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of


      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Stack`\ 


WaitConditionResource
~~~~~~~~~~~~~~~~~~~~~

.. py:class:: WaitConditionResource(parent, name, properties)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.cloudformation.WaitConditionResource;

      .. code-tab:: javascript

         const { cloudformation.WaitConditionResource } = require('@aws-cdk/aws-cloudformation');

      .. code-tab:: typescript

         import { cloudformation.WaitConditionResource } from '@aws-cdk/aws-cloudformation';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param parent: the ``cdk.Construct`` this ``WaitConditionResource`` is a part of
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: the name of the resource in the ``cdk.Construct`` tree
   :type name: string
   :param properties: the properties of this ``WaitConditionResource``
   :type properties: :py:class:`~@aws-cdk/aws-cloudformation.cloudformation.WaitConditionResourceProps`\ 

   .. py:method:: renderProperties() -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.Resource.renderProperties`

      *Protected method*

      :rtype: string => (any or ``undefined``)


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.


      :type: string *(readonly)* *(static)*


   .. py:attribute:: waitConditionData

      :type: :py:class:`~@aws-cdk/aws-cloudformation.WaitConditionData`\  *(readonly)*


   .. py:attribute:: waitConditionName

      :type: string *(readonly)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: string *(readonly)*


   .. py:method:: addDependency(*other)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependency>`

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`@aws-cdk/cdk.IDependable`\ 


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CloudFormationToken

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: dependencyElements

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.dependencyElements>`

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`@aws-cdk/cdk.IDependable`\ [] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of


      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Stack`\ 


WaitConditionResourceProps (interface)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:class:: WaitConditionResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CloudFormation;

      .. code-tab:: java

         import software.amazon.awscdk.services.cloudformation.cloudformation.WaitConditionResourceProps;

      .. code-tab:: javascript

         // cloudformation.WaitConditionResourceProps is an interface

      .. code-tab:: typescript

         import { cloudformation.WaitConditionResourceProps } from '@aws-cdk/aws-cloudformation';





   .. py:attribute:: handle

      ``AWS::CloudFormation::WaitCondition.Handle``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-waitcondition.html#cfn-waitcondition-handle


      :type: string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\  *(abstract)*


   .. py:attribute:: timeout

      ``AWS::CloudFormation::WaitCondition.Timeout``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-waitcondition.html#cfn-waitcondition-timeout


      :type: string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\  *(abstract)*


   .. py:attribute:: count

      ``AWS::CloudFormation::WaitCondition.Count``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-waitcondition.html#cfn-waitcondition-count


      :type: number or :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or ``undefined`` *(abstract)*



.. py:currentmodule:: @aws-cdk/aws-cloudformation

