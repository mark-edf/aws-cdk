.. @jsii-pacmak:meta@ {"fingerprint":"a0HqpKUK5Hz7wJ56Lb+kh138iu1kDtKq4/RMMcYiLMM="}

@aws-cdk/aws-codecommit
=======================

.. mdinclude:: ./__aws-cdk_aws-codecommit.README.md

Reference
---------

.. tabs::

   .. group-tab:: C#

      View in `Nuget <https://www.nuget.org/packages/Amazon.CDK.AWS.CodeCommit/0.9.2>`_

      **csproj**:

      .. code-block:: xml

         <PackageReference Include="Amazon.CDK.AWS.CodeCommit" Version="0.9.2" />

      **dotnet**:

      .. code-block:: console

         dotnet add package Amazon.CDK.AWS.CodeCommit --version 0.9.2

      **packages.config**:

      .. code-block:: xml

         <package id="Amazon.CDK.AWS.CodeCommit" version="0.9.2" />


   .. group-tab:: Java

      View in `Maven Central <https://repo1.maven.org/maven2/software/amazon/awscdk/codecommit/0.9.2/>`_

      **Apache Buildr**:

      .. code-block:: none

         'software.amazon.awscdk:codecommit:jar:0.9.2'

      **Apache Ivy**:

      .. code-block:: xml

         <dependency groupId="software.amazon.awscdk" name="codecommit" rev="0.9.2"/>

      **Apache Maven**:

      .. code-block:: xml

         <dependency>
           <groupId>software.amazon.awscdk</groupId>
           <artifactId>codecommit</artifactId>
           <version>0.9.2</version>
         </dependency>

      **Gradle / Grails**:

      .. code-block:: none

         compile 'software.amazon.awscdk:codecommit:0.9.2'

      **Groovy Grape**:

      .. code-block:: none

         @Grapes(
         @Grab(group='software.amazon.awscdk', module='codecommit', version='0.9.2')
         )


   .. group-tab:: JavaScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-codecommit/v/0.9.2>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-codecommit@0.9.2

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-codecommit": "^0.9.2"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-codecommit@0.9.2


   .. group-tab:: TypeScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-codecommit/v/0.9.2>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-codecommit@0.9.2

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-codecommit": "^0.9.2"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-codecommit@0.9.2



.. py:module:: @aws-cdk/aws-codecommit

CommonPipelineSourceProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CommonPipelineSourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CodeCommit;

      .. code-tab:: java

         import software.amazon.awscdk.services.codecommit.CommonPipelineSourceProps;

      .. code-tab:: javascript

         // CommonPipelineSourceProps is an interface

      .. code-tab:: typescript

         import { CommonPipelineSourceProps } from '@aws-cdk/aws-codecommit';



   Common properties for creating {@link PipelineSource} - either directly, through its constructor, or through {@link RepositoryRef#addToPipeline}.




   .. py:attribute:: artifactName

      The name of the source's output artifact. Output artifacts are used by CodePipeline as inputs into other actions.


      :type: string *(abstract)*


   .. py:attribute:: branch

      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: pollForSourceChanges

      Whether or not AWS CodePipeline should poll for source changes.


      :type: boolean or ``undefined`` *(abstract)*


PipelineSource
^^^^^^^^^^^^^^

.. py:class:: PipelineSource(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CodeCommit;

      .. code-tab:: java

         import software.amazon.awscdk.services.codecommit.PipelineSource;

      .. code-tab:: javascript

         const { PipelineSource } = require('@aws-cdk/aws-codecommit');

      .. code-tab:: typescript

         import { PipelineSource } from '@aws-cdk/aws-codecommit';



   CodePipeline Source that is provided by an AWS CodeCommit repository.


   :extends: :py:class:`@aws-cdk/aws-codepipeline-api.SourceAction`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-codecommit.PipelineSourceProps`\ 

   .. py:method:: addChild(child, name)

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: 
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param name: 
      :type name: string


   .. py:method:: addInputArtifact(artifact) -> @aws-cdk/aws-codepipeline-api.Action

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addInputArtifact>`

      *Protected method*

      :param artifact: 
      :type artifact: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Action`\ 


   .. py:method:: addOutputArtifact(name) -> @aws-cdk/aws-codepipeline-api.Artifact

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.addOutputArtifact>`

      *Protected method*

      :param name: 
      :type name: string
      :rtype: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ 


   .. py:method:: onStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.onStateChange>`

      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :rtype: string[]


   .. py:attribute:: category

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.category>`

      The category of the action. The category defines which action type the owner (the entity that performs the action) performs.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.ActionCategory`\  *(readonly)*


   .. py:attribute:: inputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.inputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: outputArtifacts

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.outputArtifacts>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\ [] *(readonly)*


   .. py:attribute:: owner

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.owner>`

      :type: string *(readonly)*


   .. py:attribute:: provider

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.provider>`

      The service provider that the action calls.


      :type: string *(readonly)*


   .. py:attribute:: version

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.version>`

      :type: string *(readonly)*


   .. py:attribute:: configuration

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.configuration>`

      The action's configuration. These are key-value pairs that specify input values for an action. For more information, see the AWS CodePipeline User Guide.  http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: runOrder

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.Action <@aws-cdk/aws-codepipeline-api.Action.runOrder>`

      The order in which AWS CodePipeline runs this action. For more information, see the AWS CodePipeline User Guide.  https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements


      :type: number


   .. py:attribute:: artifact

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.SourceAction <@aws-cdk/aws-codepipeline-api.SourceAction.artifact>`

      :type: :py:class:`@aws-cdk/aws-codepipeline-api.Artifact`\  *(readonly)*


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


PipelineSourceProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: PipelineSourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CodeCommit;

      .. code-tab:: java

         import software.amazon.awscdk.services.codecommit.PipelineSourceProps;

      .. code-tab:: javascript

         // PipelineSourceProps is an interface

      .. code-tab:: typescript

         import { PipelineSourceProps } from '@aws-cdk/aws-codecommit';



   Construction properties of the {@link PipelineSource CodeCommit source CodePipeline Action}.


   :extends: :py:class:`~@aws-cdk/aws-codecommit.CommonPipelineSourceProps`\ 
   :extends: :py:class:`@aws-cdk/aws-codepipeline-api.CommonActionProps`\ 


   .. py:attribute:: repository

      The CodeCommit repository.


      :type: :py:class:`~@aws-cdk/aws-codecommit.RepositoryRef`\  *(abstract)*


   .. py:attribute:: artifactName

      *Inherited from* :py:attr:`@aws-cdk/aws-codecommit.CommonPipelineSourceProps <@aws-cdk/aws-codecommit.CommonPipelineSourceProps.artifactName>`

      The name of the source's output artifact. Output artifacts are used by CodePipeline as inputs into other actions.


      :type: string *(abstract)*


   .. py:attribute:: branch

      *Inherited from* :py:attr:`@aws-cdk/aws-codecommit.CommonPipelineSourceProps <@aws-cdk/aws-codecommit.CommonPipelineSourceProps.branch>`

      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: pollForSourceChanges

      *Inherited from* :py:attr:`@aws-cdk/aws-codecommit.CommonPipelineSourceProps <@aws-cdk/aws-codecommit.CommonPipelineSourceProps.pollForSourceChanges>`

      Whether or not AWS CodePipeline should poll for source changes.


      :type: boolean or ``undefined`` *(abstract)*


   .. py:attribute:: stage

      *Inherited from* :py:attr:`@aws-cdk/aws-codepipeline-api.CommonActionProps <@aws-cdk/aws-codepipeline-api.CommonActionProps.stage>`

      The Pipeline Stage to add this Action to.


      :type: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\  *(abstract)*


Repository
^^^^^^^^^^

.. py:class:: Repository(parent, name, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CodeCommit;

      .. code-tab:: java

         import software.amazon.awscdk.services.codecommit.Repository;

      .. code-tab:: javascript

         const { Repository } = require('@aws-cdk/aws-codecommit');

      .. code-tab:: typescript

         import { Repository } from '@aws-cdk/aws-codecommit';



   Provides a CodeCommit Repository


   :extends: :py:class:`~@aws-cdk/aws-codecommit.RepositoryRef`\ 
   :param parent: 
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: 
   :type name: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-codecommit.RepositoryProps`\ 

   .. py:method:: notify(arn, [options]) -> @aws-cdk/aws-codecommit.Repository

      Create a trigger to notify another service to run actions on repository events.


      :param arn: Arn of the resource that repository events will notify
      :type arn: string
      :param options: Trigger options to run actions
      :type options: :py:class:`~@aws-cdk/aws-codecommit.RepositoryTriggerOptions`\  or ``undefined``
      :rtype: :py:class:`~@aws-cdk/aws-codecommit.Repository`\ 


   .. py:attribute:: repositoryArn

      *Implements* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef.repositoryArn`

      The ARN of this Repository. 


      :type: string *(readonly)*


   .. py:attribute:: repositoryCloneUrlHttp

      :type: string *(readonly)*


   .. py:attribute:: repositoryCloneUrlSsh

      :type: string *(readonly)*


   .. py:attribute:: repositoryName

      *Implements* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef.repositoryName`

      The human-visible name of this Repository. 


      :type: string *(readonly)*


   .. py:method:: addToPipeline(stage, name, props) -> @aws-cdk/aws-codecommit.PipelineSource

      *Inherited from* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef <@aws-cdk/aws-codecommit.RepositoryRef.addToPipeline>`

      Convenience method for creating a new {@link PipelineSource} Action, and adding it to the given Stage.


      :param stage: the Pipeline Stage to add the new Action to
      :type stage: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\ 
      :param name: the name of the newly created Action
      :type name: string
      :param props: the properties of the new Action
      :type props: :py:class:`~@aws-cdk/aws-codecommit.CommonPipelineSourceProps`\ 
      :return: the newly created {@link PipelineSource} Action
      :rtype: :py:class:`~@aws-cdk/aws-codecommit.PipelineSource`\ 


   .. py:method:: export() -> @aws-cdk/aws-codecommit.RepositoryRefProps

      *Inherited from* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef <@aws-cdk/aws-codecommit.RepositoryRef.export>`

      Exports this Repository. Allows the same Repository to be used in 2 different Stacks.


      :rtype: :py:class:`~@aws-cdk/aws-codecommit.RepositoryRefProps`\ 


   .. py:method:: onCommentOnCommit(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef <@aws-cdk/aws-codecommit.RepositoryRef.onCommentOnCommit>`

      Defines a CloudWatch event rule which triggers when a comment is made on a commit.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onCommentOnPullRequest(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef <@aws-cdk/aws-codecommit.RepositoryRef.onCommentOnPullRequest>`

      Defines a CloudWatch event rule which triggers when a comment is made on a pull request.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onCommit(name, [target, [branch]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef <@aws-cdk/aws-codecommit.RepositoryRef.onCommit>`

      Defines a CloudWatch event rule which triggers when a commit is pushed to a branch.


      :param name: 
      :type name: string
      :param target: The target of the event
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param branch: The branch to monitor. Defaults to all branches.
      :type branch: string or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onEvent(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef <@aws-cdk/aws-codecommit.RepositoryRef.onEvent>`

      Defines a CloudWatch event rule which triggers for repository events. Use `rule.addEventPattern(pattern)` to specify a filter.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onPullRequestStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef <@aws-cdk/aws-codecommit.RepositoryRef.onPullRequestStateChange>`

      Defines a CloudWatch event rule which triggers when a pull request state is changed.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onReferenceCreated(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef <@aws-cdk/aws-codecommit.RepositoryRef.onReferenceCreated>`

      Defines a CloudWatch event rule which triggers when a reference is created (i.e. a new brach/tag is created) to the repository.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onReferenceDeleted(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef <@aws-cdk/aws-codecommit.RepositoryRef.onReferenceDeleted>`

      Defines a CloudWatch event rule which triggers when a reference is delete (i.e. a branch/tag is deleted) from the repository.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onReferenceUpdated(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef <@aws-cdk/aws-codecommit.RepositoryRef.onReferenceUpdated>`

      Defines a CloudWatch event rule which triggers when a reference is updated (i.e. a commit is pushed to an existig branch) from the repository.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      *Inherited from* :py:meth:`@aws-cdk/aws-codecommit.RepositoryRef <@aws-cdk/aws-codecommit.RepositoryRef.onStateChange>`

      Defines a CloudWatch event rule which triggers when a "CodeCommit Repository State Change" event occurs.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


RepositoryEventTrigger (enum)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RepositoryEventTrigger

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CodeCommit;

      .. code-tab:: java

         import software.amazon.awscdk.services.codecommit.RepositoryEventTrigger;

      .. code-tab:: javascript

         const { RepositoryEventTrigger } = require('@aws-cdk/aws-codecommit');

      .. code-tab:: typescript

         import { RepositoryEventTrigger } from '@aws-cdk/aws-codecommit';



   Repository events that will cause the trigger to run actions in another service.


   .. py:data:: All

   .. py:data:: UpdateRef

   .. py:data:: CreateRef

   .. py:data:: DeleteRef


RepositoryProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RepositoryProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CodeCommit;

      .. code-tab:: java

         import software.amazon.awscdk.services.codecommit.RepositoryProps;

      .. code-tab:: javascript

         // RepositoryProps is an interface

      .. code-tab:: typescript

         import { RepositoryProps } from '@aws-cdk/aws-codecommit';





   .. py:attribute:: repositoryName

      Name of the repository. This property is required for all repositories.


      :type: string *(abstract)*


   .. py:attribute:: description

      A description of the repository. Use the description to identify the purpose of the repository.


      :type: string or ``undefined`` *(abstract)*


RepositoryRef
^^^^^^^^^^^^^

.. py:class:: RepositoryRef(parent, id)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CodeCommit;

      .. code-tab:: java

         import software.amazon.awscdk.services.codecommit.RepositoryRef;

      .. code-tab:: javascript

         const { RepositoryRef } = require('@aws-cdk/aws-codecommit');

      .. code-tab:: typescript

         import { RepositoryRef } from '@aws-cdk/aws-codecommit';



   Represents a reference to a CodeCommit Repository.  If you want to create a new Repository managed alongside your CDK code, use the {@link Repository} class.  If you want to reference an already existing Repository, use the {@link RepositoryRef.import} method.


   :extends: :py:class:`@aws-cdk/cdk.Construct`\ 
   :abstract: Yes
   :param parent: The parent construct
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string

   .. py:staticmethod:: import(parent, name, props) -> @aws-cdk/aws-codecommit.RepositoryRef

      Import a Repository defined either outside the CDK, or in a different Stack (exported with the {@link export} method).


      :param parent: the parent Construct for the Repository
      :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param name: the name of the Repository Construct
      :type name: string
      :param props: the properties used to identify the existing Repository
      :type props: :py:class:`~@aws-cdk/aws-codecommit.RepositoryRefProps`\ 
      :return: a reference to the existing Repository
      :rtype: :py:class:`~@aws-cdk/aws-codecommit.RepositoryRef`\ 


   .. py:method:: addToPipeline(stage, name, props) -> @aws-cdk/aws-codecommit.PipelineSource

      Convenience method for creating a new {@link PipelineSource} Action, and adding it to the given Stage.


      :param stage: the Pipeline Stage to add the new Action to
      :type stage: :py:class:`@aws-cdk/aws-codepipeline-api.IStage`\ 
      :param name: the name of the newly created Action
      :type name: string
      :param props: the properties of the new Action
      :type props: :py:class:`~@aws-cdk/aws-codecommit.CommonPipelineSourceProps`\ 
      :return: the newly created {@link PipelineSource} Action
      :rtype: :py:class:`~@aws-cdk/aws-codecommit.PipelineSource`\ 


   .. py:method:: export() -> @aws-cdk/aws-codecommit.RepositoryRefProps

      Exports this Repository. Allows the same Repository to be used in 2 different Stacks.


      :rtype: :py:class:`~@aws-cdk/aws-codecommit.RepositoryRefProps`\ 


   .. py:method:: onCommentOnCommit(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      Defines a CloudWatch event rule which triggers when a comment is made on a commit.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onCommentOnPullRequest(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      Defines a CloudWatch event rule which triggers when a comment is made on a pull request.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onCommit(name, [target, [branch]]) -> @aws-cdk/aws-events.EventRule

      Defines a CloudWatch event rule which triggers when a commit is pushed to a branch.


      :param name: 
      :type name: string
      :param target: The target of the event
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param branch: The branch to monitor. Defaults to all branches.
      :type branch: string or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onEvent(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      Defines a CloudWatch event rule which triggers for repository events. Use `rule.addEventPattern(pattern)` to specify a filter.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onPullRequestStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      Defines a CloudWatch event rule which triggers when a pull request state is changed.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onReferenceCreated(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      Defines a CloudWatch event rule which triggers when a reference is created (i.e. a new brach/tag is created) to the repository.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onReferenceDeleted(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      Defines a CloudWatch event rule which triggers when a reference is delete (i.e. a branch/tag is deleted) from the repository.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onReferenceUpdated(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      Defines a CloudWatch event rule which triggers when a reference is updated (i.e. a commit is pushed to an existig branch) from the repository.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:method:: onStateChange(name, [target, [options]]) -> @aws-cdk/aws-events.EventRule

      Defines a CloudWatch event rule which triggers when a "CodeCommit Repository State Change" event occurs.


      :param name: 
      :type name: string
      :param target: 
      :type target: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\  or ``undefined``
      :param options: 
      :type options: :py:class:`@aws-cdk/aws-events.EventRuleProps`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/aws-events.EventRule`\ 


   .. py:attribute:: repositoryArn

      The ARN of this Repository. 


      :type: string *(readonly)* *(abstract)*


   .. py:attribute:: repositoryName

      The human-visible name of this Repository. 


      :type: string *(readonly)* *(abstract)*


   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


RepositoryRefProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RepositoryRefProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CodeCommit;

      .. code-tab:: java

         import software.amazon.awscdk.services.codecommit.RepositoryRefProps;

      .. code-tab:: javascript

         // RepositoryRefProps is an interface

      .. code-tab:: typescript

         import { RepositoryRefProps } from '@aws-cdk/aws-codecommit';



   Properties for the {@link RepositoryRef.import} method.




   .. py:attribute:: repositoryName

      The name of an existing CodeCommit Repository that we are referencing. Must be in the same account and region as the root Stack.


      :type: string *(abstract)*


RepositoryTriggerOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RepositoryTriggerOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CodeCommit;

      .. code-tab:: java

         import software.amazon.awscdk.services.codecommit.RepositoryTriggerOptions;

      .. code-tab:: javascript

         // RepositoryTriggerOptions is an interface

      .. code-tab:: typescript

         import { RepositoryTriggerOptions } from '@aws-cdk/aws-codecommit';



   Creates for a repository trigger to an SNS topic or Lambda function.




   .. py:attribute:: branches

      The names of the branches in the AWS CodeCommit repository that contain events that you want to include in the trigger. If you don't specify at least one branch, the trigger applies to all branches.


      :type: string[] or ``undefined`` *(abstract)*


   .. py:attribute:: customData

      When an event is triggered, additional information that AWS CodeCommit includes when it sends information to the target.


      :type: string or ``undefined`` *(abstract)*


   .. py:attribute:: events

      The repository events for which AWS CodeCommit sends information to the target, which you specified in the DestinationArn property.If you don't specify events, the trigger runs for all repository events.


      :type: :py:class:`~@aws-cdk/aws-codecommit.RepositoryEventTrigger`\ [] or ``undefined`` *(abstract)*


   .. py:attribute:: name

      A name for the trigger.Triggers on a repository must have unique names


      :type: string or ``undefined`` *(abstract)*



cloudformation
^^^^^^^^^^^^^^
.. py:module:: @aws-cdk/aws-codecommit.cloudformation

RepositoryResource
~~~~~~~~~~~~~~~~~~

.. py:class:: RepositoryResource(parent, name, properties)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CodeCommit;

      .. code-tab:: java

         import software.amazon.awscdk.services.codecommit.cloudformation.RepositoryResource;

      .. code-tab:: javascript

         const { cloudformation.RepositoryResource } = require('@aws-cdk/aws-codecommit');

      .. code-tab:: typescript

         import { cloudformation.RepositoryResource } from '@aws-cdk/aws-codecommit';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param parent: the ``cdk.Construct`` this ``RepositoryResource`` is a part of
   :type parent: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param name: the name of the resource in the ``cdk.Construct`` tree
   :type name: string
   :param properties: the properties of this ``RepositoryResource``
   :type properties: :py:class:`~@aws-cdk/aws-codecommit.cloudformation.RepositoryResourceProps`\ 

   .. py:method:: renderProperties() -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.Resource.renderProperties`

      *Protected method*

      :rtype: string => (any or ``undefined``)


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.


      :type: string *(readonly)* *(static)*


   .. py:attribute:: repositoryArn

      :type: string *(readonly)*


   .. py:attribute:: repositoryCloneUrlHttp

      :type: string *(readonly)*


   .. py:attribute:: repositoryCloneUrlSsh

      :type: string *(readonly)*


   .. py:attribute:: repositoryId

      :type: string *(readonly)*


   .. py:attribute:: repositoryName

      :type: string *(readonly)*

   .. py:class:: RepositoryTriggerProperty

      **Language-specific names:**

      .. tabs::

         .. code-tab:: c#

            using Amazon.CDK.AWS.CodeCommit;

         .. code-tab:: java

            import software.amazon.awscdk.services.codecommit.cloudformation.RepositoryResource.RepositoryTriggerProperty;

         .. code-tab:: javascript

            // cloudformation.RepositoryResource.RepositoryTriggerProperty is an interface

         .. code-tab:: typescript

            import { cloudformation.RepositoryResource.RepositoryTriggerProperty } from '@aws-cdk/aws-codecommit';





      .. py:attribute:: branches

         ``RepositoryResource.RepositoryTriggerProperty.Branches``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codecommit-repository-repositorytrigger.html#cfn-codecommit-repository-repositorytrigger-branches


         :type: :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or (string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\ )[] or ``undefined`` *(abstract)*


      .. py:attribute:: customData

         ``RepositoryResource.RepositoryTriggerProperty.CustomData``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codecommit-repository-repositorytrigger.html#cfn-codecommit-repository-repositorytrigger-customdata


         :type: string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or ``undefined`` *(abstract)*


      .. py:attribute:: destinationArn

         ``RepositoryResource.RepositoryTriggerProperty.DestinationArn``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codecommit-repository-repositorytrigger.html#cfn-codecommit-repository-repositorytrigger-destinationarn


         :type: string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or ``undefined`` *(abstract)*


      .. py:attribute:: events

         ``RepositoryResource.RepositoryTriggerProperty.Events``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codecommit-repository-repositorytrigger.html#cfn-codecommit-repository-repositorytrigger-events


         :type: :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or (string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\ )[] or ``undefined`` *(abstract)*


      .. py:attribute:: name

         ``RepositoryResource.RepositoryTriggerProperty.Name``
         http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codecommit-repository-repositorytrigger.html#cfn-codecommit-repository-repositorytrigger-name


         :type: string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or ``undefined`` *(abstract)*



   .. py:method:: addChild(child, childName)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addChild>`

      Adds a child construct to this node.


      *Protected method*

      :param child: The child construct
      :type child: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param childName: 
      :type childName: string
      :return: The resolved path part name of the child


   .. py:method:: addError(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addError>`

      Adds an { error: <message> } metadata entry to this construct. The toolkit will fail synthesis when errors are reported.


      :param message: The error message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addInfo(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addInfo>`

      Adds a { "aws:cdk:info": <message> } metadata entry to this construct. The toolkit will display the info message when apps are synthesized.


      :param message: The info message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addMetadata(type, [data, [from]]) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addMetadata>`

      Adds a metadata entry to this construct. Entries are arbitrary values and will also include a stack trace to allow tracing back to the code location for when the entry was added. It can be used, for example, to include source mapping in CloudFormation templates to improve diagnostics.


      :param type: a string denoting the type of metadata
      :type type: string
      :param data: the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
      :type data: any or ``undefined``
      :param from: a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)
      :type from: any or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: addWarning(message) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.addWarning>`

      Adds a { warning: <message> } metadata entry to this construct. The toolkit will display the warning when an app is synthesized, or fail if run in --strict mode.


      :param message: The warning message.
      :type message: string
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: ancestors([upTo]) -> @aws-cdk/cdk.Construct[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.ancestors>`

      Return the ancestors (including self) of this Construct up until and excluding the indicated component


      :param upTo: 
      :type upTo: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ []


   .. py:method:: findChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.findChild>`

      Return a descendant by path  Throws an exception if the descendant is not found.


      :param path: 
      :type path: string
      :return: Child with the given path.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\ 


   .. py:method:: getContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.getContext>`

      Retrieves a value from tree context.  Context is usually initialized at the root, but can be overridden at any point in the tree.


      :param key: The context key
      :type key: string
      :return: The context value or undefined
      :rtype: any or ``undefined``


   .. py:method:: lock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.lock>`

      Locks this construct from allowing more children to be added. After this call, no more children can be added to this construct or to any children.


      *Protected method*



   .. py:method:: requireContext(key) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.requireContext>`

      Retrieve a value from tree-global context  It is an error if the context object is not available.


      :param key: 
      :type key: string
      :rtype: any or ``undefined``


   .. py:method:: required(props, name) -> any

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.required>`

      Throws if the `props` bag doesn't include the property `name`. In the future we can add some type-checking here, maybe even auto-generate during compilation.


      *Protected method*

      :param props: The props bag.
      :type props: any or ``undefined``
      :param name: The name of the required property.
      :type name: string
      :rtype: any or ``undefined``


   .. py:method:: setContext(key, [value])

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.setContext>`

      This can be used to set contextual values. Context must be set before any children are added, since children may consult context info during construction. If the key already exists, it will be overridden.


      :param key: The context key
      :type key: string
      :param value: The context value
      :type value: any or ``undefined``


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.


      :rtype: string


   .. py:method:: toTreeString([depth]) -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toTreeString>`

      Returns a string with a tree representation of this construct and it's children.


      :param depth: 
      :type depth: number or ``undefined``
      :rtype: string


   .. py:method:: tryFindChild(path) -> @aws-cdk/cdk.Construct

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.tryFindChild>`

      Return a descendant by path, or undefined


      :param path: 
      :type path: string
      :return: a child by path or undefined if not found.
      :rtype: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined``


   .. py:method:: unlock()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.unlock>`

      Unlocks this costruct and allows mutations (adding children).


      *Protected method*



   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      This method can be implemented by derived constructs in order to perform validation logic. It is called on all constructs before synthesis.


      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:method:: validateTree() -> @aws-cdk/cdk.ValidationError[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validateTree>`

      Invokes 'validate' on all child constructs and then on this construct (depth-first).


      :return: A list of validation errors. If the list is empty, all constructs are valid.
      :rtype: :py:class:`@aws-cdk/cdk.ValidationError`\ []


   .. py:attribute:: children

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.children>`

      All direct children of this construct.


      :type: :py:class:`@aws-cdk/cdk.Construct`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.id>`

      The local id of the construct. This id is unique amongst its siblings. To obtain a tree-global unique id for this construct, use `uniqueId`.


      :type: string *(readonly)*


   .. py:attribute:: locked

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.locked>`

      Returns true if this construct or any of it's parent constructs are locked.


      *Protected property*

      :type: boolean *(readonly)*


   .. py:attribute:: metadata

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.metadata>`

      An array of metadata objects associated with this construct. This can be used, for example, to implement support for deprecation notices, source mapping, etc.


      :type: :py:class:`@aws-cdk/cdk.MetadataEntry`\ [] *(readonly)*


   .. py:attribute:: path

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.path>`

      The full path of this construct in the tree. Components are separated by '/'.


      :type: string *(readonly)*


   .. py:attribute:: uniqueId

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.uniqueId>`

      A tree-global unique alphanumeric identifier for this construct. Includes all components of the tree.


      :type: string *(readonly)*


   .. py:attribute:: parent

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.parent>`

      Returns the parent of this node or undefined if this is a root node.


      :type: :py:class:`@aws-cdk/cdk.Construct`\  or ``undefined`` *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.


      :type: string *(readonly)*


   .. py:method:: addDependency(*other)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependency>`

      Adds a dependency on another resource.


      :param \*other: The other resource.
      :type \*other: :py:class:`@aws-cdk/cdk.IDependable`\ 


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CloudFormationToken

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource. Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility in case there is no generated attribute.


      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CloudFormationToken`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.


      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.


      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.


      :type: string *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties


      *Protected property*

      :type: any or ``undefined`` *(readonly)*


   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: dependencyElements

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.dependencyElements>`

      Returns the set of all stack elements (resources, parameters, conditions) that should be added when a resource "depends on" this construct.


      :type: :py:class:`@aws-cdk/cdk.IDependable`\ [] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element


      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack


      :type: string *(readonly)*


   .. py:attribute:: stack

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stack>`

      The stack this Construct has been made a part of


      *Protected property*

      :type: :py:class:`@aws-cdk/cdk.Stack`\ 


RepositoryResourceProps (interface)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:class:: RepositoryResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.CodeCommit;

      .. code-tab:: java

         import software.amazon.awscdk.services.codecommit.cloudformation.RepositoryResourceProps;

      .. code-tab:: javascript

         // cloudformation.RepositoryResourceProps is an interface

      .. code-tab:: typescript

         import { cloudformation.RepositoryResourceProps } from '@aws-cdk/aws-codecommit';





   .. py:attribute:: repositoryName

      ``AWS::CodeCommit::Repository.RepositoryName``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codecommit-repository.html#cfn-codecommit-repository-repositoryname


      :type: string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\  *(abstract)*


   .. py:attribute:: repositoryDescription

      ``AWS::CodeCommit::Repository.RepositoryDescription``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codecommit-repository.html#cfn-codecommit-repository-repositorydescription


      :type: string or :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or ``undefined`` *(abstract)*


   .. py:attribute:: triggers

      ``AWS::CodeCommit::Repository.Triggers``
      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codecommit-repository.html#cfn-codecommit-repository-triggers


      :type: :py:class:`@aws-cdk/cdk.CloudFormationToken`\  or (:py:class:`@aws-cdk/cdk.CloudFormationToken`\  or :py:class:`~@aws-cdk/aws-codecommit.cloudformation.RepositoryResource.RepositoryTriggerProperty`\ )[] or ``undefined`` *(abstract)*



.. py:currentmodule:: @aws-cdk/aws-codecommit

