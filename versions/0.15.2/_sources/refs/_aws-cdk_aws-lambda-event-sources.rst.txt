.. @jsii-pacmak:meta@ {"fingerprint":"QRaEyWLlQubeVUOMZCvXsVn23Wbm2cPjD+athNd096Q="}

@aws-cdk/aws-lambda-event-sources
=================================

.. mdinclude:: ./__aws-cdk_aws-lambda-event-sources.README.md

Reference
---------

.. tabs::

   .. group-tab:: C#

      View in `Nuget <https://www.nuget.org/packages/Amazon.CDK.AWS.Lambda.EventSources/0.15.2>`_

      **csproj**:

      .. code-block:: xml

         <PackageReference Include="Amazon.CDK.AWS.Lambda.EventSources" Version="0.15.2" />

      **dotnet**:

      .. code-block:: console

         dotnet add package Amazon.CDK.AWS.Lambda.EventSources --version 0.15.2

      **packages.config**:

      .. code-block:: xml

         <package id="Amazon.CDK.AWS.Lambda.EventSources" version="0.15.2" />


   .. group-tab:: Java

      View in `Maven Central <https://repo1.maven.org/maven2/software/amazon/awscdk/lambda-event-sources/0.15.2/>`_

      **Apache Buildr**:

      .. code-block:: none

         'software.amazon.awscdk:lambda-event-sources:jar:0.15.2'

      **Apache Ivy**:

      .. code-block:: xml

         <dependency groupId="software.amazon.awscdk" name="lambda-event-sources" rev="0.15.2"/>

      **Apache Maven**:

      .. code-block:: xml

         <dependency>
           <groupId>software.amazon.awscdk</groupId>
           <artifactId>lambda-event-sources</artifactId>
           <version>0.15.2</version>
         </dependency>

      **Gradle / Grails**:

      .. code-block:: none

         compile 'software.amazon.awscdk:lambda-event-sources:0.15.2'

      **Groovy Grape**:

      .. code-block:: none

         @Grapes(
         @Grab(group='software.amazon.awscdk', module='lambda-event-sources', version='0.15.2')
         )


   .. group-tab:: JavaScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-lambda-event-sources/v/0.15.2>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-lambda-event-sources@0.15.2

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-lambda-event-sources": "^0.15.2"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-lambda-event-sources@0.15.2


   .. group-tab:: TypeScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-lambda-event-sources/v/0.15.2>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-lambda-event-sources@0.15.2

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-lambda-event-sources": "^0.15.2"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-lambda-event-sources@0.15.2



.. py:module:: @aws-cdk/aws-lambda-event-sources

S3EventSource
^^^^^^^^^^^^^

.. py:class:: S3EventSource(bucket, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda.EventSources;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.eventsources.S3EventSource;

      .. code-tab:: javascript

         const { S3EventSource } = require('@aws-cdk/aws-lambda-event-sources');

      .. code-tab:: typescript

         import { S3EventSource } from '@aws-cdk/aws-lambda-event-sources';



   Use S3 bucket notifications as an event source for AWS Lambda.


   :implements: :py:class:`@aws-cdk/aws-lambda.IEventSource`\ 
   :param bucket: 
   :type bucket: :py:class:`@aws-cdk/aws-s3.Bucket`\ 
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-lambda-event-sources.S3EventSourceProps`\ 

   .. py:method:: bind(target)

      *Implements* :py:meth:`@aws-cdk/aws-lambda.IEventSource.bind`

      Called by `lambda.addEventSource` to allow the event source to bind to this function.


      :param target: 
      :type target: :py:class:`@aws-cdk/aws-lambda.FunctionRef`\ 


   .. py:attribute:: bucket

      :type: :py:class:`@aws-cdk/aws-s3.Bucket`\  *(readonly)*


   .. py:attribute:: props

      :type: :py:class:`~@aws-cdk/aws-lambda-event-sources.S3EventSourceProps`\  *(readonly)*


S3EventSourceProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: S3EventSourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda.EventSources;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.eventsources.S3EventSourceProps;

      .. code-tab:: javascript

         // S3EventSourceProps is an interface

      .. code-tab:: typescript

         import { S3EventSourceProps } from '@aws-cdk/aws-lambda-event-sources';





   .. py:attribute:: events

      The s3 event types that will trigger the notification.


      :type: :py:class:`@aws-cdk/aws-s3.EventType`\ [] *(abstract)*


   .. py:attribute:: filters

      S3 object key filter rules to determine which objects trigger this event. Each filter must include a `prefix` and/or `suffix` that will be matched against the s3 object key. Refer to the S3 Developer Guide for details about allowed filter rules.


      :type: :py:class:`@aws-cdk/aws-s3.NotificationKeyFilter`\ [] or ``undefined`` *(abstract)*


SnsEventSource
^^^^^^^^^^^^^^

.. py:class:: SnsEventSource(topic)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda.EventSources;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.eventsources.SnsEventSource;

      .. code-tab:: javascript

         const { SnsEventSource } = require('@aws-cdk/aws-lambda-event-sources');

      .. code-tab:: typescript

         import { SnsEventSource } from '@aws-cdk/aws-lambda-event-sources';



   Use an Amazon SNS topic as an event source for AWS Lambda.


   :implements: :py:class:`@aws-cdk/aws-lambda.IEventSource`\ 
   :param topic: 
   :type topic: :py:class:`@aws-cdk/aws-sns.TopicRef`\ 

   .. py:method:: bind(target)

      *Implements* :py:meth:`@aws-cdk/aws-lambda.IEventSource.bind`

      Called by `lambda.addEventSource` to allow the event source to bind to this function.


      :param target: 
      :type target: :py:class:`@aws-cdk/aws-lambda.FunctionRef`\ 


   .. py:attribute:: topic

      :type: :py:class:`@aws-cdk/aws-sns.TopicRef`\  *(readonly)*


SqsEventSource
^^^^^^^^^^^^^^

.. py:class:: SqsEventSource(queue, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda.EventSources;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.eventsources.SqsEventSource;

      .. code-tab:: javascript

         const { SqsEventSource } = require('@aws-cdk/aws-lambda-event-sources');

      .. code-tab:: typescript

         import { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';



   Use an Amazon SQS queue as an event source for AWS Lambda.


   :implements: :py:class:`@aws-cdk/aws-lambda.IEventSource`\ 
   :param queue: 
   :type queue: :py:class:`@aws-cdk/aws-sqs.QueueRef`\ 
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-lambda-event-sources.SqsEventSourceProps`\  or ``undefined``

   .. py:method:: bind(target)

      *Implements* :py:meth:`@aws-cdk/aws-lambda.IEventSource.bind`

      Called by `lambda.addEventSource` to allow the event source to bind to this function.


      :param target: 
      :type target: :py:class:`@aws-cdk/aws-lambda.FunctionRef`\ 


   .. py:attribute:: props

      :type: :py:class:`~@aws-cdk/aws-lambda-event-sources.SqsEventSourceProps`\  *(readonly)*


   .. py:attribute:: queue

      :type: :py:class:`@aws-cdk/aws-sqs.QueueRef`\  *(readonly)*


SqsEventSourceProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: SqsEventSourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.Lambda.EventSources;

      .. code-tab:: java

         import software.amazon.awscdk.services.lambda.eventsources.SqsEventSourceProps;

      .. code-tab:: javascript

         // SqsEventSourceProps is an interface

      .. code-tab:: typescript

         import { SqsEventSourceProps } from '@aws-cdk/aws-lambda-event-sources';





   .. py:attribute:: batchSize

      The largest number of records that AWS Lambda will retrieve from your event source at the time of invoking your function. Your function receives an event with all the retrieved records.  Valid Range: Minimum value of 1. Maximum value of 10.


      :type: number or ``undefined`` *(abstract)*


