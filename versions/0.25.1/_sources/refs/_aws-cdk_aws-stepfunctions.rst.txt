.. @jsii-pacmak:meta@ {"fingerprint":"6UYJFMTvM9/6/FJLUse6z8OYIRplELpyG9XwLh4gu04="}

@aws-cdk/aws-stepfunctions
==========================

.. mdinclude:: ./__aws-cdk_aws-stepfunctions.README.md

Reference
---------

.. tabs::

   .. group-tab:: C#

      View in `Nuget <https://www.nuget.org/packages/Amazon.CDK.AWS.StepFunctions/0.25.1>`_

      **csproj**:

      .. code-block:: xml

         <PackageReference Include="Amazon.CDK.AWS.StepFunctions" Version="0.25.1" />

      **dotnet**:

      .. code-block:: console

         dotnet add package Amazon.CDK.AWS.StepFunctions --version 0.25.1

      **packages.config**:

      .. code-block:: xml

         <package id="Amazon.CDK.AWS.StepFunctions" version="0.25.1" />


   .. group-tab:: Java

      View in `Maven Central <https://repo1.maven.org/maven2/software/amazon/awscdk/stepfunctions/0.25.1/>`_

      **Apache Buildr**:

      .. code-block:: none

         'software.amazon.awscdk:stepfunctions:jar:0.25.1'

      **Apache Ivy**:

      .. code-block:: xml

         <dependency groupId="software.amazon.awscdk" name="stepfunctions" rev="0.25.1"/>

      **Apache Maven**:

      .. code-block:: xml

         <dependency>
           <groupId>software.amazon.awscdk</groupId>
           <artifactId>stepfunctions</artifactId>
           <version>0.25.1</version>
         </dependency>

      **Gradle / Grails**:

      .. code-block:: none

         compile 'software.amazon.awscdk:stepfunctions:0.25.1'

      **Groovy Grape**:

      .. code-block:: none

         @Grapes(
         @Grab(group='software.amazon.awscdk', module='stepfunctions', version='0.25.1')
         )


   .. group-tab:: JavaScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-stepfunctions/v/0.25.1>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-stepfunctions@0.25.1

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-stepfunctions": "^0.25.1"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-stepfunctions@0.25.1


   .. group-tab:: TypeScript

      View in `NPM <https://www.npmjs.com/package/@aws-cdk/aws-stepfunctions/v/0.25.1>`_

      **npm**:

      .. code-block:: console

         $ npm i @aws-cdk/aws-stepfunctions@0.25.1

      **package.json**:

      .. code-block:: js

         {
           "@aws-cdk/aws-stepfunctions": "^0.25.1"
         }

      **yarn**:

      .. code-block:: console

         $ yarn add @aws-cdk/aws-stepfunctions@0.25.1



.. py:module:: @aws-cdk/aws-stepfunctions

Activity
^^^^^^^^

.. py:class:: Activity(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.Activity;

      .. code-tab:: javascript

         const { Activity } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { Activity } from '@aws-cdk/aws-stepfunctions';



   Define a new StepFunctions activity



   :extends: :py:class:`@aws-cdk/cdk.Construct`\ 
   :implements: :py:class:`~@aws-cdk/aws-stepfunctions.IStepFunctionsTaskResource`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.ActivityProps`\  *(optional)*

   .. py:method:: asStepFunctionsTaskResource(_callingTask) -> @aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IStepFunctionsTaskResource.asStepFunctionsTaskResource`

      Return the properties required for using this object as a Task resource



      :param _callingTask: 
      :type _callingTask: :py:class:`~@aws-cdk/aws-stepfunctions.Task`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps`\ 


   .. py:method:: metric(metricName, [props]) -> @aws-cdk/aws-cloudwatch.Metric

      Return the given named metric for this Activity



      :param metricName: 
      :type metricName: string
      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricFailed([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times this activity fails



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricHeartbeatTimedOut([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times the heartbeat times out for this activity



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricRunTime([props]) -> @aws-cdk/aws-cloudwatch.Metric

      The interval, in milliseconds, between the time the activity starts and the time it closes.



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricScheduled([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times this activity is scheduled



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricScheduleTime([props]) -> @aws-cdk/aws-cloudwatch.Metric

      The interval, in milliseconds, for which the activity stays in the schedule state.



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricStarted([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times this activity is started



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricSucceeded([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times this activity succeeds



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricTime([props]) -> @aws-cdk/aws-cloudwatch.Metric

      The interval, in milliseconds, between the time the activity is scheduled and the time it closes.



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricTimedOut([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times this activity times out



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:attribute:: activityArn

      :type: string *(readonly)*


   .. py:attribute:: activityName

      :type: string *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


ActivityProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ActivityProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.ActivityProps;

      .. code-tab:: javascript

         // ActivityProps is an interface

      .. code-tab:: typescript

         import { ActivityProps } from '@aws-cdk/aws-stepfunctions';





   .. py:attribute:: activityName

      The name for this activity.



      :type: string *(optional)*
      :default: If not supplied, a name is generated


AfterwardsOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: AfterwardsOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.AfterwardsOptions;

      .. code-tab:: javascript

         // AfterwardsOptions is an interface

      .. code-tab:: typescript

         import { AfterwardsOptions } from '@aws-cdk/aws-stepfunctions';



   Options for selecting the choice paths





   .. py:attribute:: includeErrorHandlers

      Whether to include error handling states

      

      If this is true, all states which are error handlers (added through 'onError')

      and states reachable via error handlers will be included as well.



      :type: boolean *(optional)*
      :default: false


   .. py:attribute:: includeOtherwise

      Whether to include the default/otherwise transition for the current Choice state

      

      If this is true and the current Choice does not have a default outgoing

      transition, one will be added included when .next() is called on the chain.



      :type: boolean *(optional)*
      :default: false


CatchProps (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CatchProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.CatchProps;

      .. code-tab:: javascript

         // CatchProps is an interface

      .. code-tab:: typescript

         import { CatchProps } from '@aws-cdk/aws-stepfunctions';



   Error handler details





   .. py:attribute:: errors

      Errors to recover from by going to the given state

      

      A list of error strings to retry, which can be either predefined errors

      (for example Errors.NoChoiceMatched) or a self-defined error.



      :type: string[] *(optional)*
      :default: All errors


   .. py:attribute:: resultPath

      JSONPath expression to indicate where to inject the error data

      

      May also be the special value DISCARD, which will cause the error

      data to be discarded.



      :type: string *(optional)*
      :default: $


CfnActivity
^^^^^^^^^^^

.. py:class:: CfnActivity(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.CfnActivity;

      .. code-tab:: javascript

         const { CfnActivity } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { CfnActivity } from '@aws-cdk/aws-stepfunctions';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param scope: scope in which this resource is defined
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: scoped id of the resource
   :type id: string
   :param props: resource properties
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.CfnActivityProps`\ 

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.Resource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: activityArn

      :type: string *(readonly)*


   .. py:attribute:: activityName

      :type: string *(readonly)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.CfnActivityProps`\  *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned

      unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.Resource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addOverride>`

      Adds an override to the synthesized CloudFormation resource. To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types. Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value. Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property
      :type propertyPath: string
      :param value: The value
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource.

      Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility

      in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.



      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.prepare>`

      Automatically detect references in this StackElement



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack



      :type: string *(readonly)*


CfnActivityProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnActivityProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.CfnActivityProps;

      .. code-tab:: javascript

         // CfnActivityProps is an interface

      .. code-tab:: typescript

         import { CfnActivityProps } from '@aws-cdk/aws-stepfunctions';





   .. py:attribute:: name

      ``AWS::StepFunctions::Activity.Name``

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html#cfn-stepfunctions-activity-name


      :type: string


CfnStateMachine
^^^^^^^^^^^^^^^

.. py:class:: CfnStateMachine(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.CfnStateMachine;

      .. code-tab:: javascript

         const { CfnStateMachine } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { CfnStateMachine } from '@aws-cdk/aws-stepfunctions';



   :extends: :py:class:`@aws-cdk/cdk.Resource`\ 
   :param scope: scope in which this resource is defined
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: scoped id of the resource
   :type id: string
   :param props: resource properties
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.CfnStateMachineProps`\ 

   .. py:method:: renderProperties(properties) -> string => any

      *Overrides* :py:meth:`@aws-cdk/cdk.Resource.renderProperties`

      *Protected method*

      :param properties: 
      :type properties: any
      :rtype: string => any


   .. py:attribute:: resourceTypeName

      The CloudFormation resource type name for this resource class.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: propertyOverrides

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.CfnStateMachineProps`\  *(readonly)*


   .. py:attribute:: stateMachineArn

      :type: string *(readonly)*


   .. py:attribute:: stateMachineName

      :type: string *(readonly)*


   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: ref

      *Inherited from* :py:attr:`@aws-cdk/cdk.Referenceable <@aws-cdk/cdk.Referenceable.ref>`

      Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID.



      :type: string *(readonly)*


   .. py:method:: addDeletionOverride(path)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDeletionOverride>`

      Syntactic sugar for `addOverride(path, undefined)`.



      :param path: The path of the value to delete
      :type path: string


   .. py:method:: addDependsOn(resource)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addDependsOn>`

      Indicates that this resource depends on another resource and cannot be provisioned

      unless the other resource has been successfully provisioned.



      :param resource: 
      :type resource: :py:class:`@aws-cdk/cdk.Resource`\ 


   .. py:method:: addOverride(path, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addOverride>`

      Adds an override to the synthesized CloudFormation resource. To add a

      property override, either use `addPropertyOverride` or prefix `path` with

      "Properties." (i.e. `Properties.TopicName`).



      :param path: The path of the property, you can use dot notation to override values in complex types. Any intermdediate keys will be created as needed.
      :type path: string
      :param value: The value. Could be primitive or complex.
      :type value: any


   .. py:method:: addPropertyDeletionOverride(propertyPath)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyDeletionOverride>`

      Adds an override that deletes the value of a property from the resource definition.



      :param propertyPath: The path to the property.
      :type propertyPath: string


   .. py:method:: addPropertyOverride(propertyPath, value)

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.addPropertyOverride>`

      Adds an override to a resource property.

      

      Syntactic sugar for `addOverride("Properties.<...>", value)`.



      :param propertyPath: The path of the property
      :type propertyPath: string
      :param value: The value
      :type value: any


   .. py:method:: getAtt(attributeName) -> @aws-cdk/cdk.CfnReference

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.getAtt>`

      Returns a token for an runtime attribute of this resource.

      Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility

      in case there is no generated attribute.



      :param attributeName: The name of the attribute.
      :type attributeName: string
      :rtype: :py:class:`@aws-cdk/cdk.CfnReference`\ 


   .. py:method:: toCloudFormation() -> json

      *Inherited from* :py:meth:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.toCloudFormation>`

      Emits CloudFormation for this resource.



      :rtype: json


   .. py:attribute:: options

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.options>`

      Options for this resource, such as condition, update policy etc.



      :type: :py:class:`@aws-cdk/cdk.ResourceOptions`\  *(readonly)*


   .. py:attribute:: properties

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.properties>`

      AWS resource properties.

      

      This object is rendered via a call to "renderProperties(this.properties)".



      *Protected property*

      :type: any *(readonly)*


   .. py:attribute:: resourceType

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.resourceType>`

      AWS resource type.



      :type: string *(readonly)*


   .. py:attribute:: untypedPropertyOverrides

      *Inherited from* :py:attr:`@aws-cdk/cdk.Resource <@aws-cdk/cdk.Resource.untypedPropertyOverrides>`

      AWS resource property overrides.

      

      During synthesis, the method "renderProperties(this.overrides)" is called

      with this object, and merged on top of the output of

      "renderProperties(this.properties)".

      

      Derived classes should expose a strongly-typed version of this object as

      a public property called `propertyOverrides`.



      *Protected property*

      :type: any *(readonly)*


   .. py:method:: overrideLogicalId(newLogicalId)

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.overrideLogicalId>`

      Overrides the auto-generated logical ID with a specific ID.



      :param newLogicalId: The new logical ID to use for this stack element.
      :type newLogicalId: string


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.prepare>`

      Automatically detect references in this StackElement



      *Protected method*



   .. py:attribute:: creationStackTrace

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.creationStackTrace>`

      :type: string[] *(readonly)*


   .. py:attribute:: logicalId

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.logicalId>`

      The logical ID for this CloudFormation stack element. The logical ID of the element

      is calculated from the path of the resource node in the construct tree.

      

      To override this value, use `overrideLogicalId(newLogicalId)`.



      :type: string *(readonly)*


   .. py:attribute:: stackPath

      *Inherited from* :py:attr:`@aws-cdk/cdk.StackElement <@aws-cdk/cdk.StackElement.stackPath>`

      Return the path with respect to the stack



      :type: string *(readonly)*


CfnStateMachineProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: CfnStateMachineProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.CfnStateMachineProps;

      .. code-tab:: javascript

         // CfnStateMachineProps is an interface

      .. code-tab:: typescript

         import { CfnStateMachineProps } from '@aws-cdk/aws-stepfunctions';





   .. py:attribute:: definitionString

      ``AWS::StepFunctions::StateMachine.DefinitionString``

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-definitionstring


      :type: string


   .. py:attribute:: roleArn

      ``AWS::StepFunctions::StateMachine.RoleArn``

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-rolearn


      :type: string


   .. py:attribute:: stateMachineName

      ``AWS::StepFunctions::StateMachine.StateMachineName``

      http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-statemachinename


      :type: string *(optional)*


Chain
^^^^^

.. py:class:: Chain

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.Chain;

      .. code-tab:: javascript

         const { Chain } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { Chain } from '@aws-cdk/aws-stepfunctions';



   A collection of states to chain onto

   

   A Chain has a start and zero or more chainable ends. If there are

   zero ends, calling next() on the Chain will fail.



   :implements: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 

   .. py:staticmethod:: custom(startState, endStates, lastAdded) -> @aws-cdk/aws-stepfunctions.Chain

      Make a Chain with specific start and end states, and a last-added Chainable



      :param startState: 
      :type startState: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 
      :param endStates: 
      :type endStates: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ []
      :param lastAdded: 
      :type lastAdded: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Chain`\ 


   .. py:staticmethod:: sequence(start, next) -> @aws-cdk/aws-stepfunctions.Chain

      Make a Chain with the start from one chain and the ends from another



      :param start: 
      :type start: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Chain`\ 


   .. py:staticmethod:: start(state) -> @aws-cdk/aws-stepfunctions.Chain

      Begin a new Chain from one chainable



      :param state: 
      :type state: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Chain`\ 


   .. py:method:: next(next) -> @aws-cdk/aws-stepfunctions.Chain

      Continue normal execution with the given state



      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Chain`\ 


   .. py:method:: toSingleState(id, [props]) -> @aws-cdk/aws-stepfunctions.Parallel

      Return a single state that encompasses all states in the chain

      

      This can be used to add error handling to a sequence of states.

      

      Be aware that this changes the result of the inner state machine

      to be an array with the result of the state machine in it. Adjust

      your paths accordingly. For example, change 'outputPath' to

      '$[0]'.



      :param id: 
      :type id: string
      :param props: 
      :type props: :py:class:`~@aws-cdk/aws-stepfunctions.ParallelProps`\  *(optional)*
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Parallel`\ 


   .. py:attribute:: endStates

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IChainable.endStates`

      The chainable end state(s) of this chain



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ [] *(readonly)*


   .. py:attribute:: id

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IChainable.id`

      Identify this Chain



      :type: string *(readonly)*


   .. py:attribute:: lastAdded

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\  *(readonly)*


   .. py:attribute:: startState

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IChainable.startState`

      The start state of this chain



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)*


Choice
^^^^^^

.. py:class:: Choice(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.Choice;

      .. code-tab:: javascript

         const { Choice } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { Choice } from '@aws-cdk/aws-stepfunctions';



   Define a Choice in the state machine

   

   A choice state can be used to make decisions based on the execution

   state.



   :extends: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.ChoiceProps`\  *(optional)*

   .. py:method:: afterwards([options]) -> @aws-cdk/aws-stepfunctions.Chain

      Return a Chain that contains all reachable end states from this Choice

      

      Use this to combine all possible choice paths back.



      :param options: 
      :type options: :py:class:`~@aws-cdk/aws-stepfunctions.AfterwardsOptions`\  *(optional)*
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Chain`\ 


   .. py:method:: otherwise(def) -> @aws-cdk/aws-stepfunctions.Choice

      If none of the given conditions match, continue execution with the given state

      

      If no conditions match and no otherwise() has been given, an execution

      error will be raised.



      :param def: 
      :type def: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Choice`\ 


   .. py:method:: toStateJson() -> json

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.toStateJson`

      Return the Amazon States Language object for this state



      :rtype: json


   .. py:method:: when(condition, next) -> @aws-cdk/aws-stepfunctions.Choice

      If the given condition matches, continue execution with the given state



      :param condition: 
      :type condition: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Choice`\ 


   .. py:attribute:: endStates

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.endStates`

      Continuable states of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ [] *(readonly)*


   .. py:method:: addBranch(branch)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addBranch>`

      Add a paralle branch to this state



      *Protected method*

      :param branch: 
      :type branch: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: addChoice(condition, next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addChoice>`

      Add a choice branch to this state



      *Protected method*

      :param condition: 
      :type condition: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: addPrefix(x)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addPrefix>`

      Add a prefix to the stateId of this state



      :param x: 
      :type x: string


   .. py:method:: bindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.bindToGraph>`

      Register this state as part of the given graph

      

      Don't call this. It will be called automatically when you work

      states normally.



      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: makeDefault(def)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeDefault>`

      Make the indicated state the default choice transition of this state



      *Protected method*

      :param def: 
      :type def: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: makeNext(next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeNext>`

      Make the indicated state the default transition of this state



      *Protected method*

      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: onBindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.onBindToGraph>`

      Called whenever this state is bound to a graph

      

      Can be overridden by subclasses.



      *Protected method*

      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: renderBranches() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderBranches>`

      Render parallel branches in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderChoices() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderChoices>`

      Render the choices in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderInputOutput() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderInputOutput>`

      Render InputPath/Parameters/OutputPath in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderNextEnd() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderNextEnd>`

      Render the default next state in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderRetryCatch() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderRetryCatch>`

      Render error recovery options in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:attribute:: branches

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.branches>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.id>`

      Descriptive identifier for this chainable



      :type: string *(readonly)*


   .. py:attribute:: startState

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.startState>`

      First state of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)*


   .. py:attribute:: stateId

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.stateId>`

      Tokenized string that evaluates to the state's ID



      :type: string *(readonly)*


   .. py:attribute:: comment

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.comment>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: inputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.inputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: outputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.outputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: parameters

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.parameters>`

      *Protected property*

      :type: json *(optional)* *(readonly)*


   .. py:attribute:: resultPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.resultPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: defaultChoice

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.defaultChoice>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(optional)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


ChoiceProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ChoiceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.ChoiceProps;

      .. code-tab:: javascript

         // ChoiceProps is an interface

      .. code-tab:: typescript

         import { ChoiceProps } from '@aws-cdk/aws-stepfunctions';



   Properties for defining a Choice state





   .. py:attribute:: comment

      An optional description for this state



      :type: string *(optional)*
      :default: No comment


   .. py:attribute:: inputPath

      JSONPath expression to select part of the state to be the input to this state.

      

      May also be the special value DISCARD, which will cause the effective

      input to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: outputPath

      JSONPath expression to select part of the state to be the output to this state.

      

      May also be the special value DISCARD, which will cause the effective

      output to be the empty object {}.



      :type: string *(optional)*
      :default: $


Condition
^^^^^^^^^

.. py:class:: Condition()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.Condition;

      .. code-tab:: javascript

         const { Condition } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { Condition } from '@aws-cdk/aws-stepfunctions';



   A Condition for use in a Choice state branch



   :abstract: Yes

   .. py:staticmethod:: and(*conditions) -> @aws-cdk/aws-stepfunctions.Condition

      Combine two or more conditions with a logical AND



      :param \*conditions: 
      :type \*conditions: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: booleanEquals(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a boolean field has the given value



      :param variable: 
      :type variable: string
      :param value: 
      :type value: boolean
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: not(condition) -> @aws-cdk/aws-stepfunctions.Condition

      Negate a condition



      :param condition: 
      :type condition: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: numberEquals(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a numeric field has the given value



      :param variable: 
      :type variable: string
      :param value: 
      :type value: number
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: numberGreaterThan(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a numeric field is greater than the given value



      :param variable: 
      :type variable: string
      :param value: 
      :type value: number
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: numberGreaterThanEquals(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a numeric field is greater than or equal to the given value



      :param variable: 
      :type variable: string
      :param value: 
      :type value: number
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: numberLessThan(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a numeric field is less than the given value



      :param variable: 
      :type variable: string
      :param value: 
      :type value: number
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: numberLessThanEquals(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a numeric field is less than or equal to the given value



      :param variable: 
      :type variable: string
      :param value: 
      :type value: number
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: or(*conditions) -> @aws-cdk/aws-stepfunctions.Condition

      Combine two or more conditions with a logical OR



      :param \*conditions: 
      :type \*conditions: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: stringEquals(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a string field has the given value



      :param variable: 
      :type variable: string
      :param value: 
      :type value: string
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: stringGreaterThan(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a string field sorts after a given value



      :param variable: 
      :type variable: string
      :param value: 
      :type value: string
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: stringGreaterThanEquals(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a string field sorts after or equal to a given value



      :param variable: 
      :type variable: string
      :param value: 
      :type value: string
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: stringLessThan(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a string field sorts before a given value



      :param variable: 
      :type variable: string
      :param value: 
      :type value: string
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: stringLessThanEquals(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a string field sorts equal to or before a given value



      :param variable: 
      :type variable: string
      :param value: 
      :type value: string
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: timestampEquals(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a timestamp field is the same time as the given timestamp



      :param variable: 
      :type variable: string
      :param value: 
      :type value: string
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: timestampGreaterThan(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a timestamp field is after the given timestamp



      :param variable: 
      :type variable: string
      :param value: 
      :type value: string
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: timestampGreaterThanEquals(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a timestamp field is after or equal to the given timestamp



      :param variable: 
      :type variable: string
      :param value: 
      :type value: string
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: timestampLessThan(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a timestamp field is before the given timestamp



      :param variable: 
      :type variable: string
      :param value: 
      :type value: string
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:staticmethod:: timestampLessThanEquals(variable, value) -> @aws-cdk/aws-stepfunctions.Condition

      Matches if a timestamp field is before or equal to the given timestamp



      :param variable: 
      :type variable: string
      :param value: 
      :type value: string
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 


   .. py:method:: renderCondition() -> any

      Render Amazon States Language JSON for the condition



      :rtype: any
      :abstract: Yes


Errors
^^^^^^

.. py:class:: Errors()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.Errors;

      .. code-tab:: javascript

         const { Errors } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { Errors } from '@aws-cdk/aws-stepfunctions';



   Predefined error strings




   .. py:attribute:: All

      Matches any Error.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: BranchFailed

      A branch of a Parallel state failed.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: NoChoiceMatched

      A Choice state failed to find a match for the condition field extracted

      from its input.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: Permissions

      A Task State failed because it had insufficient privileges to execute

      the specified code.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: ResultPathMatchFailure

      A Task State’s “ResultPath” field cannot be applied to the input the state received.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: TaskFailed

      A Task State failed during the execution.



      :type: string *(readonly)* *(static)*


   .. py:attribute:: Timeout

      A Task State either ran longer than the “TimeoutSeconds” value, or

      failed to heartbeat for a time longer than the “HeartbeatSeconds” value.



      :type: string *(readonly)* *(static)*


Fail
^^^^

.. py:class:: Fail(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.Fail;

      .. code-tab:: javascript

         const { Fail } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { Fail } from '@aws-cdk/aws-stepfunctions';



   Define a Fail state in the state machine

   

   Reaching a Fail state terminates the state execution in failure.



   :extends: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.FailProps`\ 

   .. py:method:: toStateJson() -> json

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.toStateJson`

      Return the Amazon States Language object for this state



      :rtype: json


   .. py:attribute:: endStates

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.endStates`

      Continuable states of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ [] *(readonly)*


   .. py:method:: addBranch(branch)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addBranch>`

      Add a paralle branch to this state



      *Protected method*

      :param branch: 
      :type branch: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: addChoice(condition, next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addChoice>`

      Add a choice branch to this state



      *Protected method*

      :param condition: 
      :type condition: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: addPrefix(x)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addPrefix>`

      Add a prefix to the stateId of this state



      :param x: 
      :type x: string


   .. py:method:: bindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.bindToGraph>`

      Register this state as part of the given graph

      

      Don't call this. It will be called automatically when you work

      states normally.



      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: makeDefault(def)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeDefault>`

      Make the indicated state the default choice transition of this state



      *Protected method*

      :param def: 
      :type def: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: makeNext(next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeNext>`

      Make the indicated state the default transition of this state



      *Protected method*

      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: onBindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.onBindToGraph>`

      Called whenever this state is bound to a graph

      

      Can be overridden by subclasses.



      *Protected method*

      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: renderBranches() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderBranches>`

      Render parallel branches in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderChoices() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderChoices>`

      Render the choices in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderInputOutput() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderInputOutput>`

      Render InputPath/Parameters/OutputPath in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderNextEnd() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderNextEnd>`

      Render the default next state in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderRetryCatch() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderRetryCatch>`

      Render error recovery options in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:attribute:: branches

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.branches>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.id>`

      Descriptive identifier for this chainable



      :type: string *(readonly)*


   .. py:attribute:: startState

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.startState>`

      First state of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)*


   .. py:attribute:: stateId

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.stateId>`

      Tokenized string that evaluates to the state's ID



      :type: string *(readonly)*


   .. py:attribute:: comment

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.comment>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: inputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.inputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: outputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.outputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: parameters

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.parameters>`

      *Protected property*

      :type: json *(optional)* *(readonly)*


   .. py:attribute:: resultPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.resultPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: defaultChoice

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.defaultChoice>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(optional)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


FailProps (interface)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: FailProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.FailProps;

      .. code-tab:: javascript

         // FailProps is an interface

      .. code-tab:: typescript

         import { FailProps } from '@aws-cdk/aws-stepfunctions';



   Properties for defining a Fail state





   .. py:attribute:: error

      Error code used to represent this failure



      :type: string


   .. py:attribute:: cause

      A description for the cause of the failure



      :type: string *(optional)*
      :default: No description


   .. py:attribute:: comment

      An optional description for this state



      :type: string *(optional)*
      :default: No comment


FindStateOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: FindStateOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.FindStateOptions;

      .. code-tab:: javascript

         // FindStateOptions is an interface

      .. code-tab:: typescript

         import { FindStateOptions } from '@aws-cdk/aws-stepfunctions';



   Options for finding reachable states





   .. py:attribute:: includeErrorHandlers

      Whether or not to follow error-handling transitions



      :type: boolean *(optional)*
      :default: false


IChainable (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IChainable

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.IChainable;

      .. code-tab:: javascript

         // IChainable is an interface

      .. code-tab:: typescript

         import { IChainable } from '@aws-cdk/aws-stepfunctions';



   Interface for objects that can be used in a Chain





   .. py:attribute:: endStates

      The chainable end state(s) of this chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ [] *(readonly)*


   .. py:attribute:: id

      Descriptive identifier for this chainable



      :type: string *(readonly)*


   .. py:attribute:: startState

      The start state of this chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)*


INextable (interface)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: INextable

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.INextable;

      .. code-tab:: javascript

         // INextable is an interface

      .. code-tab:: typescript

         import { INextable } from '@aws-cdk/aws-stepfunctions';



   Interface for states that can have 'next' states





   .. py:method:: next(state) -> @aws-cdk/aws-stepfunctions.Chain

      :param state: 
      :type state: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Chain`\ 
      :abstract: Yes


IStateMachine (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IStateMachine

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.IStateMachine;

      .. code-tab:: javascript

         // IStateMachine is an interface

      .. code-tab:: typescript

         import { IStateMachine } from '@aws-cdk/aws-stepfunctions';



   A State Machine



   :extends: :py:class:`@aws-cdk/cdk.IConstruct`\ 


   .. py:attribute:: stateMachineArn

      The ARN of the state machine



      :type: string *(readonly)*


   .. py:method:: export() -> @aws-cdk/aws-stepfunctions.StateMachineImportProps

      Export this state machine



      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.StateMachineImportProps`\ 
      :abstract: Yes


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.IConstruct <@aws-cdk/cdk.IConstruct.node>`

      The construct node in the scope tree.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.IDependable <@aws-cdk/cdk.IDependable.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


IStepFunctionsTaskResource (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: IStepFunctionsTaskResource

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.IStepFunctionsTaskResource;

      .. code-tab:: javascript

         // IStepFunctionsTaskResource is an interface

      .. code-tab:: typescript

         import { IStepFunctionsTaskResource } from '@aws-cdk/aws-stepfunctions';



   Interface for objects that can be invoked in a Task state





   .. py:method:: asStepFunctionsTaskResource(callingTask) -> @aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps

      Return the properties required for using this object as a Task resource



      :param callingTask: 
      :type callingTask: :py:class:`~@aws-cdk/aws-stepfunctions.Task`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.StepFunctionsTaskResourceProps`\ 
      :abstract: Yes


Parallel
^^^^^^^^

.. py:class:: Parallel(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.Parallel;

      .. code-tab:: javascript

         const { Parallel } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { Parallel } from '@aws-cdk/aws-stepfunctions';



   Define a Parallel state in the state machine

   

   A Parallel state can be used to run one or more state machines at the same

   time.

   

   The Result of a Parallel state is an array of the results of its substatemachines.



   :extends: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 
   :implements: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.ParallelProps`\  *(optional)*

   .. py:method:: addCatch(handler, [props]) -> @aws-cdk/aws-stepfunctions.Parallel

      Add a recovery handler for this state

      

      When a particular error occurs, execution will continue at the error

      handler instead of failing the state machine execution.



      :param handler: 
      :type handler: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :param props: 
      :type props: :py:class:`~@aws-cdk/aws-stepfunctions.CatchProps`\  *(optional)*
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Parallel`\ 


   .. py:method:: addRetry([props]) -> @aws-cdk/aws-stepfunctions.Parallel

      Add retry configuration for this state

      

      This controls if and how the execution will be retried if a particular

      error occurs.



      :param props: 
      :type props: :py:class:`~@aws-cdk/aws-stepfunctions.RetryProps`\  *(optional)*
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Parallel`\ 


   .. py:method:: branch(*branches) -> @aws-cdk/aws-stepfunctions.Parallel

      Define one or more branches to run in parallel



      :param \*branches: 
      :type \*branches: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Parallel`\ 


   .. py:method:: next(next) -> @aws-cdk/aws-stepfunctions.Chain

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.INextable.next`

      Continue normal execution with the given state



      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Chain`\ 


   .. py:method:: toStateJson() -> json

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.toStateJson`

      Return the Amazon States Language object for this state



      :rtype: json


   .. py:method:: validate() -> string[]

      *Overrides* :py:meth:`@aws-cdk/cdk.Construct.validate`

      Validate this state



      *Protected method*

      :rtype: string[]


   .. py:attribute:: endStates

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.endStates`

      Continuable states of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ [] *(readonly)*


   .. py:method:: addBranch(branch)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addBranch>`

      Add a paralle branch to this state



      *Protected method*

      :param branch: 
      :type branch: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: addChoice(condition, next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addChoice>`

      Add a choice branch to this state



      *Protected method*

      :param condition: 
      :type condition: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: addPrefix(x)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addPrefix>`

      Add a prefix to the stateId of this state



      :param x: 
      :type x: string


   .. py:method:: bindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.bindToGraph>`

      Register this state as part of the given graph

      

      Don't call this. It will be called automatically when you work

      states normally.



      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: makeDefault(def)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeDefault>`

      Make the indicated state the default choice transition of this state



      *Protected method*

      :param def: 
      :type def: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: makeNext(next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeNext>`

      Make the indicated state the default transition of this state



      *Protected method*

      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: onBindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.onBindToGraph>`

      Called whenever this state is bound to a graph

      

      Can be overridden by subclasses.



      *Protected method*

      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: renderBranches() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderBranches>`

      Render parallel branches in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderChoices() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderChoices>`

      Render the choices in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderInputOutput() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderInputOutput>`

      Render InputPath/Parameters/OutputPath in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderNextEnd() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderNextEnd>`

      Render the default next state in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderRetryCatch() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderRetryCatch>`

      Render error recovery options in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:attribute:: branches

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.branches>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.id>`

      Descriptive identifier for this chainable



      :type: string *(readonly)*


   .. py:attribute:: startState

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.startState>`

      First state of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)*


   .. py:attribute:: stateId

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.stateId>`

      Tokenized string that evaluates to the state's ID



      :type: string *(readonly)*


   .. py:attribute:: comment

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.comment>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: inputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.inputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: outputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.outputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: parameters

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.parameters>`

      *Protected property*

      :type: json *(optional)* *(readonly)*


   .. py:attribute:: resultPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.resultPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: defaultChoice

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.defaultChoice>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(optional)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


ParallelProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: ParallelProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.ParallelProps;

      .. code-tab:: javascript

         // ParallelProps is an interface

      .. code-tab:: typescript

         import { ParallelProps } from '@aws-cdk/aws-stepfunctions';



   Properties for defining a Parallel state





   .. py:attribute:: comment

      An optional description for this state



      :type: string *(optional)*
      :default: No comment


   .. py:attribute:: inputPath

      JSONPath expression to select part of the state to be the input to this state.

      

      May also be the special value DISCARD, which will cause the effective

      input to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: outputPath

      JSONPath expression to select part of the state to be the output to this state.

      

      May also be the special value DISCARD, which will cause the effective

      output to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: resultPath

      JSONPath expression to indicate where to inject the state's output

      

      May also be the special value DISCARD, which will cause the state's

      input to become its output.



      :type: string *(optional)*
      :default: $


Pass
^^^^

.. py:class:: Pass(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.Pass;

      .. code-tab:: javascript

         const { Pass } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { Pass } from '@aws-cdk/aws-stepfunctions';



   Define a Pass in the state machine

   

   A Pass state can be used to transform the current exeuction's state.



   :extends: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 
   :implements: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.PassProps`\  *(optional)*

   .. py:method:: next(next) -> @aws-cdk/aws-stepfunctions.Chain

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.INextable.next`

      Continue normal execution with the given state



      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Chain`\ 


   .. py:method:: toStateJson() -> json

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.toStateJson`

      Return the Amazon States Language object for this state



      :rtype: json


   .. py:attribute:: endStates

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.endStates`

      Continuable states of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ [] *(readonly)*


   .. py:method:: addBranch(branch)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addBranch>`

      Add a paralle branch to this state



      *Protected method*

      :param branch: 
      :type branch: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: addChoice(condition, next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addChoice>`

      Add a choice branch to this state



      *Protected method*

      :param condition: 
      :type condition: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: addPrefix(x)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addPrefix>`

      Add a prefix to the stateId of this state



      :param x: 
      :type x: string


   .. py:method:: bindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.bindToGraph>`

      Register this state as part of the given graph

      

      Don't call this. It will be called automatically when you work

      states normally.



      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: makeDefault(def)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeDefault>`

      Make the indicated state the default choice transition of this state



      *Protected method*

      :param def: 
      :type def: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: makeNext(next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeNext>`

      Make the indicated state the default transition of this state



      *Protected method*

      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: onBindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.onBindToGraph>`

      Called whenever this state is bound to a graph

      

      Can be overridden by subclasses.



      *Protected method*

      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: renderBranches() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderBranches>`

      Render parallel branches in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderChoices() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderChoices>`

      Render the choices in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderInputOutput() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderInputOutput>`

      Render InputPath/Parameters/OutputPath in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderNextEnd() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderNextEnd>`

      Render the default next state in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderRetryCatch() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderRetryCatch>`

      Render error recovery options in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:attribute:: branches

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.branches>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.id>`

      Descriptive identifier for this chainable



      :type: string *(readonly)*


   .. py:attribute:: startState

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.startState>`

      First state of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)*


   .. py:attribute:: stateId

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.stateId>`

      Tokenized string that evaluates to the state's ID



      :type: string *(readonly)*


   .. py:attribute:: comment

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.comment>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: inputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.inputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: outputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.outputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: parameters

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.parameters>`

      *Protected property*

      :type: json *(optional)* *(readonly)*


   .. py:attribute:: resultPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.resultPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: defaultChoice

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.defaultChoice>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(optional)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


PassProps (interface)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: PassProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.PassProps;

      .. code-tab:: javascript

         // PassProps is an interface

      .. code-tab:: typescript

         import { PassProps } from '@aws-cdk/aws-stepfunctions';



   Properties for defining a Pass state





   .. py:attribute:: comment

      An optional description for this state



      :type: string *(optional)*
      :default: No comment


   .. py:attribute:: inputPath

      JSONPath expression to select part of the state to be the input to this state.

      

      May also be the special value DISCARD, which will cause the effective

      input to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: outputPath

      JSONPath expression to select part of the state to be the output to this state.

      

      May also be the special value DISCARD, which will cause the effective

      output to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: result

      If given, treat as the result of this operation

      

      Can be used to inject or replace the current execution state.



      :type: any *(optional)*
      :default: No injected result


   .. py:attribute:: resultPath

      JSONPath expression to indicate where to inject the state's output

      

      May also be the special value DISCARD, which will cause the state's

      input to become its output.



      :type: string *(optional)*
      :default: $


RetryProps (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: RetryProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.RetryProps;

      .. code-tab:: javascript

         // RetryProps is an interface

      .. code-tab:: typescript

         import { RetryProps } from '@aws-cdk/aws-stepfunctions';



   Retry details





   .. py:attribute:: backoffRate

      Multiplication for how much longer the wait interval gets on every retry



      :type: number *(optional)*
      :default: 2


   .. py:attribute:: errors

      Errors to retry

      

      A list of error strings to retry, which can be either predefined errors

      (for example Errors.NoChoiceMatched) or a self-defined error.



      :type: string[] *(optional)*
      :default: All errors


   .. py:attribute:: intervalSeconds

      How many seconds to wait initially before retrying



      :type: number *(optional)*
      :default: 1


   .. py:attribute:: maxAttempts

      How many times to retry this particular error.

      

      May be 0 to disable retry for specific errors (in case you have

      a catch-all retry policy).



      :type: number *(optional)*
      :default: 3


SingleStateOptions (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: SingleStateOptions

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.SingleStateOptions;

      .. code-tab:: javascript

         // SingleStateOptions is an interface

      .. code-tab:: typescript

         import { SingleStateOptions } from '@aws-cdk/aws-stepfunctions';



   Options for creating a single state



   :extends: :py:class:`~@aws-cdk/aws-stepfunctions.ParallelProps`\ 


   .. py:attribute:: prefixStates

      String to prefix all stateIds in the state machine with



      :type: string *(optional)*
      :default: stateId


   .. py:attribute:: stateId

      ID of newly created containing state



      :type: string *(optional)*
      :default: Construct ID of the StateMachineFragment


   .. py:attribute:: comment

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.ParallelProps <@aws-cdk/aws-stepfunctions.ParallelProps.comment>`

      An optional description for this state



      :type: string *(optional)*
      :default: No comment


   .. py:attribute:: inputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.ParallelProps <@aws-cdk/aws-stepfunctions.ParallelProps.inputPath>`

      JSONPath expression to select part of the state to be the input to this state.

      

      May also be the special value DISCARD, which will cause the effective

      input to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: outputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.ParallelProps <@aws-cdk/aws-stepfunctions.ParallelProps.outputPath>`

      JSONPath expression to select part of the state to be the output to this state.

      

      May also be the special value DISCARD, which will cause the effective

      output to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: resultPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.ParallelProps <@aws-cdk/aws-stepfunctions.ParallelProps.resultPath>`

      JSONPath expression to indicate where to inject the state's output

      

      May also be the special value DISCARD, which will cause the state's

      input to become its output.



      :type: string *(optional)*
      :default: $


State
^^^^^

.. py:class:: State(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.State;

      .. code-tab:: javascript

         const { State } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { State } from '@aws-cdk/aws-stepfunctions';



   Base class for all other state classes



   :extends: :py:class:`@aws-cdk/cdk.Construct`\ 
   :implements: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
   :abstract: Yes
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.StateProps`\ 

   .. py:staticmethod:: filterNextables(states) -> @aws-cdk/aws-stepfunctions.INextable[]

      Return only the states that allow chaining from an array of states



      :param states: 
      :type states: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ []
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ []


   .. py:staticmethod:: findReachableEndStates(start, [options]) -> @aws-cdk/aws-stepfunctions.State[]

      Find the set of end states states reachable through transitions from the given start state



      :param start: 
      :type start: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 
      :param options: 
      :type options: :py:class:`~@aws-cdk/aws-stepfunctions.FindStateOptions`\  *(optional)*
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ []


   .. py:staticmethod:: prefixStates(root, prefix)

      Add a prefix to the stateId of all States found in a construct tree



      :param root: 
      :type root: :py:class:`@aws-cdk/cdk.IConstruct`\ 
      :param prefix: 
      :type prefix: string


   .. py:method:: addBranch(branch)

      Add a paralle branch to this state



      *Protected method*

      :param branch: 
      :type branch: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: addChoice(condition, next)

      Add a choice branch to this state



      *Protected method*

      :param condition: 
      :type condition: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: addPrefix(x)

      Add a prefix to the stateId of this state



      :param x: 
      :type x: string


   .. py:method:: bindToGraph(graph)

      Register this state as part of the given graph

      

      Don't call this. It will be called automatically when you work

      states normally.



      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: makeDefault(def)

      Make the indicated state the default choice transition of this state



      *Protected method*

      :param def: 
      :type def: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: makeNext(next)

      Make the indicated state the default transition of this state



      *Protected method*

      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: onBindToGraph(graph)

      Called whenever this state is bound to a graph

      

      Can be overridden by subclasses.



      *Protected method*

      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: renderBranches() -> any

      Render parallel branches in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderChoices() -> any

      Render the choices in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderInputOutput() -> any

      Render InputPath/Parameters/OutputPath in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderNextEnd() -> any

      Render the default next state in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderRetryCatch() -> any

      Render error recovery options in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: toStateJson() -> json

      Render the state as JSON



      :rtype: json
      :abstract: Yes


   .. py:attribute:: branches

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ [] *(readonly)*


   .. py:attribute:: endStates

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IChainable.endStates`

      Continuable states of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ [] *(readonly)* *(abstract)*


   .. py:attribute:: id

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IChainable.id`

      Descriptive identifier for this chainable



      :type: string *(readonly)*


   .. py:attribute:: startState

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IChainable.startState`

      First state of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)*


   .. py:attribute:: stateId

      Tokenized string that evaluates to the state's ID



      :type: string *(readonly)*


   .. py:attribute:: comment

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: inputPath

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: outputPath

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: parameters

      *Protected property*

      :type: json *(optional)* *(readonly)*


   .. py:attribute:: resultPath

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: defaultChoice

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(optional)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


StateGraph
^^^^^^^^^^

.. py:class:: StateGraph(startState, graphDescription)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.StateGraph;

      .. code-tab:: javascript

         const { StateGraph } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { StateGraph } from '@aws-cdk/aws-stepfunctions';



   A collection of connected states

   

   A StateGraph is used to keep track of all states that are connected (have

   transitions between them). It does not include the substatemachines in

   a Parallel's branches: those are their own StateGraphs, but the graphs

   themselves have a hierarchical relationship as well.

   

   By assigning states to a definintive StateGraph, we verify that no state

   machines are constructed. In particular:

   

   - Every state object can only ever be in 1 StateGraph, and not inadvertently

      be used in two graphs.

   - Every stateId must be unique across all states in the entire state

      machine.

   

   All policy statements in all states in all substatemachines are bubbled so

   that the top-level StateMachine instantiation can read them all and add

   them to the IAM Role.

   

   You do not need to instantiate this class; it is used internally.



   :param startState: 
   :type startState: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 
   :param graphDescription: 
   :type graphDescription: string

   .. py:method:: registerPolicyStatement(statement)

      Register a Policy Statement used by states in this graph



      :param statement: 
      :type statement: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: registerState(state)

      Register a state as part of this graph

      

      Called by State.bindToGraph().



      :param state: 
      :type state: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: registerSuperGraph(graph)

      Register this graph as a child of the given graph

      

      Resource changes will be bubbled up to the given graph.



      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: toGraphJson() -> json

      Return the Amazon States Language JSON for this graph



      :rtype: json


   .. py:method:: toString() -> string

      Return a string description of this graph



      :rtype: string


   .. py:attribute:: graphDescription

      :type: string *(readonly)*


   .. py:attribute:: policyStatements

      The accumulated policy statements



      :type: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ [] *(readonly)*


   .. py:attribute:: startState

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)*


   .. py:attribute:: timeoutSeconds

      Set a timeout to render into the graph JSON.

      

      Read/write. Only makes sense on the top-level graph, subgraphs

      do not support this feature.



      :type: number *(optional)*
      :default: No timeout


StateMachine
^^^^^^^^^^^^

.. py:class:: StateMachine(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.StateMachine;

      .. code-tab:: javascript

         const { StateMachine } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { StateMachine } from '@aws-cdk/aws-stepfunctions';



   Define a StepFunctions State Machine



   :extends: :py:class:`@aws-cdk/cdk.Construct`\ 
   :implements: :py:class:`~@aws-cdk/aws-stepfunctions.IStateMachine`\ 
   :implements: :py:class:`@aws-cdk/aws-events.IEventRuleTarget`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.StateMachineProps`\ 

   .. py:staticmethod:: import(scope, id, props) -> @aws-cdk/aws-stepfunctions.IStateMachine

      Import a state machine



      :param scope: 
      :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
      :param id: 
      :type id: string
      :param props: 
      :type props: :py:class:`~@aws-cdk/aws-stepfunctions.StateMachineImportProps`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.IStateMachine`\ 


   .. py:method:: addToRolePolicy(statement)

      Add the given statement to the role's policy



      :param statement: 
      :type statement: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ 


   .. py:method:: asEventRuleTarget(_ruleArn, _ruleId) -> @aws-cdk/aws-events.EventRuleTargetProps

      *Implements* :py:meth:`@aws-cdk/aws-events.IEventRuleTarget.asEventRuleTarget`

      Allows using state machines as event rule targets.



      :param _ruleArn: 
      :type _ruleArn: string
      :param _ruleId: 
      :type _ruleId: string
      :rtype: :py:class:`@aws-cdk/aws-events.EventRuleTargetProps`\ 


   .. py:method:: export() -> @aws-cdk/aws-stepfunctions.StateMachineImportProps

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IStateMachine.export`

      Export this state machine



      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.StateMachineImportProps`\ 


   .. py:method:: metric(metricName, [props]) -> @aws-cdk/aws-cloudwatch.Metric

      Return the given named metric for this State Machine's executions



      :param metricName: 
      :type metricName: string
      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricAborted([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of executions that were aborted



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricFailed([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of executions that failed



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricStarted([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of executions that were started



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricSucceeded([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of executions that succeeded



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricThrottled([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of executions that were throttled



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricTimedOut([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of executions that succeeded



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:attribute:: role

      Execution role of this state machine



      :type: :py:class:`@aws-cdk/aws-iam.Role`\  *(readonly)*


   .. py:attribute:: stateMachineArn

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IStateMachine.stateMachineArn`

      The ARN of the state machine



      :type: string *(readonly)*


   .. py:attribute:: stateMachineName

      The name of the state machine



      :type: string *(readonly)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


StateMachineFragment
^^^^^^^^^^^^^^^^^^^^

.. py:class:: StateMachineFragment(scope, id)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.StateMachineFragment;

      .. code-tab:: javascript

         const { StateMachineFragment } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { StateMachineFragment } from '@aws-cdk/aws-stepfunctions';



   Base class for reusable state machine fragments



   :extends: :py:class:`@aws-cdk/cdk.Construct`\ 
   :implements: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
   :abstract: Yes
   :param scope: The scope in which to define this construct
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: The scoped construct ID. Must be unique amongst siblings. If the ID includes a path separator (`/`), then it will be replaced by double dash `--`.
   :type id: string

   .. py:method:: next(next) -> @aws-cdk/aws-stepfunctions.Chain

      Continue normal execution with the given state



      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Chain`\ 


   .. py:method:: prefixStates([prefix]) -> @aws-cdk/aws-stepfunctions.StateMachineFragment

      Prefix the IDs of all states in this state machine fragment

      

      Use this to avoid multiple copies of the state machine all having the

      same state IDs.



      :param prefix: The prefix to add. Will use construct ID by default.
      :type prefix: string *(optional)*
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.StateMachineFragment`\ 


   .. py:method:: toSingleState([options]) -> @aws-cdk/aws-stepfunctions.Parallel

      Wrap all states in this state machine fragment up into a single state.

      

      This can be used to add retry or error handling onto this state

      machine fragment.

      

      Be aware that this changes the result of the inner state machine

      to be an array with the result of the state machine in it. Adjust

      your paths accordingly. For example, change 'outputPath' to

      '$[0]'.



      :param options: 
      :type options: :py:class:`~@aws-cdk/aws-stepfunctions.SingleStateOptions`\  *(optional)*
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Parallel`\ 


   .. py:attribute:: endStates

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IChainable.endStates`

      The states to chain onto if this fragment is used



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ [] *(readonly)* *(abstract)*


   .. py:attribute:: id

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IChainable.id`

      Descriptive identifier for this chainable



      :type: string *(readonly)*


   .. py:attribute:: startState

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.IChainable.startState`

      The start state of this state machine fragment



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)* *(abstract)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


StateMachineImportProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: StateMachineImportProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.StateMachineImportProps;

      .. code-tab:: javascript

         // StateMachineImportProps is an interface

      .. code-tab:: typescript

         import { StateMachineImportProps } from '@aws-cdk/aws-stepfunctions';



   Properties for an imported state machine





   .. py:attribute:: stateMachineArn

      The ARN of the state machine



      :type: string


StateMachineProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: StateMachineProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.StateMachineProps;

      .. code-tab:: javascript

         // StateMachineProps is an interface

      .. code-tab:: typescript

         import { StateMachineProps } from '@aws-cdk/aws-stepfunctions';



   Properties for defining a State Machine





   .. py:attribute:: definition

      Definition for this state machine



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 


   .. py:attribute:: role

      The execution role for the state machine service



      :type: :py:class:`@aws-cdk/aws-iam.Role`\  *(optional)*
      :default: A role is automatically created


   .. py:attribute:: stateMachineName

      A name for the state machine



      :type: string *(optional)*
      :default: A name is automatically generated


   .. py:attribute:: timeoutSec

      Maximum run time for this state machine



      :type: number *(optional)*
      :default: No timeout


StateProps (interface)
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: StateProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.StateProps;

      .. code-tab:: javascript

         // StateProps is an interface

      .. code-tab:: typescript

         import { StateProps } from '@aws-cdk/aws-stepfunctions';



   Properties shared by all states





   .. py:attribute:: comment

      A comment describing this state



      :type: string *(optional)*
      :default: No comment


   .. py:attribute:: inputPath

      JSONPath expression to select part of the state to be the input to this state.

      

      May also be the special value DISCARD, which will cause the effective

      input to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: outputPath

      JSONPath expression to select part of the state to be the output to this state.

      

      May also be the special value DISCARD, which will cause the effective

      output to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: parameters

      Parameters pass a collection of key-value pairs, either static values or JSONPath expressions that select from the input.



      :type: string => any *(optional)*
      :default: No parameters


   .. py:attribute:: resultPath

      JSONPath expression to indicate where to inject the state's output

      

      May also be the special value DISCARD, which will cause the state's

      input to become its output.



      :type: string *(optional)*
      :default: $


StateTransitionMetric
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: StateTransitionMetric()

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.StateTransitionMetric;

      .. code-tab:: javascript

         const { StateTransitionMetric } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { StateTransitionMetric } from '@aws-cdk/aws-stepfunctions';



   Metrics on the rate limiting performed on state machine execution.

   

   These rate limits are shared across all state machines.




   .. py:staticmethod:: metric(metricName, [props]) -> @aws-cdk/aws-cloudwatch.Metric

      Return the given named metric for the service's state transition metrics



      :param metricName: 
      :type metricName: string
      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:staticmethod:: metricConsumedCapacity([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of available state transitions per second



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:staticmethod:: metricProvisionedBucketSize([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of available state transitions.



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:staticmethod:: metricProvisionedRefillRate([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the provisioned steady-state execution rate



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:staticmethod:: metricThrottledEvents([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of throttled state transitions



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


StateType (enum)
^^^^^^^^^^^^^^^^

.. py:class:: StateType

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.StateType;

      .. code-tab:: javascript

         const { StateType } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { StateType } from '@aws-cdk/aws-stepfunctions';



   State types



   .. py:data:: Pass

   .. py:data:: Task

   .. py:data:: Choice

   .. py:data:: Wait

   .. py:data:: Succeed

   .. py:data:: Fail

   .. py:data:: Parallel


StepFunctionsTaskResourceProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: StepFunctionsTaskResourceProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.StepFunctionsTaskResourceProps;

      .. code-tab:: javascript

         // StepFunctionsTaskResourceProps is an interface

      .. code-tab:: typescript

         import { StepFunctionsTaskResourceProps } from '@aws-cdk/aws-stepfunctions';



   Properties that define how to refer to a TaskResource





   .. py:attribute:: resourceArn

      The ARN of the resource



      :type: string


   .. py:attribute:: metricDimensions

      The dimensions to attach to metrics



      :type: string => any *(optional)*
      :default: No metrics


   .. py:attribute:: metricPrefixPlural

      Prefix for plural metric names of activity actions



      :type: string *(optional)*
      :default: No such metrics


   .. py:attribute:: metricPrefixSingular

      Prefix for singular metric names of activity actions



      :type: string *(optional)*
      :default: No such metrics


   .. py:attribute:: policyStatements

      Additional policy statements to add to the execution role



      :type: :py:class:`@aws-cdk/aws-iam.PolicyStatement`\ [] *(optional)*
      :default: No policy roles


Succeed
^^^^^^^

.. py:class:: Succeed(scope, id, [props])

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.Succeed;

      .. code-tab:: javascript

         const { Succeed } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { Succeed } from '@aws-cdk/aws-stepfunctions';



   Define a Succeed state in the state machine

   

   Reaching a Succeed state terminates the state execution in success.



   :extends: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.SucceedProps`\  *(optional)*

   .. py:method:: toStateJson() -> json

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.toStateJson`

      Return the Amazon States Language object for this state



      :rtype: json


   .. py:attribute:: endStates

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.endStates`

      Continuable states of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ [] *(readonly)*


   .. py:method:: addBranch(branch)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addBranch>`

      Add a paralle branch to this state



      *Protected method*

      :param branch: 
      :type branch: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: addChoice(condition, next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addChoice>`

      Add a choice branch to this state



      *Protected method*

      :param condition: 
      :type condition: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: addPrefix(x)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addPrefix>`

      Add a prefix to the stateId of this state



      :param x: 
      :type x: string


   .. py:method:: bindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.bindToGraph>`

      Register this state as part of the given graph

      

      Don't call this. It will be called automatically when you work

      states normally.



      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: makeDefault(def)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeDefault>`

      Make the indicated state the default choice transition of this state



      *Protected method*

      :param def: 
      :type def: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: makeNext(next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeNext>`

      Make the indicated state the default transition of this state



      *Protected method*

      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: onBindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.onBindToGraph>`

      Called whenever this state is bound to a graph

      

      Can be overridden by subclasses.



      *Protected method*

      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: renderBranches() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderBranches>`

      Render parallel branches in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderChoices() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderChoices>`

      Render the choices in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderInputOutput() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderInputOutput>`

      Render InputPath/Parameters/OutputPath in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderNextEnd() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderNextEnd>`

      Render the default next state in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderRetryCatch() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderRetryCatch>`

      Render error recovery options in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:attribute:: branches

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.branches>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.id>`

      Descriptive identifier for this chainable



      :type: string *(readonly)*


   .. py:attribute:: startState

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.startState>`

      First state of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)*


   .. py:attribute:: stateId

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.stateId>`

      Tokenized string that evaluates to the state's ID



      :type: string *(readonly)*


   .. py:attribute:: comment

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.comment>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: inputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.inputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: outputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.outputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: parameters

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.parameters>`

      *Protected property*

      :type: json *(optional)* *(readonly)*


   .. py:attribute:: resultPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.resultPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: defaultChoice

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.defaultChoice>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(optional)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


SucceedProps (interface)
^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: SucceedProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.SucceedProps;

      .. code-tab:: javascript

         // SucceedProps is an interface

      .. code-tab:: typescript

         import { SucceedProps } from '@aws-cdk/aws-stepfunctions';



   Properties for defining a Succeed state





   .. py:attribute:: comment

      An optional description for this state



      :type: string *(optional)*
      :default: No comment


   .. py:attribute:: inputPath

      JSONPath expression to select part of the state to be the input to this state.

      

      May also be the special value DISCARD, which will cause the effective

      input to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: outputPath

      JSONPath expression to select part of the state to be the output to this state.

      

      May also be the special value DISCARD, which will cause the effective

      output to be the empty object {}.



      :type: string *(optional)*
      :default: $


Task
^^^^

.. py:class:: Task(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.Task;

      .. code-tab:: javascript

         const { Task } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { Task } from '@aws-cdk/aws-stepfunctions';



   Define a Task state in the state machine

   

   Reaching a Task state causes some work to be executed, represented

   by the Task's resource property.



   :extends: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 
   :implements: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.TaskProps`\ 

   .. py:method:: addCatch(handler, [props]) -> @aws-cdk/aws-stepfunctions.Task

      Add a recovery handler for this state

      

      When a particular error occurs, execution will continue at the error

      handler instead of failing the state machine execution.



      :param handler: 
      :type handler: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :param props: 
      :type props: :py:class:`~@aws-cdk/aws-stepfunctions.CatchProps`\  *(optional)*
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Task`\ 


   .. py:method:: addRetry([props]) -> @aws-cdk/aws-stepfunctions.Task

      Add retry configuration for this state

      

      This controls if and how the execution will be retried if a particular

      error occurs.



      :param props: 
      :type props: :py:class:`~@aws-cdk/aws-stepfunctions.RetryProps`\  *(optional)*
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Task`\ 


   .. py:method:: metric(metricName, [props]) -> @aws-cdk/aws-cloudwatch.Metric

      Return the given named metric for this Task



      :param metricName: 
      :type metricName: string
      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricFailed([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times this activity fails



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricHeartbeatTimedOut([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times the heartbeat times out for this activity



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricRunTime([props]) -> @aws-cdk/aws-cloudwatch.Metric

      The interval, in milliseconds, between the time the Task starts and the time it closes.



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricScheduled([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times this activity is scheduled



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricScheduleTime([props]) -> @aws-cdk/aws-cloudwatch.Metric

      The interval, in milliseconds, for which the activity stays in the schedule state.



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricStarted([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times this activity is started



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricSucceeded([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times this activity succeeds



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricTime([props]) -> @aws-cdk/aws-cloudwatch.Metric

      The interval, in milliseconds, between the time the activity is scheduled and the time it closes.



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: metricTimedOut([props]) -> @aws-cdk/aws-cloudwatch.Metric

      Metric for the number of times this activity times out



      :param props: 
      :type props: :py:class:`@aws-cdk/aws-cloudwatch.MetricCustomization`\  *(optional)*
      :rtype: :py:class:`@aws-cdk/aws-cloudwatch.Metric`\ 


   .. py:method:: next(next) -> @aws-cdk/aws-stepfunctions.Chain

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.INextable.next`

      Continue normal execution with the given state



      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Chain`\ 


   .. py:method:: onBindToGraph(graph)

      *Overrides* :py:meth:`@aws-cdk/aws-stepfunctions.State.onBindToGraph`

      Called whenever this state is bound to a graph

      

      Can be overridden by subclasses.



      *Protected method*

      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: toStateJson() -> json

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.toStateJson`

      Return the Amazon States Language object for this state



      :rtype: json


   .. py:attribute:: endStates

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.endStates`

      Continuable states of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ [] *(readonly)*


   .. py:method:: addBranch(branch)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addBranch>`

      Add a paralle branch to this state



      *Protected method*

      :param branch: 
      :type branch: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: addChoice(condition, next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addChoice>`

      Add a choice branch to this state



      *Protected method*

      :param condition: 
      :type condition: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: addPrefix(x)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addPrefix>`

      Add a prefix to the stateId of this state



      :param x: 
      :type x: string


   .. py:method:: bindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.bindToGraph>`

      Register this state as part of the given graph

      

      Don't call this. It will be called automatically when you work

      states normally.



      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: makeDefault(def)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeDefault>`

      Make the indicated state the default choice transition of this state



      *Protected method*

      :param def: 
      :type def: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: makeNext(next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeNext>`

      Make the indicated state the default transition of this state



      *Protected method*

      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: renderBranches() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderBranches>`

      Render parallel branches in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderChoices() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderChoices>`

      Render the choices in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderInputOutput() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderInputOutput>`

      Render InputPath/Parameters/OutputPath in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderNextEnd() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderNextEnd>`

      Render the default next state in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderRetryCatch() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderRetryCatch>`

      Render error recovery options in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:attribute:: branches

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.branches>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.id>`

      Descriptive identifier for this chainable



      :type: string *(readonly)*


   .. py:attribute:: startState

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.startState>`

      First state of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)*


   .. py:attribute:: stateId

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.stateId>`

      Tokenized string that evaluates to the state's ID



      :type: string *(readonly)*


   .. py:attribute:: comment

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.comment>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: inputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.inputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: outputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.outputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: parameters

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.parameters>`

      *Protected property*

      :type: json *(optional)* *(readonly)*


   .. py:attribute:: resultPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.resultPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: defaultChoice

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.defaultChoice>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(optional)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


TaskProps (interface)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: TaskProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.TaskProps;

      .. code-tab:: javascript

         // TaskProps is an interface

      .. code-tab:: typescript

         import { TaskProps } from '@aws-cdk/aws-stepfunctions';



   Properties for defining a Task state





   .. py:attribute:: resource

      The resource that represents the work to be executed

      

      Can be either a Lambda Function or an Activity.



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.IStepFunctionsTaskResource`\ 


   .. py:attribute:: comment

      An optional description for this state



      :type: string *(optional)*
      :default: No comment


   .. py:attribute:: heartbeatSeconds

      Maximum time between heart beats

      

      If the time between heart beats takes longer than this, a 'Timeout' error is raised.

      

      This is only relevant when using an Activity type as resource.



      :type: number *(optional)*
      :default: No heart beat timeout


   .. py:attribute:: inputPath

      JSONPath expression to select part of the state to be the input to this state.

      

      May also be the special value DISCARD, which will cause the effective

      input to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: outputPath

      JSONPath expression to select part of the state to be the output to this state.

      

      May also be the special value DISCARD, which will cause the effective

      output to be the empty object {}.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: parameters

      Parameters pass a collection of key-value pairs, either static values or JSONPath expressions that select from the input.



      :type: string => any *(optional)*
      :default: No parameters


   .. py:attribute:: resultPath

      JSONPath expression to indicate where to inject the state's output

      

      May also be the special value DISCARD, which will cause the state's

      input to become its output.



      :type: string *(optional)*
      :default: $


   .. py:attribute:: timeoutSeconds

      Maximum run time of this state

      

      If the state takes longer than this amount of time to complete, a 'Timeout' error is raised.



      :type: number *(optional)*
      :default: 60


Wait
^^^^

.. py:class:: Wait(scope, id, props)

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.Wait;

      .. code-tab:: javascript

         const { Wait } = require('@aws-cdk/aws-stepfunctions');

      .. code-tab:: typescript

         import { Wait } from '@aws-cdk/aws-stepfunctions';



   Define a Wait state in the state machine

   

   A Wait state can be used to delay execution of the state machine for a while.



   :extends: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 
   :implements: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ 
   :param scope: 
   :type scope: :py:class:`@aws-cdk/cdk.Construct`\ 
   :param id: 
   :type id: string
   :param props: 
   :type props: :py:class:`~@aws-cdk/aws-stepfunctions.WaitProps`\ 

   .. py:method:: next(next) -> @aws-cdk/aws-stepfunctions.Chain

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.INextable.next`

      Continue normal execution with the given state



      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.IChainable`\ 
      :rtype: :py:class:`~@aws-cdk/aws-stepfunctions.Chain`\ 


   .. py:method:: toStateJson() -> json

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.toStateJson`

      Return the Amazon States Language object for this state



      :rtype: json


   .. py:attribute:: endStates

      *Implements* :py:meth:`@aws-cdk/aws-stepfunctions.State.endStates`

      Continuable states of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.INextable`\ [] *(readonly)*


   .. py:method:: addBranch(branch)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addBranch>`

      Add a paralle branch to this state



      *Protected method*

      :param branch: 
      :type branch: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: addChoice(condition, next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addChoice>`

      Add a choice branch to this state



      *Protected method*

      :param condition: 
      :type condition: :py:class:`~@aws-cdk/aws-stepfunctions.Condition`\ 
      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: addPrefix(x)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.addPrefix>`

      Add a prefix to the stateId of this state



      :param x: 
      :type x: string


   .. py:method:: bindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.bindToGraph>`

      Register this state as part of the given graph

      

      Don't call this. It will be called automatically when you work

      states normally.



      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: makeDefault(def)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeDefault>`

      Make the indicated state the default choice transition of this state



      *Protected method*

      :param def: 
      :type def: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: makeNext(next)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.makeNext>`

      Make the indicated state the default transition of this state



      *Protected method*

      :param next: 
      :type next: :py:class:`~@aws-cdk/aws-stepfunctions.State`\ 


   .. py:method:: onBindToGraph(graph)

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.onBindToGraph>`

      Called whenever this state is bound to a graph

      

      Can be overridden by subclasses.



      *Protected method*

      :param graph: 
      :type graph: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ 


   .. py:method:: renderBranches() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderBranches>`

      Render parallel branches in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderChoices() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderChoices>`

      Render the choices in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderInputOutput() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderInputOutput>`

      Render InputPath/Parameters/OutputPath in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderNextEnd() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderNextEnd>`

      Render the default next state in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:method:: renderRetryCatch() -> any

      *Inherited from* :py:meth:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.renderRetryCatch>`

      Render error recovery options in ASL JSON format



      *Protected method*

      :rtype: any


   .. py:attribute:: branches

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.branches>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.StateGraph`\ [] *(readonly)*


   .. py:attribute:: id

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.id>`

      Descriptive identifier for this chainable



      :type: string *(readonly)*


   .. py:attribute:: startState

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.startState>`

      First state of this Chainable



      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(readonly)*


   .. py:attribute:: stateId

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.stateId>`

      Tokenized string that evaluates to the state's ID



      :type: string *(readonly)*


   .. py:attribute:: comment

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.comment>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: inputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.inputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: outputPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.outputPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: parameters

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.parameters>`

      *Protected property*

      :type: json *(optional)* *(readonly)*


   .. py:attribute:: resultPath

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.resultPath>`

      *Protected property*

      :type: string *(optional)* *(readonly)*


   .. py:attribute:: defaultChoice

      *Inherited from* :py:attr:`@aws-cdk/aws-stepfunctions.State <@aws-cdk/aws-stepfunctions.State.defaultChoice>`

      *Protected property*

      :type: :py:class:`~@aws-cdk/aws-stepfunctions.State`\  *(optional)*


   .. py:method:: prepare()

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.prepare>`

      Perform final modifications before synthesis

      

      This method can be implemented by derived constructs in order to perform

      final changes before synthesis. prepare() will be called after child

      constructs have been prepared.

      

      This is an advanced framework feature. Only use this if you

      understand the implications.



      *Protected method*



   .. py:method:: toString() -> string

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.toString>`

      Returns a string representation of this construct.



      :rtype: string


   .. py:method:: validate() -> string[]

      *Inherited from* :py:meth:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.validate>`

      Validate the current construct.

      

      This method can be implemented by derived constructs in order to perform

      validation logic. It is called on all constructs before synthesis.



      *Protected method*

      :return: An array of validation error messages, or an empty array if there the construct is valid.
      :rtype: string[]


   .. py:attribute:: dependencyRoots

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.dependencyRoots>`

      The set of constructs that form the root of this dependable

      

      All resources under all returned constructs are included in the ordering

      dependency.



      :type: :py:class:`@aws-cdk/cdk.IConstruct`\ [] *(readonly)*


   .. py:attribute:: node

      *Inherited from* :py:attr:`@aws-cdk/cdk.Construct <@aws-cdk/cdk.Construct.node>`

      Construct node.



      :type: :py:class:`@aws-cdk/cdk.ConstructNode`\  *(readonly)*


WaitProps (interface)
^^^^^^^^^^^^^^^^^^^^^

.. py:class:: WaitProps

   **Language-specific names:**

   .. tabs::

      .. code-tab:: c#

         using Amazon.CDK.AWS.StepFunctions;

      .. code-tab:: java

         import software.amazon.awscdk.services.stepfunctions.WaitProps;

      .. code-tab:: javascript

         // WaitProps is an interface

      .. code-tab:: typescript

         import { WaitProps } from '@aws-cdk/aws-stepfunctions';



   Properties for defining a Wait state





   .. py:attribute:: comment

      An optional description for this state



      :type: string *(optional)*
      :default: No comment


   .. py:attribute:: seconds

      Wait a fixed number of seconds

      

      Exactly one of seconds, secondsPath, timestamp, timestampPath must be supplied.



      :type: number *(optional)*


   .. py:attribute:: secondsPath

      Wait for a number of seconds stored in the state object.

      

      Exactly one of seconds, secondsPath, timestamp, timestampPath must be supplied.



      :type: string *(optional)*


   .. py:attribute:: timestamp

      Wait until the given ISO8601 timestamp

      

      Exactly one of seconds, secondsPath, timestamp, timestampPath must be supplied.



      :type: string *(optional)*


   .. py:attribute:: timestampPath

      Wait until a timestamp found in the state object.

      

      Exactly one of seconds, secondsPath, timestamp, timestampPath must be supplied.



      :type: string *(optional)*


